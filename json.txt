[{"name":"Open Wifi Settings ","code":"new Intent(\"android.intent.action.MAIN\").setClassName(\"com.android.settings\", \"com.android.settings.wifi.WifiSettings;\"); startActivity(new Intent(\"android.settings.WIFI_SETTINGS\"));"},{"name":"Check Internet Connections","code":"ConnectivityManager connectivityManager \u003d (ConnectivityManager)\ngetSystemService(Context.CONNECTIVITY_SERVICE);\n\nif (connectivityManager.getActiveNetworkInfo() !\u003d null) {\n\nif (connectivityManager.getActiveNetworkInfo().isAvailable() \u0026\u0026 connectivityManager.getActiveNetworkInfo().isConnected()) {\n\n//if Internet Available \n\n}\n}else{\n//if not \n};"},{"name":"Textinput Layout","code":"((LinearLayout)_lay).removeView(_edittext); final com.google.android.material.textfield.TextInputLayout textinput \u003d new com.google.android.material.textfield.TextInputLayout (MainActivity.this); textinput.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT)); textinput.setPadding((int)getDip(8), (int)getDip(8) , (int)getDip(8) , (int)getDip(8) ); textinput.addView(_edittext); ((LinearLayout)_lay).addView(textinput);"},{"name":"Metarial Error","code":"try{ (( com.google.android.material.textfield.TextInputLayout )_edit.getParent().getParent()).setError(_e); _edit.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) { } @Override public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) { } @Override public void afterTextChanged(Editable et) { (( com.google.android.material.textfield.TextInputLayout )_edit.getParent().getParent()).setError(null); } }); } catch (Exception e) { _edit.setError(_e); }"},{"name":"For Loop","code":"for(int i\u003d0;i\u003c10;i++)\n{\n\n}"},{"name":"Share post on Facebook","code":"Intent intent \u003d new Intent(); intent.setAction(Intent.ACTION_SEND); intent.setPackage(title); intent.putExtra(android.content.Intent.EXTRA_TITLE, title); intent.putExtra(Intent.EXTRA_TEXT, description); intent.setType(\"text/plain\"); \n\ntry {\n\n // Start the specific social application\nstartActivity(intent); } catch (android.content.ActivityNotFoundException ex) {\n\n}"},{"name":"Check Location ","code":"\nfinal LocationManager manager \u003d (LocationManager) getSystemService( Context.LOCATION_SERVICE ); \n\nif (manager.isProviderEnabled(LocationManager.GPS_PROVIDER)){ \n\n//if one \n\n}else{ \n\n//if Disabled \n\n}"},{"name":"Enable Drawer","code":"//Enabled \n_drawer.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);"},{"name":"Disable Drawer","code":"//Disabled\n_drawer.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);"},{"name":"Permission Check","code":"if (checkSelfPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE) \u003d\u003d android.content.pm.PackageManager.PERMISSION_DENIED) {\n\n//your dialog show\n\nyour_diaog.okButton {\nrequestPermissions(new String[] {android.Manifest.permission.READ_EXTERNAL_STORAGE}, 1000);\n}else{\n//dialog dismis\n}"},{"name":"Open 4g Network","code":"//Change Network mode:\n\nIntent intent \u003d new Intent(\"android.intent.action.MAIN\"); intent.setComponent(new ComponentName(\"com.android.settings\", \"com.android.settings.RadioInfo\")); startActivity(intent);\n\nThe code doesn\u0027t need changes.\nThe code may not work on some devices due to the sistem of each device."},{"name":"Open Url","code":"//Copied From Universal SketchCode Premium(6.1).\nstartActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://site.ru\")));"},{"name":"ListView short","code":"Collections.sort(listview,String.CASE_INSENSITIVE_ORDER);\n\n//you try it also\n\nCollections.sort(LIST);\n\n//also you can try this\n\nCollections.sort(LIST, Collections.reverseOrder());"},{"name":"Sd Card detection ","code":"Detect if SD card is present or not.\n\nCode:\nBoolean isSDPresent \u003d android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED); Boolean isSDSupportedDevice \u003d Environment.isExternalStorageRemovable(); if(isSDSupportedDevice \u0026\u0026 isSDPresent) {\n\n// yes SD-card is present\n\n} \nelse\n{\n\n// unavailable\n\n}"},{"name":"Custome Spinner","code":"//you will need to set same view \nto customblistview, then you can use:\n\nspinner.setAdapter(new Listview1Adapter(your_listmap));\n\n//and hide listview"},{"name":"setText","code":"textview1.setText(\"\");"},{"name":"ButtomSheet Round ","code":"android.graphics.drawable.GradientDrawable wd \u003d new android.graphics.drawable.GradientDrawable(); wd.setColor(Color.WHITE); wd.setCornerRadii(new float[]{(int)70,(int)70,(int)70,(int)70,(int)0,(int)0,(int)0,(int)0});\r\nlinear1.setBackground(wd);"},{"name":"TextPath - library ","code":"}\n\npublic class TestPath extends Path { public TestPath(){ init(); } private void init() { addCircle(450,180,150,Direction.CCW); addCircle(450,180,100,Direction.CW); addCircle(450,180,50,Direction.CCW); moveTo(450,180); lineTo(600,330); }}\n\n{"},{"name":"Notification ","code":"Notification.Builder mBuilder \u003d new Notification.Builder(MainActivity.this);\nmBuilder.setSmallIcon(R.drawable.appicon);\nmBuilder.setContentTitle(\"You\u0027re Title\");\nmBuilder.setContentText(\"You\u0027re Text\");\nNotificationManager notificationManager \u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\nint onx \u003d 1;\nnotificationManager.notify(onx, mBuilder.build());"},{"name":"If /Else ","code":"if (true) {\r\n\t\t\t\r\n}\r"},{"name":"Text to Html","code":"textview.setText(Html.fromHtml(\"Hello World\"));"},{"name":"Divide Hide","code":"//Set Height\nlistview.setDividerHeight(0);\n\n//If you want null\nlistview.setDivider(null); "},{"name":"Circle progress  XML","code":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"utf-8\" ?\u003e \u003clayer-list xmlns:android\u003d\"http://schemas.android.com/apk/res/android\" android:fromDegrees\u003d\"120.0\" android:toDegrees\u003d\"140.0\" android:pivotX\u003d\"50.0%\" android:pivotY\u003d\"50.0%\"\u003e \t\u003citem android:id\u003d\"@android:id/background\"\u003e \t\t\u003cshape android:shape\u003d\"ring\" android:innerRadiusRatio\u003d\"2.3\" android:thicknessRatio\u003d\"40.0\" android:useLevel\u003d\"false\" android:angle\u003d\"0.0\" android:type\u003d\"sweep\"\u003e \t\t\t\u003csolid android:color\u003d\"#E0E0E0\" /\u003e \t\t\u003c/shape\u003e \t\u003c/item\u003e \t\u003citem android:id\u003d\"@android:id/progress\"\u003e \t\t\u003crotate android:fromDegrees\u003d\"270.0\" android:toDegrees\u003d\"270.0\"\u003e \t\t\t\u003cshape android:shape\u003d\"ring\" android:innerRadiusRatio\u003d\"2.3\" android:thicknessRatio\u003d\"40.0\" android:angle\u003d\"0.0\" android:type\u003d\"sweep\"\u003e \t\t\t\t\u003csolid android:color\u003d\"#009688\" /\u003e \t\t\t\u003c/shape\u003e \t\t\u003c/rotate\u003e \t\u003c/item\u003e \u003c/layer-list\u003e"},{"name":"Add bg service ","code":"BackgroundServicesCodes\n\n//enable service \nIntent intent \u003d new Intent(MainActivity.this, bgservice.class); startService(intent); \n//manifest XML \n\u003cservice android:name\u003d\".bgservice\"\u003e\u003c/service\u003e \n//bg service \nimport android.app.*; \nimport android.content.*; \nimport android.os.*; \nimport android.widget.*; \nimport java.util.*; \npublic class bgservice extends Service { private static Timer timer \u003d new Timer(); private Context ctx; public IBinder onBind(Intent arg0) { return null; } public void onCreate() { super.onCreate(); ctx \u003d this; startService(); } private void startService() { timer.scheduleAtFixedRate(new mainTask(), 0, 5000); } private class mainTask extends TimerTask { public void run() { toastHandler.sendEmptyMessage(0); } } public void onDestroy() { super.onDestroy(); } private final Handler toastHandler \u003d new Handler() { @Override public void handleMessage(Message msg) { } \n};}"},{"name":"Find Country Code","code":"GET COUNTRY CODE\ntry {\nvar \u003d ((android.telephony.TelephonyManager) MainActivity.this.getSystemService(Context.TELEPHONY_SERVICE)).getSimCountryIso().toUpperCase();\n} catch(Exception e) {\nvar \u003d \"Not Found\";\n}"},{"name":"CheckBox Color","code":"SET CHECKBOX COLOR\n\ncheckbox1.getButtonDrawable().setColorFilter(Color.parseColor(\"#FF00FF\"), PorterDuff.Mode.SRC_IN);\n\n//checkbox1 is your checkbox ID\n//#FF00FF is your RRGGBB color"},{"name":"Marquee Text","code":"//CREATE A MARQUEE TEXT ANIMATION (as seen in TV news report)\n\ntextview1.setText(\"Headlines: Sketchware will be officially part of Google Android IDE software for year 2020\");\ntextview1.setEllipsize(TextUtils.TruncateAt.MARQUEE);\ntextview1.setSelected(true);\ntextview1.setHorizontallyScrolling(true);\ntextview1.setMarqueeRepeatLimit(-1);\ntextview1.setSingleLine(true);\ntextview1.setFocusable(true);\ntextview1.setFocusableInTouchMode(true);\n\n//Your textview will animate from right to left forever without using Java loops.\n\n/*Note add Vertical Linear id linear1 and TextView textview1\n* textview width should be set to match_parent\n* FAQS:\nQ: WHY MY TEXTVIEW IS NOT ANIMATING?\nAnswer:\n\nIf the characters in your textview are smaller in lenght, select one of these options: \n* maximize the padding of your textview\n* maximize the text size of your textview\n* increase the characters by adding words or spaces etc.\n* solve by your own"},{"name":"Linkify/setText Clickable","code":"textview1.setClickable(true);\nandroid.text.util.Linkify.addLinks(textview1, android.text.util.Linkify.ALL);\ntextview1.setLinkTextColor(Color.parseColor(\"#009688\"));\ntextview1.setLinksClickable(true);\n\n"},{"name":"Root Checker","code":"try {\n\nRuntime.getRuntime().exec(\"su\");\n\n//if rooted\n\n} catch (Exception e) {\n\n///if not rooted\n\n}\n\n"},{"name":"ListView Animation","code":"Animation animation;\nanimation \u003d AnimationUtils.loadAnimation(\n                     getApplicationContext(), android.R.anim.slide_in_left\n                 );\nanimation.setDuration(200); linear1.startAnimation(animation); animation \u003d null;"},{"name":"TextView shadow","code":"  textview1.setShadowLayer(3,1,1, Color.BLACK);"},{"name":"StatusBar Color","code":"Window w \u003d this.getWindow();w.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);w.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); w.setStatusBarColor(Color.parseColor(\"#000000\"));"},{"name":"Text Clock","code":"TextClock textClock \u003d new TextClock(MainActivity.this);\n//For 12 Hour\n//textClock.setFormat12Hour(\"hh:mm:ss a\"); \n//For 24 Hour\n//textClock.setFormat24Hour(\"hh:mm:ss\");\nlinear1.addView(textClock);"},{"name":"Redio Button","code":"RadioButton radioButton \u003d new RadioButton(MainActivity.this);\nradioButton.setText(\"RadioButton\");\nlinear1.addView(radioButton);"},{"name":"MultiAuto Complete TextView","code":"MultiAutoCompleteTextView multiAutoCompleteTextView \u003d new MultiAutoCompleteTextView(MainActivity.this);\nmultiAutoCompleteTextView.setHint(\"MultiAutoCompleteTextView\");\nlinear1.addView(multiAutoCompleteTextView);"},{"name":"Analog Clock","code":"AnalogClock analogClock \u003d new AnalogClock(MainActivity.this); linear1.addView(analogClock);"},{"name":"Reverse ListView","code":"Collections.reverse(LIST);"},{"name":"Launch App","code":"Intent launchIntent \u003d getPackageManager().getLaunchIntentForPackage(\"com..package.name\"); \n{ \nstartActivity(launchIntent);\n}"},{"name":"Banner Ads Listener ","code":"adview1.setAdListener(new AdListener() {\n@Override public void onAdLoaded() {\nSketchwareUtil.showMessage(getApplicationContext(), \"Banner Ad Loaded\");\n}\n@Override public void onAdFailedToLoad(int errorCode) {\nSketchwareUtil.showMessage(getApplicationContext(), \"Banner Ad Failed to Load\".concat(String.valueOf((long)(errorCode))));\n}\n@Override public void onAdOpened() {\nSketchwareUtil.showMessage(getApplicationContext(), \"Banner Ad Opened\");\n}\n@Override public void onAdClicked() {\nSketchwareUtil.showMessage(getApplicationContext(), \"Banner Ad Clicked\");\n}\n@Override public void onAdLeftApplication() {\nSketchwareUtil.showMessage(getApplicationContext(), \"Banner Ad Left Application\");\n}\n@Override public void onAdClosed() {\nSketchwareUtil.showMessage(getApplicationContext(), \"Banner Ad Closed\");\n}\n});\n//code by PlaySketch StudiO Inc\n//NOTE\n\n//inside \"main.xml\n//adview1\n\n//Component\n//Interstitial Ad"},{"name":"Battery Health ","code":"//On Activity Create\n\nfinal BroadcastReceiver mBroadcastReceiver \u003d new BroadcastReceiver() {\n@Override\npublic void onReceive(Context context, Intent intent) {\nToast.makeText(getApplicationContext(), \"Received\", Toast.LENGTH_SHORT).show();\nint health \u003d intent.getIntExtra(BatteryManager.EXTRA_HEALTH,0);\nString healthString \u003d \"\";\n// Determine the battery health from return integer value\nif(health \u003d\u003d BatteryManager.BATTERY_HEALTH_COLD){\nhealthString \u003d \"COLD\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_DEAD){\nhealthString \u003d \"DEAD\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_GOOD){\nhealthString \u003d \"GOOD\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_OVERHEAT){\nhealthString \u003d \"OVER HEAT\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE){\nhealthString \u003d \"OVER VOLTAGE\";\n}else if(health \u003d\u003d BatteryManager.BATTERY_HEALTH_UNKNOWN){\nhealthString \u003d \"UNKNOWN\"; \n}else if(health \u003d\u003d BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE){\nhealthString \u003d \"UNSPECIFIED FAILURE\";\n}\ntextview1.setText(\"Battery Health : \" + healthString);\n}\n};\n\nIntentFilter iFilter \u003d new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\ngetApplicationContext().registerReceiver(mBroadcastReceiver,iFilter);"},{"name":"Uber progress ","code":"//Create Uber ProgressView :\r\n\r\nUberProgressView upv \u003d new UberProgressView(this);\r\nlinear1.addView(upv);\r\n\r\n//Add Class :\r\n\r\npublic static class UberProgressView extends View {\r\n    private static final String TAG \u003d UberProgressView.class.getSimpleName();\r\n    private static final String CIRCLE_COLOR \u003d \"#29B6F6\";\r\n    private static final int MAX_FADING_CIRCLE_ALPHA \u003d 100;\r\n    private static final float TRAILING_FUNCTION_CHANGE_THRESHOLD \u003d 0.90f;\r\n    private static final int TOTAL_ANIMATION_TIME \u003d 450;\r\n    private float cXStationary;\r\n    private float cYStationary;\r\n    private float rStationary;\r\n    private float rStationaryGF;\r\n    private float rOrbiting;\r\n    private float orbitPathDistanceFromCenter;\r\n    private final Paint mPaintStationaryCircle \u003d new Paint();\r\n    private final Paint mPaintGrowingFadingCircle \u003d new Paint();\r\n    private final Paint mPaintOrbitingCircle1 \u003d new Paint();\r\n    private final Paint mPaintOrbitingCircle2 \u003d new Paint();\r\n    private final Paint mPaintOrbitingCircle3 \u003d new Paint();\r\n    private final Paint mPaintOrbitingCircle4 \u003d new Paint();\r\n    private int stationaryCircleColor;\r\n    private int fadingCircleColor;\r\n    private int oribitingCircleColor;\r\n    private int roationDirection;\r\n    // Animation calculation fields\r\n    private float currentAnimationTime;\r\n    private float delta;\r\n    private float theta;\r\n    private int fadingCircleAlpha \u003d 255;\r\n    private float movementFactor1, movementFactor2, movementFactor3;\r\n    private RefreshViewRunnable refreshViewRunnable;\r\n    public UberProgressView(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n    public UberProgressView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(context, attrs);\r\n    }\r\n    public UberProgressView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(context, attrs);\r\n    }\r\n    private void init(Context context, AttributeSet attributeSet) {\r\n        \r\n            stationaryCircleColor \u003d Color.parseColor(CIRCLE_COLOR);\r\n            fadingCircleColor \u003d Color.parseColor(CIRCLE_COLOR);\r\n            oribitingCircleColor \u003d Color.parseColor(CIRCLE_COLOR);\r\n            roationDirection \u003d 0;\r\n            rStationary \u003d 12;\r\n            float orbitingCircleRadius \u003d 6;\r\n             if (orbitingCircleRadius \u003e (rStationary / 3)) {\r\n                rOrbiting \u003d rStationary / 2;\r\n            } else {\r\n                rOrbiting \u003d orbitingCircleRadius;\r\n            }\r\n        \r\n\r\n        setupColorPallets();\r\n        setupInitialValuesForAnimation();\r\n    }\r\n    private void init() {\r\n        stationaryCircleColor \u003d Color.parseColor(CIRCLE_COLOR);\r\n        fadingCircleColor \u003d Color.parseColor(CIRCLE_COLOR);\r\n        oribitingCircleColor \u003d Color.parseColor(CIRCLE_COLOR);\r\n        rStationary \u003d 12f;\r\n        rOrbiting \u003d rStationary / 2;\r\n        setupColorPallets();\r\n        setupInitialValuesForAnimation();\r\n    }\r\n    private void setupInitialValuesForAnimation() {\r\n        orbitPathDistanceFromCenter \u003d 4 * rStationary;\r\n    }\r\n    private void setupColorPallets() {\r\n        mPaintGrowingFadingCircle.setColor(fadingCircleColor);\r\n        mPaintGrowingFadingCircle.setAntiAlias(true);\r\n        mPaintStationaryCircle.setColor(stationaryCircleColor);\r\n        mPaintStationaryCircle.setAntiAlias(true);\r\n        mPaintOrbitingCircle1.setColor(oribitingCircleColor);\r\n        mPaintOrbitingCircle1.setAntiAlias(true);\r\n        mPaintOrbitingCircle2.setColor(oribitingCircleColor);\r\n        mPaintOrbitingCircle2.setAlpha(191);\r\n        mPaintOrbitingCircle2.setAntiAlias(true);\r\n        mPaintOrbitingCircle3.setColor(oribitingCircleColor);\r\n        mPaintOrbitingCircle3.setAlpha(127);\r\n        mPaintOrbitingCircle3.setAntiAlias(true);\r\n        mPaintOrbitingCircle4.setColor(oribitingCircleColor);\r\n        mPaintOrbitingCircle4.setAlpha(64);\r\n        mPaintOrbitingCircle4.setAntiAlias(true);\r\n    }\r\n\r\n    @Override\r\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n        super.onSizeChanged(w, h, oldw, oldh);\r\n        cXStationary \u003d w / 2;\r\n        cYStationary \u003d h / 2;\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n\r\n        canvas.drawCircle(cXStationary, cYStationary, rStationary, mPaintStationaryCircle);\r\n        canvas.drawCircle(cXStationary, cYStationary, rStationaryGF, mPaintGrowingFadingCircle);\r\n        mPaintGrowingFadingCircle.setAlpha(fadingCircleAlpha);\r\n        drawCircle(canvas, theta, mPaintOrbitingCircle1);\r\n        if (theta \u003e 15 \u0026\u0026 theta \u003c 270) {\r\n            drawCircle(canvas, theta - movementFactor1, mPaintOrbitingCircle2);\r\n        }\r\n        if (theta \u003e 30 \u0026\u0026 theta \u003c 315) {\r\n            drawCircle(canvas, theta - movementFactor2, mPaintOrbitingCircle3);\r\n        }\r\n        if (theta \u003e 45 \u0026\u0026 theta \u003c 350) {\r\n            drawCircle(canvas, theta - movementFactor3, mPaintOrbitingCircle4);\r\n        }\r\n    }\r\n    @Override\r\n    protected void onWindowVisibilityChanged(int visibility) {\r\n        super.onWindowVisibilityChanged(visibility);\r\n        if (View.GONE \u003d\u003d visibility) {\r\n            removeCallbacks(refreshViewRunnable);\r\n        } else {\r\n            removeCallbacks(refreshViewRunnable);\r\n            refreshViewRunnable \u003d new RefreshViewRunnable();\r\n            post(refreshViewRunnable);\r\n        }\r\n    }\r\n    private void drawCircle(Canvas canvas, float theta, Paint paint) {\r\n        double thetaInRadians \u003d Math.toRadians(theta);\r\n        float oribitingCX, oribitingCY;\r\n        if (roationDirection \u003d\u003d 0) {\r\n            oribitingCX \u003d cXStationary + (orbitPathDistanceFromCenter * (float) Math.cos(thetaInRadians));\r\n            oribitingCY \u003d cYStationary + (orbitPathDistanceFromCenter * (float) Math.sin(thetaInRadians));\r\n        } else {\r\n            oribitingCX \u003d cXStationary + (orbitPathDistanceFromCenter * (float) Math.sin(thetaInRadians));\r\n            oribitingCY \u003d cYStationary + (orbitPathDistanceFromCenter * (float) Math.cos(thetaInRadians));\r\n        }\r\n        canvas.drawCircle(oribitingCX, oribitingCY, rOrbiting, paint);\r\n    }\r\n    private float getLagFactor(float K) {\r\n        \r\n        return (K - (delta * ( K / 3)));\r\n    }\r\n    private float getTrailFactor(float K) {\r\n        \r\n        return ((4 * K * delta) - (3 * K)) / 16;\r\n    }\r\n    private class RefreshViewRunnable implements Runnable {\r\n        @Override\r\n        public void run() {\r\n            synchronized (UberProgressView.this) {\r\n                if (currentAnimationTime \u003e\u003d 0) {\r\n                    currentAnimationTime +\u003d 5;\r\n                    delta \u003d currentAnimationTime/TOTAL_ANIMATION_TIME;\r\n                    rStationaryGF \u003d rStationary * 4 * delta;\r\n                    if (delta \u003e\u003d 1.0) {\r\n                        currentAnimationTime \u003d 0;\r\n                        rStationaryGF \u003d 0f;\r\n                    }\r\n                    fadingCircleAlpha \u003d MAX_FADING_CIRCLE_ALPHA - (int)(delta * MAX_FADING_CIRCLE_ALPHA);\r\n                    theta \u003d (360 * delta) - 90;\r\n                    if (delta \u003c TRAILING_FUNCTION_CHANGE_THRESHOLD) {\r\n                        movementFactor1 \u003d getLagFactor(15);\r\n                        movementFactor2 \u003d getLagFactor(30);\r\n                        movementFactor3 \u003d getLagFactor(45);\r\n                    } else {\r\n                        movementFactor1 \u003d getTrailFactor(15);\r\n                        movementFactor2 \u003d getTrailFactor(30);\r\n                        movementFactor3 \u003d getTrailFactor(45);\r\n                    }\r\n                    invalidate();\r\n                    postDelayed(this, 16);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"},{"name":"Mark Color","code":"//Mark Color :\r\n\r\ncolorHandles(edittext1, Color.parseColor(\"#3F51B5\"));\r\nsetCursorDrawableColor(edittext1, Color.parseColor(\"#3F51B5\"));\r\nedittext1.setHighlightColor(Color.parseColor(\"#5C6BC0\"));\r\n\r\n//Add Class :\r\n\r\npublic static void colorHandles(TextView view, int color) {\r\n        try {\r\n            java.lang.reflect.Field editorField \u003d TextView.class.getDeclaredField(\"mEditor\");\r\n            if (!editorField.isAccessible()) {\r\n                editorField.setAccessible(true);\r\n            }\r\n            Object editor \u003d editorField.get(view);\r\n            Class\u003c?\u003e editorClass \u003d editor.getClass();\r\n            String[] handleNames \u003d {\"mSelectHandleLeft\", \"mSelectHandleRight\", \"mSelectHandleCenter\"};\r\n            String[] resNames \u003d {\"mTextSelectHandleLeftRes\", \"mTextSelectHandleRightRes\", \"mTextSelectHandleRes\"};\r\n            for (int i \u003d 0; i \u003c handleNames.length; i++) {\r\n                java.lang.reflect.Field handleField \u003d editorClass.getDeclaredField(handleNames[i]);\r\n                if (!handleField.isAccessible()) {\r\n                    handleField.setAccessible(true);\r\n                }\r\n                android.graphics.drawable.Drawable handleDrawable \u003d (android.graphics.drawable.Drawable) handleField.get(editor);\r\n                if (handleDrawable \u003d\u003d null) {\r\n                    java.lang.reflect.Field resField \u003d TextView.class.getDeclaredField(resNames[i]);\r\n                    if (!resField.isAccessible()) {\r\n                        resField.setAccessible(true);\r\n                    }\r\n                    int resId \u003d resField.getInt(view);\r\n                    handleDrawable \u003d view.getResources().getDrawable(resId);\r\n                }\r\n                if (handleDrawable !\u003d null) {\r\n                    android.graphics.drawable.Drawable drawable \u003d handleDrawable.mutate();\r\n                    drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);\r\n                    handleField.set(editor, drawable);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void setCursorDrawableColor(TextView editText, int color) {\r\n        try {\r\n            java.lang.reflect.Field fCursorDrawableRes \u003d TextView.class.getDeclaredField(\"mCursorDrawableRes\");\r\n            fCursorDrawableRes.setAccessible(true);\r\n            int mCursorDrawableRes \u003d fCursorDrawableRes.getInt(editText);\r\n            java.lang.reflect.Field fEditor \u003d TextView.class.getDeclaredField(\"mEditor\");\r\n            fEditor.setAccessible(true);\r\n            Object editor \u003d fEditor.get(editText);\r\n            Class\u003c?\u003e clazz \u003d editor.getClass();\r\n            java.lang.reflect.Field fCursorDrawable \u003d clazz.getDeclaredField(\"mCursorDrawable\");\r\n            fCursorDrawable.setAccessible(true);\r\n            android.graphics.drawable.Drawable[] drawables \u003d new android.graphics.drawable.Drawable[2];\r\n            android.content.res.Resources res \u003d editText.getContext().getResources();\r\n            drawables[0] \u003d res.getDrawable(mCursorDrawableRes);\r\n            drawables[1] \u003d res.getDrawable(mCursorDrawableRes);\r\n            drawables[0].setColorFilter(color, PorterDuff.Mode.SRC_IN);\r\n            drawables[1].setColorFilter(color, PorterDuff.Mode.SRC_IN);\r\n            fCursorDrawable.set(editor, drawables);\r\n        } catch (final Throwable ignored) {\r\n        }\r\n}"},{"name":"Text Writer ","code":"//Create :\r\n\r\nfinal TypeWriterView mytext \u003d new TypeWriterView(this);\r\nmytext.setTextColor(0xFF000000);\r\nmytext.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\r\nmytext.setTextSize(30);\r\nlinear1.addView(mytext);\r\n\r\n//Configuration :\r\n\r\nmytext.setDelay(100);\r\nmytext.setWithMusic(true, R.raw.typing);\r\nmytext.animateText(\"Your Text From Java Library\");\r\n\r\n\r\n//Add Class :\r\n\r\npublic interface TypeWriterListener {\r\n    void onTypingStart(String text);\r\n    void onTypingEnd(String text);\r\n    void onCharacterTyped(String text, int position);\r\n    void onTypingRemoved(String text);\r\n}\r\n\r\npublic class TypeWriterView extends android.support.v7.widget.AppCompatTextView {\r\n    private android.media.MediaPlayer mPlayer;\r\n    private CharSequence mText;\r\n    private String mPrintingText;\r\n    private int mIndex;\r\n    private long mDelay \u003d 100;\r\n    private Context mContext;\r\n    private TypeWriterListener mTypeWriterListener;\r\n    private boolean mWithMusic \u003d true;\r\n    public int RawMusic;\r\n    private boolean animating \u003d false;\r\n    private Runnable mBlinker;\r\n    private int i \u003d 0;\r\n    private Handler mHandler \u003d new Handler();\r\n    private Runnable mCharacterAdder \u003d new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (animating) {\r\n                setText(mText.subSequence(0, mIndex++) + \"_\");\r\n               \r\n                if (mTypeWriterListener !\u003d null)\r\n                    mTypeWriterListener.onCharacterTyped(mPrintingText, mIndex);\r\n                if (mIndex \u003c\u003d mText.length()) {\r\n                    mHandler.postDelayed(mCharacterAdder, mDelay);\r\n                } else {\r\n                    if (mWithMusic)\r\n                        mPlayer.stop();\r\n                    if (mTypeWriterListener !\u003d null)\r\n                        mTypeWriterListener.onTypingEnd(mPrintingText);\r\n                    animating \u003d false;\r\n                    callBlink();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    public TypeWriterView(Context context) {\r\n        super(context);\r\n        mContext \u003d context;\r\n    }\r\n    public TypeWriterView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n    }\r\n    private void callBlink() {\r\n        mBlinker \u003d new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (i \u003c\u003d 10) {\r\n                    if (i++ % 2 !\u003d 0) {\r\n                        setText(mText + \" _\");\r\n                        mHandler.postDelayed(mBlinker, 150);\r\n                    } else {\r\n                        setText(mText + \"   \");\r\n                        mHandler.postDelayed(mBlinker, 150);\r\n                    }\r\n                } else\r\n                    i \u003d 0;\r\n            }\r\n        };\r\n        mHandler.postDelayed(mBlinker, 150);\r\n    }\r\n    private void playMusic() {\r\n        if (mWithMusic) {\r\n            mPlayer \u003d android.media.MediaPlayer.create(getContext(), RawMusic);\r\n            mPlayer.setLooping(true);\r\n            mPlayer.start();\r\n        }\r\n    }\r\n    public void animateText(String text) {\r\n        if (!animating) {\r\n            animating \u003d true;\r\n            mText \u003d text;\r\n            mPrintingText \u003d text;\r\n            mIndex \u003d 0;\r\n            playMusic();\r\n            setText(\"\");\r\n            mHandler.removeCallbacks(mCharacterAdder);\r\n            if (mTypeWriterListener !\u003d null)\r\n                mTypeWriterListener.onTypingStart(mPrintingText);\r\n            mHandler.postDelayed(mCharacterAdder, mDelay);\r\n        } else {\r\n            Toast.makeText(mContext, \"Typewriter busy typing: \" + mText, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n    public void setDelay(int delay) {\r\n        if (delay \u003e\u003d 20 \u0026\u0026 delay \u003c\u003d 150)\r\n            this.mDelay \u003d delay;\r\n    }\r\n    public void setWithMusic(boolean music, int mp) {\r\n        mWithMusic \u003d music;\r\n        RawMusic \u003d mp;\r\n    }\r\n    public void removeAnimation() {\r\n        mHandler.removeCallbacks(mCharacterAdder);\r\n        if (mWithMusic \u0026\u0026 mPlayer !\u003d null \u0026\u0026 mPlayer.isPlaying())\r\n            mPlayer.stop();\r\n        animating \u003d false;\r\n        setText(mPrintingText);\r\n        if (mTypeWriterListener !\u003d null)\r\n            mTypeWriterListener.onTypingRemoved(mPrintingText);\r\n    }\r\n    public void setTypeWriterListener(TypeWriterListener typeWriterListener) {\r\n        this.mTypeWriterListener \u003d typeWriterListener;\r\n    }\r\n}"},{"name":"Dp to Pixel","code":"//Usages :\n\nint dp_first \u003d 25;\nint dp_second \u003d 15;\nint dp_third \u003d 29;\nint dp_fourth \u003d 41;\nActivity activity \u003d MainActivity.this;\ntextview.setText(\"Hello, i am codify...\");\ntextview.setText(textview.getText()+- \"\"+-dp_first+- \"dp \u003d \"+- getPixelsFromDPs(activity,dp_first) +- \"pixels\"+-dp_second+- \"dp \u003d \"+- getPixelsFromDPs(activity,dp_second) +- \"pixels\"+-dp_third+- \"dp \u003d \"+- getPixelsFromDPs(activity,dp_third) +- \"pixels\"+-dp_fourth+- \"dp \u003d \"+- getPixelsFromDPs(activity,dp_fourth) +- \"pixels\");\n//code by PlaySketch StudiO Inc\n//Class Method :\n\npublic static int getPixelsFromDPs(Activity activity, int dps){\nandroid.content.res.Resources r \u003d activity.getResources();\nint  px \u003d (int) (android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_DIP, dps, r.getDisplayMetrics()));\nreturn px;\n}"},{"name":"Screen Orientation ","code":"//Lanscape Mode\n\nsetRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n\n//Portrait Mode\n\nsetRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);"},{"name":"Take Screenshort","code":"//Usages :\n\ntakeScreenshot();\n\n//Private Method :\n\nprivate void takeScreenshot() {\nDate now \u003d new Date(); \nandroid.text.format.DateFormat.format(\"yyyy-MM-dd_hh:mm:ss\", now);\ntry {\nString mPath \u003d Environment.getExternalStorageDirectory().toString() +- \"/\" +- now +- \".jpg\";\nView v1 \u003d getWindow().getDecorView().getRootView();\nv1.setDrawingCacheEnabled(true);\nBitmap bitmap \u003d Bitmap.createBitmap(v1.getDrawingCache()); \nv1.setDrawingCacheEnabled(false);\njava.io.File imageFile \u003d new java.io.File(mPath);\njava.io.FileOutputStream outputStream \u003d new java.io.FileOutputStream(imageFile);\nint quality \u003d 100; \nbitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);\noutputStream.flush();\noutputStream.close();\nopenScreenshot(imageFile);\n} catch (Throwable e) {\ne.printStackTrace();\n}"},{"name":"Text to pdf","code":"try {\nandroid.graphics.pdf.PdfDocument document \u003d new android.graphics.pdf.PdfDocument();\nandroid.graphics.pdf.PdfDocument.PageInfo pageInfo \u003d new android.graphics.pdf.PdfDocument.PageInfo.Builder(1080, 1920, 2).create();\nandroid.graphics.pdf.PdfDocument.Page page1 \u003d document.startPage(pageInfo);\nView content1 \u003d linear1;\ncontent1.draw(page1.getCanvas());\ndocument.finishPage(page1);\nandroid.graphics.pdf.PdfDocument.Page page2 \u003d document.startPage(pageInfo);\nView content2 \u003d linear2;\ncontent2.draw(page2.getCanvas());\ndocument.finishPage(page2);\njava.io.File myFile \u003d new java.io.File(getExternalCacheDir() +- \"/newpdf.pdf\");\nmyFile.createNewFile();\njava.io.FileOutputStream fOut \u003d new java.io.FileOutputStream(myFile);\ndocument.writeTo(fOut);\nfOut.close();\ndocument.close();\nIntent emailIntent \u003d new Intent(android.content.Intent.ACTION_SEND);\nemailIntent.setType(\"*/*\");\nemailIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() +-\"/newpdf.pdf\")));\nstartActivity(Intent.createChooser(emailIntent, \"Send text file\"));\nToast.makeText(getBaseContext(), \"File saved as .pdf\", Toast.LENGTH_SHORT).show();\n\n}\ncatch (Exception e) {\nToast.makeText(getBaseContext(), e.getMessage(), Toast.LENGTH_SHORT).show();\n\n}"},{"name":"Save Image","code":"Bitmap bm \u003d ((android.graphics.drawable.BitmapDrawable) imageview1.getDrawable()).getBitmap();\n\ntry {\njava.io.File file \u003d new java.io.File(getExternalCacheDir() +- \"/image.jpg\");\n\njava.io.OutputStream out \u003d new java.io.FileOutputStream(file);\n\nbm.compress(Bitmap.CompressFormat.JPEG, 100, out);\n\nout.flush();\nout.close();\n\n} catch (Exception e) { \n\n}\nIntent iten \u003d new Intent(android.content.Intent.ACTION_SEND);\n\niten.setType(\"*/*\");\n\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() +- \"/image.jpg\")));\n\nstartActivity(Intent.createChooser(iten, \"Share Image\"));"},{"name":"PageViewer","code":"final android.support.v4.view.ViewPager viewPager \u003d new android.support.v4.view.ViewPager(this);\nviewPager.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\nviewPager.setBackgroundColor(Color.BLACK);\nMyPagerAdapter adapter \u003d new MyPagerAdapter();\nviewPager.setAdapter(adapter);\nviewPager.setCurrentItem(0);\nlinear1.addView(viewPager);\nviewPager.addOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() { public void onPageSelected(int position) { \nView noview \u003d (View) viewPager.findViewWithTag(\"myview\" + viewPager.getCurrentItem());\nif (position \u003d\u003d 1) {\nButton bt \u003d (Button) noview.findViewById(R.id.button1);\nbt.setOnClickListener(new OnClickListener() { public void onClick(View v) {viewPager.setCurrentItem(0);} });\n}\nif (position \u003d\u003d 3) {\nTextView tt \u003d (TextView) noview.findViewById(R.id.textview2);\ntt.setTextIsSelectable(true);\ntt.setText(\"Aan Gabriel\");\n}\n}\n@Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { }\n@Override public void onPageScrollStateChanged(int state) { }\n});\n}\nprivate class MyPagerAdapter extends android.support.v4.view.PagerAdapter {\npublic int getCount() {\nreturn 4;\n}\npublic Object instantiateItem(View collection, int position) {\nLayoutInflater inflater \u003d (LayoutInflater) collection.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\nint resId \u003d 0;\nswitch (position) {\ncase 0:\nresId \u003d R.layout.left;\nbreak;\ncase 1:\nresId \u003d R.layout.farleft;\nbreak;\ncase 2:\nresId \u003d R.layout.middle;\nbreak;\ncase 3:\nresId \u003d R.layout.right;\nbreak;\n}\nView view \u003d inflater.inflate(resId, null);\n((android.support.v4.view.ViewPager)collection).addView(view, 0);\nview.setTag(\"myview\" + position);\nreturn view;\n}\n@Override\npublic void destroyItem(View arg0, int arg1, Object arg2) {\n((android.support.v4.view.ViewPager) arg0).removeView((View) arg2);\n}\n@Override\npublic boolean isViewFromObject(View arg0, Object arg1) {\nreturn arg0 \u003d\u003d ((View) arg1);\n}\n@Override\npublic Parcelable saveState() {\nreturn null;\n}"},{"name":"Youtube Video Downloader","code":"//Copied From Universal SketchCode Premium(6.1).\nfinal List\u003cVideo\u003e videos \u003d new ArrayList\u003cVideo\u003e();\nbutton_container.setVisibility(View.GONE);\nweb.setWebViewClient(new WebViewClient(){\n@Override\npublic android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView view, android.webkit.WebResourceRequest request) {\nif(request.getUrl().toString().matches(\".*googlevideo.com/videoplayback.*\")){\nVideo vid\u003dnew Video(request.getUrl().toString());\nboolean isExists \u003d false;\nfor(Video v:videos){\nif(v.size\u003d\u003dvid.size) isExists\u003dtrue;\n}\nif(!isExists) videos.add(vid);\nnew Handler(Looper.getMainLooper()).post(new Runnable(){\n@Override\npublic void run(){\nbutton_container.setVisibility(View.VISIBLE);\n}\n});\nreturn new WebResourceResponse(\"\", \"\", null);\n}\nreturn super.shouldInterceptRequest(view, request);\n}\n@Override\npublic void onPageFinished(android.webkit.WebView view, java.lang.String url) {\nvideos.clear();\nif(url.contains(\"watch?v\u003d\"))\nnew Handler().postDelayed(new Runnable(){\n@Override\npublic void run() {\nweb.loadUrl(\"javascript:document.getElementsByTagName(\u0027video\u0027)[0].play();\");\n}\n}, 1000);\n//Toast.makeText(WVYoutubeDl.this, \"Play Video First to Enable Download\",0).show();\n}\n});\nweb.setWebChromeClient(new WebChromeClient(){\n@Override\npublic void onProgressChanged(WebView view, int progress) {\nnew Handler(Looper.getMainLooper()).post(new Runnable(){\n@Override\npublic void run(){\nbutton_container.setVisibility(View.GONE);\n}\n});\n}\n});\nweb.loadUrl(\"https://youtube.com/\");\nbtn.setText(\"Download Video\");\nbtn.setOnClickListener(new View.OnClickListener(){\n@Override\npublic void onClick(View p1) {\nString[] vids\u003dnew String[videos.size()];\nfor(int i\u003d0;i\u003cvideos.size();i++){\nVideo v\u003dvideos.get(i);\nvids[i]\u003d(v.isAudioOnly?\"Audio\":\"Video\")+\" (\"+v.readableSize+\")\";\n}\nAlertDialog.Builder dlg\u003dnew AlertDialog.Builder(MainActivity.this);\ndlg.setTitle(\"Download\");\ndlg.setItems(vids, new android.content.DialogInterface.OnClickListener(){\n@Override\npublic void onClick(android.content.DialogInterface p1, int p2) {\ndownload_(videos.get(p2).url);\n}\n});\ndlg.show();\n}\n});\nshowAlert();\n}\n@Override\npublic void onBackPressed() {\nif(web.canGoBack())\nweb.goBack();\nelse\nsuper.onBackPressed();\n}\nprivate void showAlert(){\nnew AlertDialog.Builder(this).setTitle(\"WARNING\").setMessage(\"Downloading Youtube videos is against Google Terms of Service, do with your own risk.\").show();\n}\nprivate String readableFileSize(long size) {\nif(size \u003c\u003d 0) return \"0\";\nfinal String[] units \u003d new String[] { \"B\", \"kB\", \"MB\", \"GB\", \"TB\" };\nint digitGroups \u003d (int) (Math.log10(size)/Math.log10(1024));\nreturn new java.text.DecimalFormat(\"#,##0.#\").format(size/Math.pow(1024, digitGroups)) + \" \" + units[digitGroups];\n}\nprivate void download_(String url){\nDownloadManager dmgr \u003d (DownloadManager) this.getSystemService(DOWNLOAD_SERVICE);\nDownloadManager.Request request \u003d new DownloadManager.Request(android.net.Uri.parse(url));\nrequest.setAllowedNetworkTypes(\nDownloadManager.Request.NETWORK_WIFI\n| DownloadManager.Request.NETWORK_MOBILE)\n.setAllowedOverRoaming(false).setTitle(\"Download\")\n.setDescription(\"Downloading Video...\")\n.setDestinationInExternalPublicDir(\"/Download/\", System.currentTimeMillis()+\".mp4\");\ndmgr.enqueue(request);\n}\npublic class Video{\npublic String url;\npublic boolean isAudioOnly;\npublic long size;\npublic String readableSize;\npublic Video(String s){\nString ss\u003ds.replaceAll(\"\u0026range\u003d[\\\\d-]*\u0026\",\"\u0026\");\nurl\u003dss;\nisAudioOnly\u003dss.contains(\"mime\u003daudio\");\nsize\u003dLong.parseLong( ss.split(\"\u0026clen\u003d\")[1].split(\"\u0026\")[0]);\nreadableSize\u003dreadableFileSize(size);\n}"},{"name":"Youtube Full Screen","code":"//Usages :\n\nwebview1.setWebChromeClient(new CustomWebClient());\n\n//Class Method :\n\npublic class CustomWebClient extends WebChromeClient {\nprivate View mCustomView;\nprivate WebChromeClient.CustomViewCallback mCustomViewCallback;\nprotected FrameLayout frame;\nprivate int mOriginalOrientation \u003d android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\nprivate int mOriginalSystemUiVisibility;\npublic CustomWebClient() {}\npublic Bitmap getDefaultVideoPoster() {\nif (MainActivity.this \u003d\u003d null) {\nreturn null;\n}\nreturn BitmapFactory.decodeResource(MainActivity.this.getApplicationContext().getResources(), 2130837573);\n}\npublic void onShowCustomView(View paramView, WebChromeClient.CustomViewCallback viewCallback) {\nif (this.mCustomView !\u003d null) {\nonHideCustomView();\nreturn; }\nthis.mCustomView \u003d paramView;\nthis.mOriginalSystemUiVisibility \u003d MainActivity.this.getWindow().getDecorView().getSystemUiVisibility();\nMainActivity.this.setRequestedOrientation(this.mOriginalOrientation);\nthis.mOriginalOrientation \u003d android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\nthis.mCustomViewCallback \u003d viewCallback; ((FrameLayout)MainActivity.this.getWindow().getDecorView()).addView(this.mCustomView, new FrameLayout.LayoutParams(-1, -1)); MainActivity.this.getWindow().getDecorView().setSystemUiVisibility(3846);\n}\npublic void onHideCustomView() {\n((FrameLayout)MainActivity.this.getWindow().getDecorView()).removeView(this.mCustomView);\nthis.mCustomView \u003d null;\nMainActivity.this.getWindow().getDecorView().setSystemUiVisibility(this.mOriginalSystemUiVisibility);\nMainActivity.this.setRequestedOrientation(this.mOriginalOrientation);\nthis.mOriginalOrientation \u003d android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE; this.mCustomViewCallback.onCustomViewHidden();\nthis.mCustomViewCallback \u003d null;\n}\n}"},{"name":"Zebra TextView","code":"//Create :\r\n\r\nZebraTextView txt \u003d new ZebraTextView(this);\r\ntxt.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\ntxt.setText(\"Hello...\\nIam Codify...\\n Thanks For Using This app\");\r\ntxt.setTextSize(20);\r\ntxt.setEvenLineColor(Color.parseColor(\"#FF0000\"));\r\ntxt.setOddLineColor(Color.parseColot(\"#00FF00\"));\r\nlinear1.addView(txt);\r\n\r\n//Add Class :\r\n\r\npublic static class ZebraTextView extends TextView {\r\n    private int evenColor;\r\n    private int oddColor;\r\n    private Rect r;\r\n    public ZebraTextView(Context context) {\r\n        super(context);\r\n        init(null);\r\n    }\r\n    public ZebraTextView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(attrs);\r\n    }\r\n    public ZebraTextView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(attrs);\r\n    }\r\n    private void init(AttributeSet attrs) {\r\n        setEvenLineColor(Color.TRANSPARENT);\r\n        setOddLineColor(Color.parseColor(\"#77E3EDCD\"));\r\n        r \u003d new Rect();\r\n    }\r\n    public void setEvenLineColor(int color) {\r\n        this.evenColor \u003d color;\r\n        postInvalidate();\r\n    }\r\n    public void setOddLineColor(int color) {\r\n        this.oddColor \u003d color;\r\n        postInvalidate();\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        Layout layout \u003d getLayout();\r\n        for (int i \u003d 0; i \u003c layout.getLineCount(); i++) {\r\n            layout.getLineBounds(i, r);\r\n            getPaint().setColor(i % 2 \u003d\u003d 0 ? oddColor : evenColor);\r\n            r.left \u003d getPaddingLeft();\r\n            r.right \u003d getMeasuredWidth() - getPaddingRight();\r\n            canvas.drawRect(r, getPaint());\r\n        }\r\n        super.onDraw(canvas);\r\n    }\r\n}\r"},{"name":"Youtube to Mp3","code":"//Create :\r\n\r\nprogressDialog \u003d new ProgressDialog(MainActivity.this);\r\nprogressDialog.setMessage(\"Downloading\");\r\nprogressDialog.setCanceledOnTouchOutside(false);\r\nprogressDialog.setCancelable(false);\r\n\r\n\r\n//Add Private :\r\n\r\nprivate ProgressDialog progressDialog;\r\npublic void downloadSong(View view) {\r\n\tprogressDialog.show();\r\n\tnew YTubeMp3Service.Builder(MainActivity.this)\r\n\t\t.setDownloadUrl(\"https://youtu.be/nZDGC-tXCo0\")\r\n\t\t.setFolderPath(new java.io.File(Environment.getExternalStorageDirectory(), \"/YTMp3/Downloads\").getPath())\r\n\t\t.setOnDownloadListener(new YTubeMp3Service.Builder.DownloadListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onSuccess(String savedPath) {\r\n\t\t\t\tprogressDialog.dismiss();\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void onDownloadStarted() {\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(Exception e) {\r\n\t\t\t\tprogressDialog.dismiss();\r\n\t\t\t}\r\n\t}).build();\r\n}\r\n\r\n//Add Class :\r\n\r\npublic static class YTubeMp3Service {\r\n    private java.io.File file \u003d null;\r\n    private Builder builder;\r\n    private YTubeMp3Service(Builder mBuilder) {\r\n        builder \u003d mBuilder;\r\n        startDownload(builder.downloadUrl);\r\n    }\r\n    private void startDownload(String link) {\r\n        try {\r\n            if(!isNetworkAvailable()){\r\n                builder.downloadListener.onError(new Exception(\"No Internet Connection\"));\r\n                return;\r\n            }\r\n            String youtubeUrl \u003d \"http://www.youtubeinmp3.com/fetch/?format\u003dJSON\u0026video\u003d%s\";\r\n            okhttp3.Request request \u003d new okhttp3.Request.Builder()\r\n                    .url(String.format(youtubeUrl, link))\r\n                    .build();\r\n            new okhttp3.OkHttpClient().newCall(request).enqueue(new okhttp3.Callback() {\r\n                @Override\r\n                public void onFailure(okhttp3.Call call, java.io.IOException e) {\r\n                    builder.downloadListener.onError(e);\r\n                }\r\n                @Override\r\n                public void onResponse(okhttp3.Call call, okhttp3.Response response) throws java.io.IOException {\r\n                    String stringResponse \u003d response.body().string();\r\n                    builder.downloadListener.onDownloadStarted();\r\n                    Log.v(\"stringResp\", stringResponse);\r\n                    try {\r\n                        org.json.JSONObject jsonObject \u003d new org.json.JSONObject(stringResponse);\r\n                        String downloadLink \u003d jsonObject.getString(\"link\");\r\n                        String downloadTitle \u003d jsonObject.getString(\"title\");\r\n                        saveMp3(downloadLink, downloadTitle);\r\n                    } catch (Exception e) {\r\n                        builder.downloadListener.onError(e);\r\n                    }\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            builder.downloadListener.onError(e);\r\n        }\r\n    }\r\n    private void saveMp3(String link, final String title) {\r\n        try {\r\n            okhttp3.Request request \u003d new okhttp3.Request.Builder()\r\n                    .url(link)\r\n                    .build();\r\n            new okhttp3.OkHttpClient().newCall(request).enqueue(new okhttp3.Callback() {\r\n                @Override\r\n                public void onFailure(okhttp3.Call call, java.io.IOException e) {\r\n                    builder.downloadListener.onError(e);\r\n                }\r\n                @Override\r\n                public void onResponse(okhttp3.Call call, okhttp3.Response response) throws java.io.IOException {\r\n                    String fileName \u003d title.replaceAll(\"[^a-zA-Z]+\", \"\");\r\n                    if (!builder.folder.exists()) {\r\n                        boolean folderCreated \u003d builder.folder.mkdir();\r\n                        Log.v(\"folderCreated\", folderCreated + \"\");\r\n                    }\r\n                    file \u003d new java.io.File(builder.folder.getPath() + \"/\" + fileName + \".mp3\");\r\n                    try {\r\n                        boolean fileCreated \u003d file.createNewFile();\r\n                        Log.v(\"fileCreated\", fileCreated + \"\");\r\n                        okio.BufferedSink sink \u003d okio.Okio.buffer(okio.Okio.sink(file));\r\n                        sink.writeAll(response.body().source());\r\n                        sink.close();\r\n                        builder.downloadListener.onSuccess(file.getPath());\r\n                    } catch (Exception e) {\r\n                        builder.downloadListener.onError(e);\r\n                    }\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            builder.downloadListener.onError(e);\r\n        }\r\n    }\r\n    @SuppressWarnings(\"deprecation\")\r\n    private boolean isNetworkAvailable() {\r\n        boolean status \u003d false;\r\n        try {\r\n            android.net.ConnectivityManager cm \u003d (android.net.ConnectivityManager) builder.activity.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            android.net.NetworkInfo netInfo \u003d cm.getNetworkInfo(0);\r\n\r\n            if (netInfo !\u003d null\r\n                    \u0026\u0026 netInfo.getState() \u003d\u003d android.net.NetworkInfo.State.CONNECTED) {\r\n                status \u003d true;\r\n            } else {\r\n                netInfo \u003d cm.getNetworkInfo(1);\r\n                if (netInfo !\u003d null\r\n                        \u0026\u0026 netInfo.getState() \u003d\u003d android.net.NetworkInfo.State.CONNECTED)\r\n                    status \u003d true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n        return status;\r\n    }\r\n    public static class Builder {\r\n        DownloadListener downloadListener \u003d null;\r\n        java.io.File folder \u003d null;\r\n        String downloadUrl \u003d \"\";\r\n        Activity activity;\r\n        public Builder(Activity mActivity) {\r\n            activity \u003d mActivity;\r\n        }\r\n        public Builder setDownloadUrl(String url) {\r\n            downloadUrl \u003d url;\r\n            return this;\r\n        }\r\n        public Builder setFolderPath(String folderPath) {\r\n            folder \u003d new java.io.File(folderPath);\r\n            return this;\r\n        }\r\n        public Builder setOnDownloadListener(DownloadListener downloadListener) {\r\n            this.downloadListener \u003d downloadListener;\r\n            return this;\r\n        }\r\n        public YTubeMp3Service build() {\r\n            return new YTubeMp3Service(this);\r\n        }\r\n        public interface DownloadListener {\r\n            void onSuccess(String savedPath);\r\n            void onDownloadStarted();\r\n            void onError(Exception e);\r\n        }\r\n    }\r\n}"},{"name":"Notify listView","code":"notifyDataSetChanged();"},{"name":"Open File by Type","code":"\n//code by PlaySketch StudiO Inc\n\n\njava.io.File _PathOpenFile \u003d Environment.getExternalStorageDirectory();\njava.io.File myFile \u003d new java.io.File(_PathOpenFile + \"/aan.zip\");\njava.io.File url \u003d myFile;\nUri uri \u003d Uri.fromFile(url);\nIntent intent \u003d new Intent(Intent.ACTION_VIEW);\nif (url.toString().contains(\".doc\") || url.toString().contains(\".docx\")) {\nintent.setDataAndType(uri, \"application/msword\");\n} else if(url.toString().contains(\".pdf\")) {\nintent.setDataAndType(uri, \"application/pdf\");\n} else if(url.toString().contains(\".ppt\") || url.toString().contains(\".pptx\")) {\nintent.setDataAndType(uri, \"application/vnd.ms-powerpoint\");\n} else if(url.toString().contains(\".xls\") || url.toString().contains(\".xlsx\")) {\nintent.setDataAndType(uri, \"application/vnd.ms-excel\");\n} else if(url.toString().contains(\".zip\") || url.toString().contains(\".rar\")) {\nintent.setDataAndType(uri, \"application/zip\");\n} else if(url.toString().contains(\".rtf\")) {\nintent.setDataAndType(uri, \"application/rtf\");\n} else if(url.toString().contains(\".wav\") || url.toString().contains(\".mp3\")) {\nintent.setDataAndType(uri, \"audio/x-wav\");\n} else if(url.toString().contains(\".gif\")) {\nintent.setDataAndType(uri, \"image/gif\");\n} else if(url.toString().contains(\".jpg\") || url.toString().contains(\".jpeg\") || url.toString().contains(\".png\")) {\nintent.setDataAndType(uri, \"image/jpeg\");\n} else if(url.toString().contains(\".txt\")) {\nintent.setDataAndType(uri, \"text/plain\");\n} else if(url.toString().contains(\".3gp\") || url.toString().contains(\".mpg\") || url.toString().contains(\".mpeg\") || url.toString().contains(\".mpe\") || url.toString().contains(\".mp4\") || url.toString().contains(\".avi\")) {\nintent.setDataAndType(uri, \"video/*\");\n} else {\nintent.setDataAndType(uri, \"*/*\");\n}\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\nstartActivity(intent);\n"},{"name":"Keyboard - Number Only ","code":"\n//code by PlaySketch StudiO Inc\nedittext.setInputType(InputType.TYPE_CLASS_NUMBER);\n"},{"name":"Pop-up Menu","code":"\n//code by PlaySketch StudiO Inc\n\nPopupMenu popup \u003d new PopupMenu(MainActivity.this, button1);\n\nMenu menu \u003d popup.getMenu();\nmenu.add(\"Aan\");\nmenu.add(\"Gabriel\");\n//code by PlaySketch StudiO Inc\npopup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n\npublic boolean onMenuItemClick(MenuItem item) {\nswitch (item.getTitle().toString()) {\ncase \"Aan\":\nshowMessage(\"Aan clicked\");\nreturn true;\n\ncase \"Gabriel\":\nshowMessage(\"Gabriel Clicked\");\nreturn true;\n\ndefault: return false;\n}\n}\n});\n//code by PlaySketch StudiO Inc\npopup.show();\n"},{"name":"Runtime - kill process","code":"\n//code by PlaySketch StudiO Inc\n\nfinishAffinity();\nint pid \u003d android.os.Process.myPid();\nandroid.os.Process.killProcess(pid); \nIntent intent \u003d new Intent(Intent.ACTION_MAIN);\nintent.addCategory(Intent.CATEGORY_HOME);\nstartActivity(intent);\n"},{"name":"Data - on/off","code":"\n//code by PlaySketch StudiO Inc\n\nprivate final static String COMMAND_L_ON \u003d \"svc data enable\n \";\nprivate final static String COMMAND_L_OFF \u003d \"svc data disable\n \";\nprivate final static String COMMAND_SU \u003d \"su\";\n\npublic static void setConnection(boolean enable,Context context){\n    String command;\n    if(enable)\n        command \u003d COMMAND_L_ON;\n    else\n        command \u003d COMMAND_L_OFF;\n    try{\n        java.lang.Process su \u003d Runtime.getRuntime().exec(COMMAND_SU);\n        java.io.DataOutputStream outputStream \u003d new java.io.DataOutputStream(su.getOutputStream());\n        outputStream.writeBytes(command);\n        outputStream.flush();\n        outputStream.writeBytes(\"exit\n\");\n        outputStream.flush();\n        try {\n            su.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        outputStream.close();\n    }catch(java.io.IOException e){\n        e.printStackTrace();\n    }\n}\n"},{"name":"Get Ip Address ","code":"\n//code by PlaySketch StudiO Inc\n\n//Check the internet connection.\n@SuppressWarnings(\"deprecation\")\nprivate void NetwordDetect() {\n    boolean WIFI \u003d false;\n    boolean MOBILE \u003d false;\n    android.net.ConnectivityManager CM \u003d (android.net.ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    android.net.NetworkInfo[] networkInfo \u003d CM.getAllNetworkInfo();\n    for (android.net.NetworkInfo netInfo : networkInfo) {\n          if (netInfo.getTypeName().equalsIgnoreCase(\"WIFI\")) {\n              if (netInfo.isConnected()) {\n                  WIFI \u003d true;\n              }\n          }\n          if (netInfo.getTypeName().equalsIgnoreCase(\"MOBILE\")) {\n              if (netInfo.isConnected()) {\n                  MOBILE \u003d true;\n              }\n          }\n    }\n    if(WIFI \u003d\u003d true) {\n       final String IPaddress \u003d GetDeviceipWiFiData();\n       textview1.setText(IPaddress);\n   }\n   if(MOBILE \u003d\u003d true) {\n      final String IPaddress \u003d GetDeviceipMobileData();\n      textview1.setText(IPaddress); \n  } \n}\n \npublic String GetDeviceipMobileData(){\n try {\n       for (Enumeration\u003cjava.net.NetworkInterface\u003e en \u003d java.net.NetworkInterface.getNetworkInterfaces(); \n             en.hasMoreElements();) {\n             java.net.NetworkInterface networkinterface \u003d en.nextElement();\n          for (Enumeration\u003cjava.net.InetAddress\u003e enumIpAddr \u003d networkinterface.getInetAddresses(); enumIpAddr.hasMoreElements();) {\n             java.net.InetAddress inetAddress \u003d enumIpAddr.nextElement();\n             if (!inetAddress.isLoopbackAddress()) {\n                 return inetAddress.getHostAddress().toString();\n            }\n         }\n      }\n } catch (Exception ex) {\n      textview1.setText(\"Current IP\" + ex.toString());\n }\n return null;\n}\n \npublic String GetDeviceipWiFiData() {\n android.net.wifi.WifiManager wm \u003d (android.net.wifi.WifiManager) getSystemService(WIFI_SERVICE);\n @SuppressWarnings(\"deprecation\")\n String ip \u003d android.text.format.Formatter.formatIpAddress(wm.getConnectionInfo().getIpAddress());\n return ip;\n}\n//code by PlaySketch StudiO Inc\n//Add Permission to manifest\n\u003cuses-permission android:name\u003d\"android.permission.INTERNET\" /\u003e\n\u003cuses-permission android:name\u003d\"android.permission.ACCESS_NETWORK_STATE\" /\u003e\n\u003cuses-permission android:name\u003d\"android.permission.ACCESS_WIFI_STATE\"/\u003e\n//code by PlaySketch StudiO Inc\n//On Button Access\nNetwordDetect();\n"},{"name":"Get language ","code":"\n//code by PlaySketch StudiO Inc\n\nString language \u003d Locale.getDefault().getDisplayLanguage();\ntextview1.setText(language);\n"},{"name":"Get Imei","code":"\n//code by PlaySketch StudiO Inc\n\n//1\npublic String getIMEI(Activity activity) {\n    android.telephony.TelephonyManager telephonyManager \u003d (android.telephony.TelephonyManager) activity.getSystemService(Context.TELEPHONY_SERVICE);\n    return telephonyManager.getDeviceId();\n}\n\n//2\npublic String getDeviceUniqueID(Activity activity){\n    String device_unique_id \u003d android.provider.Settings.Secure.getString(activity.getContentResolver(),\n    android.provider.Settings.Secure.ANDROID_ID);\n    return device_unique_id;\n}\n\n//3\npublic String getIMEI(Context context){\n    android.telephony.TelephonyManager mngr \u003d (android.telephony.TelephonyManager) context.getSystemService(context.TELEPHONY_SERVICE); \n    String imei \u003d mngr.getDeviceId();\n    return imei;\n}\n\n//Need Permission READ_PHONE_STATE\n"},{"name":"Auto Generate Id","code":"\n//code by PlaySketch StudiO Inc\n\n//Generate ID\nprivate static final java.util.concurrent.atomic.AtomicInteger sNextGeneratedId \u003d new java.util.concurrent.atomic.AtomicInteger(1);\npublic static int generateViewId() {\n    for (;;) {\n        final int result \u003d sNextGeneratedId.get();\n        // aapt-generated IDs have the high byte nonzero; clamp to the range under that.\n        int newValue \u003d result + 1;\n        if (newValue \u003e 0x00FFFFFF) newValue \u003d 1; // Roll over to 1, not 0.\n        if (sNextGeneratedId.compareAndSet(result, newValue)) {\n            return result;\n        }\n    }\n}\n\n//use\nif (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\tmyView.setId(Utils.generateViewId());\n} else {\n\tmyView.setId(View.generateViewId());\n}\n"},{"name":"Clear Chache","code":"\n//code by PlaySketch StudiO Inc\n\n}\npublic static void deleteCache(Context context) {\n    try {\n        java.io.File dir \u003d context.getCacheDir();\n        deleteDir(dir);\n    } catch (Exception e) {\n       e.printStackTrace();\n       showMessage(e.toString());\n    }\n}\n\npublic static boolean deleteDir(java.io.File dir) {\n    if (dir !\u003d null \u0026\u0026 dir.isDirectory()) {\n        String[] children \u003d dir.list();\n        for (int i \u003d 0; i \u003c children.length; i++) {\n            boolean success \u003d deleteDir(new java.io.File(dir, children[i]));\n            if (!success) {\n                return false;\n            }\n        }\n        return dir.delete();\n    } else if(dir!\u003d null \u0026\u0026 dir.isFile()) {\n        return dir.delete();\n    } else {\n        return false;\n    }\n}\npublic void gabriel() {\n"},{"name":"Screen Brightness ","code":"\n//code by PlaySketch StudiO Inc\n\nWindowManager.LayoutParams layout \u003d getWindow().getAttributes();\nlayout.screenBrightness \u003d 0.5F ; getWindow().setAttributes(layout);\n\n// 0.5 is %50\n// 1 is %100\n"},{"name":"Listview Divider Color","code":"\n//code by PlaySketch StudiO Inc\n\nandroid.graphics.drawable.ColorDrawable sage \u003d new android.graphics.drawable.ColorDrawable(Color.RED);\nlistview1.setDivider(sage);\nlistview1.setDividerHeight(1);\n"},{"name":"ListView Footer","code":"\n//code by PlaySketch StudiO Inc\n\nLayoutInflater inflater \u003d getLayoutInflater();\nViewGroup footer \u003d (ViewGroup)inflater.inflate(R.layout.footer,listview1,false);\nlistview1.addFooterView(footer,null,false);\n//code by PlaySketch StudiO Inc\n//Add Before\n//listview1.setAdapter(arrayAdapter);\n//Set On ListView Custome\n"},{"name":"ListView Header","code":"\n//code by PlaySketch StudiO Inc\n\nLayoutInflater inflater \u003d getLayoutInflater();\nViewGroup header \u003d (ViewGroup)inflater.inflate(R.layout.head,listview1,false);\nlistview1.addHeaderView(header);\n\n//Add Before\n//listview1.setAdapter(arrayAdapter);\n//Set On ListView Custome\n"},{"name":"ListView Shadow","code":"\n//code by PlaySketch StudiO Inc\n\ntv.setShadowLayer(1.5f,-2,2,Color.GRAY);\n\n//Set On ListView Custome\n"},{"name":"Rating Bar","code":"\n//code by PlaySketch StudiO Inc\n\nRatingBar tp \u003d new RatingBar(this);\nlinear1.addView(tp);\n"},{"name":"SearchView","code":"\n//code by PlaySketch StudiO Inc\n\nlistview1.setTextFilterEnabled (true);\n}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) { SearchView mSearchView \u003d new SearchView(getActionBar().getThemedContext());\nmSearchView.setQueryHint(\"Search Here\");\nmSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){\n\t@Override\n\tpublic boolean onQueryTextSubmit(String query)\n\t{\n\t\t// TODO: Implement this method\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean onQueryTextChange(String newText)\n\t{\n\t\t// TODO: Implement this method\n\t\tif (TextUtils.isEmpty(newText)) {\n            listview1.clearTextFilter();\n        } else {\n            listview1.setFilterText(newText);\n        }\n        return true;\n\t}\n});\n\tmenu.add(\"Search\")\n\t.setIcon(R.drawable.ic_search_white)\n\t.setActionView(mSearchView)\n\t.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW); \n//code by PlaySketch StudiO Inc\nreturn true;\n"},{"name":"VideoView","code":"\n//code by PlaySketch StudiO Inc\n\n// add a Button button1 and a LinearLayout linear2.\n// Create a String List list, and a String variable str.\n// Add a FilePicker component fp with mime type video/\n// Create a more block extra.\n// In the more block extra.\n}\nVideoView vidview;\nMediaController mediaControls;\n{\n\n// In onCreate event,\n\nvidview \u003d new VideoView(this);\nvidview.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\nlinear2.addView(vidview);\n\nmediaControls \u003d new MediaController(this); mediaControls.setAnchorView(vidview); vidview.setMediaController(mediaControls);\nvidview.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\n@Override\npublic void onCompletion(MediaPlayer mp) {\n}});\n\nvidview.setOnErrorListener(new MediaPlayer.OnErrorListener() {\n@Override\npublic boolean onError(MediaPlayer mp, int what, int extra) {\nshowMessage(\"Oops An Error Occured While Playing Video!!\");\nreturn false;\n}});\n//code by PlaySketch StudiO Inc\n// In button1 onClick event use the block FilePicker pick files.\n// In the event FilePicker onFilesPicked.\n// set String str to get at 0 of List String filePath\n// and add\nvidview.setVideoURI(Uri.parse(str));\nvidview.start();\n//code by PlaySketch StudiO Inc\n\n// or set OnPreparedListener event on VideoView, and play the video when it is ready to play.\nvidview.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n@Override\npublic void onPrepared(MediaPlayer mp) {\nvidview.start();\n}});"},{"name":"WebView Download ","code":"\n//code by PlaySketch StudiO Inc\n//With Permission\nwebview1.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\nDownloadManager.Request request \u003d new DownloadManager.Request(Uri.parse(url));\nString cookies \u003d CookieManager.getInstance().getCookie(url);\nrequest.addRequestHeader(\"cookie\", cookies);\nrequest.addRequestHeader(\"User-Agent\", userAgent);\nrequest.setDescription(\"Downloading file...\");\nrequest.setTitle(URLUtil.guessFileName(url, contentDisposition, mimetype));\nrequest.allowScanningByMediaScanner(); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED); request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, URLUtil.guessFileName(url, contentDisposition, mimetype));\n\nDownloadManager manager \u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nmanager.enqueue(request);\nshowMessage(\"Downloading File....\");\n//Notif if success\nBroadcastReceiver onComplete \u003d new BroadcastReceiver() {\npublic void onReceive(Context ctxt, Intent intent) {\nshowMessage(\"Download Complete!\");\nunregisterReceiver(this);\n}};\nregisterReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n}\n});\n\nAdd permission:\n\u003cuses-permission android:name\u003d\"android.permission.WRITE_EXTERNAL_STORAGE\" /\u003e\n//code by PlaySketch StudiO Inc\n//No Permission\n\nwebview1.setDownloadListener(new DownloadListener() {\n\tpublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\n\t\tIntent i \u003d new Intent(Intent.ACTION_VIEW);\n\t\ti.setData(Uri.parse(url));\n\t\tstartActivity(i);\n\t}\n});\n"},{"name":"WebView Certificate ","code":"\n//code by PlaySketch StudiO Inc\n\ntextview1.setText(webview1.getCertificate().toString());\n"},{"name":"WebView fab iCon","code":"\n//code by PlaySketch StudiO Inc\n\nimageview1.setImageBitmap(webview1.getFavicon());\n"},{"name":"WebView Html","code":"\n//code by PlaySketch StudiO Inc\n\nWebSettings webSettings \u003d webview1.getSettings(); \nwebSettings.setJavaScriptEnabled(true); \nwebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\nif (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.JELLY_BEAN) {\nwebSettings.setAllowFileAccessFromFileURLs(true); \nwebSettings.setAllowUniversalAccessFromFileURLs(true);\n}\n"},{"name":"WebView Password Save","code":"\n//code by PlaySketch StudiO Inc\n\n webview.getSettings().setSavePassword(true);\n"},{"name":"WebView Speed","code":"\n//code by PlaySketch StudiO Inc\nwebview1.getSettings().setAppCacheMaxSize(5*1024*1024); \nwebview1.getSettings().setAppCachePath(getApplicationContext().getCacheDir().getAbsolutePath()); \nwebview1.getSettings().setAllowFileAccess(true);\nwebview1.getSettings().setAppCacheEnabled(true);\nwebview1.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\nwebview1.getSettings().setLoadWithOverviewMode(true);\nwebview1.getSettings().setUseWideViewPort(true);\nwebview1.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);\nwebview1.getSettings().setDomStorageEnabled(true);\nwebview1.getSettings().setSaveFormData(true);\n"},{"name":"WebView Upload","code":"\n//code by PlaySketch StudiO Inc\n\nwebview1.setWebChromeClient(new WebChromeClient() {\n@Override\npublic boolean onShowFileChooser(WebView webView, ValueCallback filePathCallback, FileChooserParams fileChooserParams) {\n\nmFilePathCallback \u003d filePathCallback; \nIntent intent \u003d new Intent(Intent.ACTION_GET_CONTENT); \nintent.setType(\"*/*\"); \nstartActivityForResult(intent, PICKFILE_REQUEST_CODE); return true;\n}\n});\n\n//add Bkock webview loadUrl\n//code by PlaySketch StudiO Inc\n}\nprivate ValueCallback \u003cUri[]\u003e mFilePathCallback;\nprivate static final int PICKFILE_REQUEST_CODE \u003d 0; \n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent intent) {\nif (requestCode \u003d\u003d PICKFILE_REQUEST_CODE) {\nUri result \u003d intent \u003d\u003d null || resultCode !\u003d RESULT_OK ? null : intent.getData();\nUri[] resultsArray \u003d new Uri[1]; \nresultsArray[0] \u003d result; \nmFilePathCallback.onReceiveValue(resultsArray);\n}"},{"name":"WebView Touch Copy","code":"\n//code by PlaySketch StudiO Inc\n\nwebview1.setOnTouchListener(new View.OnTouchListener() {\nBoolean tF;\n@Override public boolean onTouch(View v, MotionEvent event) {\nshowMessage(\"Aan\");\ntF \u003d true;\nswitch (event.getAction()) {\ncase MotionEvent.ACTION_DOWN: tF \u003d false;\nshowMessage(\"0\");\n}\nreturn tF;\n}\n});"},{"name":"WebView Swipe Refresh ","code":"\n//code by PlaySketch StudiO Inc\n\nfinal android.support.v4.widget.SwipeRefreshLayout sr \u003d new android.support.v4.widget.SwipeRefreshLayout(this);\nsr.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));\nlinear1.addView(sr);\nfinal WebView wb \u003d new WebView(this);\nwb.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));\nwb.getSettings().setJavaScriptEnabled(true);\nsr.addView(wb);\nwb.setWebViewClient(new WebViewClient() { public void onPageFinished(WebView view, String url) { sr.setRefreshing(false);\n}}); \nwb.loadUrl(\"http://sketchware.io\");\nsr.setOnRefreshListener( new android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener() { @Override public void onRefresh() { wb.reload(); } } );\n\n// add firebase and widget anyting from firebase\n//code by PlaySketch StudiO Inc\n//Or you can use this mode edited\n//code by PlaySketch StudiO Inc\nfinal android.support.v4.widget.SwipeRefreshLayout sr \u003d new android.support.v4.widget.SwipeRefreshLayout(this);\nsr.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));\nlinear1.addView(sr);\nfinal WebView wb \u003d (WebView)findViewById(R.id.webview1);\nwb.getSettings().setJavaScriptEnabled(true);\nlinear1.removeView(wb);\nlinear1.post(new Runnable() { @Override public void run() { sr.addView(wb); } });\nwb.setWebViewClient(new WebViewClient() { public void onPageFinished(WebView view, String url) { sr.setRefreshing(false);\n}});\nwb.loadUrl(\"http://www.google.com\");\nsr.setOnRefreshListener( new android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener() { @Override public void onRefresh() { wb.reload(); } } );\n"},{"name":"WebView Find","code":"\n//code by PlaySketch StudiO Inc\n\nedittext1.setSingleLine(true); \nedittext1.setOnKeyListener(new OnKeyListener() {\n\npublic boolean onKey(View v, int keyCode, KeyEvent event) {\nif ((event.getAction() \u003d\u003d KeyEvent.ACTION_DOWN) \u0026\u0026 ((keyCode \u003d\u003d KeyEvent.KEYCODE_ENTER))) {\n\nwebview1.findAll(edittext1.getText().toString());\ntry {\nfor (java.lang.reflect.Method m : WebView.class.getDeclaredMethods()) {\nif (m.getName().equals(\"setFindIsUp\")) {\nm.setAccessible(true);\nm.invoke(webview1, true);\nbreak;\n}\n}\n} catch (Exception ignored) {\n} finally {\nandroid.view.inputmethod.InputMethodManager inputManager \u003d (android.view.inputmethod.InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\nView vv \u003d getCurrentFocus();\nif (vv !\u003d null) {\ninputManager.hideSoftInputFromWindow(v.getWindowToken(), android.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS);\n}\n}\n}\nreturn false;\n}\n});\n\n//Add Button For Next Add this on button Listener\nwebview1.findNext(true);\n\n//Add Button Close Search add this again\nwebview1.clearMatches();\n"},{"name":"WebView Progress","code":"\n//code by PlaySketch StudiO Inc\nfinal android.widget.ProgressBar prog \u003d new android.widget.ProgressBar(this,null, android.R.attr.progressBarStyleHorizontal);\nprog.setPadding(0,0,0,0);\nprog.setIndeterminate(false);\nprog.setFitsSystemWindows(true);\nprog.setProgress(0);\nprog.setScrollBarStyle(android.widget.ProgressBar.SCROLLBARS_OUTSIDE_INSET);\nprog.setMax(100);\nViewGroup.LayoutParams vlp \u003d new ViewGroup.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);\nprog.setLayoutParams(vlp);\npl.addView(prog);\nwebview1.setWebChromeClient(new WebChromeClient() {\n@Override public void onProgressChanged(WebView view, int newProgress) {\nprog.setProgress(newProgress);\n}\n});"},{"name":"WebView Form Data","code":"\n//code by PlaySketch StudiO Inc\n\nwebview.getSettings().setSaveFormData(true);\n"},{"name":"WebView Download Apk","code":"\n//code by PlaySketch StudiO Inc\n\nString destination \u003d Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + \"/\";\nString fileName \u003d \"AppName.apk\";\ndestination +\u003d fileName;\nfinal Uri uri \u003d Uri.parse(\"file://\" + destination);\njava.io.File file \u003d new java.io.File(destination);\nif (file.exists()) file.delete();\nString url \u003d \"URL Apk..\";\nDownloadManager.Request request \u003d new DownloadManager.Request(Uri.parse(url));\nrequest.setDescription(\"Updating..\");\nrequest.setTitle(\"Download\");\nrequest.setDestinationUri(uri);\nfinal DownloadManager manager \u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nfinal long downloadId \u003d manager.enqueue(request);\n\nBroadcastReceiver onComplete \u003d new BroadcastReceiver() {\npublic void onReceive(Context ctxt, Intent intent) {\nIntent install \u003d new Intent(Intent.ACTION_VIEW); \ninstall.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); \ninstall.setDataAndType(uri, manager.getMimeTypeForDownloadedFile(downloadId)); \nstartActivity(install);\nunregisterReceiver(this);\nfinish();\n}};\nregisterReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n//code by PlaySketch StudiO Inc\n//Or Using Intent Only\n\nIntent intent \u003d new Intent(Intent.ACTION_VIEW);\nintent.setDataAndType(Uri.fromFile(new java.io.File(Environment.getExternalStorageDirectory() + \"/download/\" + \"app.apk\")), \"application/vnd.android.package-archive\");\nintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\nstartActivity(intent);\n//code by PlaySketch StudiO Inc\n//Use permission\n\u003cuses-permission android:name\u003d\"android.permission.WRITE_EXTERNAL_STORAGE\" /\u003e"},{"name":"SnackBar Animation ","code":"\n//code by PlaySketch StudiO Inc\n\n//OnCreate\nin.setTarget(linear3);\nin.setPropertyName(\"translationY\");\nin.setFloatValues((float)(getDip((int)(-50))));\nin.setDuration((int)(500));\nin.setInterpolator(new LinearInterpolator());\nin.start();\n\n//OnStart\n\ntimer \u003d new TimerTask() {\n@Override\npublic void run() {\nrunOnUiThread(new Runnable() {\n@Override\npublic void run() {\nout.setTarget(linear3); \nout.setPropertyName(\"translationY\"); \nout.setFloatValues((float)(getDip((int)(50)))); \nout.setDuration((int)(500)); \nout.setInterpolator(new LinearInterpolator()); \nout.start();\n}\n});\n}\n};\n_timer.schedule(timer, (int)(4000));\n\nComponents:\n1. Object Animator (in+out)\n2. Timer\n\nXml:\n1. Vertical_layout\n2. Inside the (Layout) add Linear1\n3. Add Layout for Snackbar\nIt should be hidden\nSnackbar_Layout_Width\u003d\"50dp\"\nLinear1 Match Parent"},{"name":"SnackBar Custom","code":"\n//code by PlaySketch StudiO Inc\n\nLayoutInflater i \u003d getLayoutInflater();\nView inflate \u003d getLayoutInflater().inflate(R.layout.linear1, null); //on custom view add linear1\nToast t \u003d Toast.makeText(getApplicationContext(),\"\",Toast.LENGTH_SHORT);\nt.setView(inflate);\nt.setGravity(Gravity.BOTTOM |Gravity.FILL_HORIZONTAL,0,0);\nt.show();\nfinal TextView textview2 \u003d (TextView)inflate.findViewById(R.id.textview2); if you click textview2\ntextview2.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) {\nshowMessage(\"You click the dismiss\");\n}\n});\n\n//make custom view with linear1\n//add textview1 and 2\n//code by PlaySketch StudiO Inc\n//to cancel\nToast t \u003d Toast.makeText(getApplicationContext(),\"\",Toast.LENGTH_SHORT);\nt.cancel();"},{"name":"Spinner Hide items ","code":"\n//code by PlaySketch StudiO Inc\n\nfinal ArrayAdapter\u003cString\u003e spinnerArrayAdapter \u003d new ArrayAdapter\u003cString\u003e(getBaseContext(),android.R.layout.simple_spinner_dropdown_item,List){\n            @Override\n            public View getDropDownView(int position, View convertView,\n                                        ViewGroup parent) {\n                View view \u003d super.getDropDownView(position, convertView, parent);\n                TextView tv \u003d (TextView) view;\n                if(position \u003d\u003d 1){\n                    // Hide the second item from Spinner\n                    tv.setVisibility(View.GONE);\n                }\n                else {\n                    tv.setVisibility(View.VISIBLE);\n                }\n                return view;\n            }\n        };\n        spinnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        spinner1.setAdapter(spinnerArrayAdapter);\n"},{"name":"Spinner text Color","code":"\n//code by PlaySketch StudiO Inc\n\n ((TextView) spinner1.getChildAt(0)).setTextColor(Color.WHITE);\n"},{"name":"Line For EditText","code":"\n//code by PlaySketch StudiO Inc\n\nprivate boolean LineAble \u003d false;\nprivate double count \u003d 0;\nprivate double line \u003d 0;\n\nedittext1.addTextChangedListener(new TextWatcher() {\n\t@Override\n\tpublic void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\n\t\tfinal String _charSeq \u003d _param1.toString();\n\t\ttextview1.setText(\"1\");\n\t\tif (LineAble) {\n\t\t\tcount \u003d edittext1.getLineCount() - 1;\n\t\t\tline \u003d 1;\n\t\t\tfor(int _repeat32 \u003d 0; _repeat32 \u003c (int)(count); _repeat32++) {\n\t\t\t\t_addLine();\n\t\t\t}\n\t\t}\n\t}\n\t\t\t\n\t@Override\n\tpublic void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\n\t\t\n\t}\n\t\t\t\n\t@Override\n\tpublic void afterTextChanged(Editable _param1) {\n\t\t\n\t}\n});\n\nprivate void _addLine () {\n\ttextview1.setText(textview1.getText().toString().concat(\"\n\".concat(String.valueOf((long)(line + 1)))));\n\tline++;\n}\n\n//Additional add with timer 400\nandroid.view.inputmethod.BaseInputConnection inputConnection \u003d new android.view.inputmethod.BaseInputConnection(edittext1, true); inputConnection.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_SPACE));\n//this will auto show line with new file opened!. like on SKMigrator editor."},{"name":"GridView","code":"\n//code by PlaySketch StudiO Inc\n//Sample 1\n//code by PlaySketch StudiO Inc\nGridView grid \u003d new GridView(this);\ngrid.setLayoutParams(new GridView.LayoutParams(GridLayout.LayoutParams.MATCH_PARENT, GridLayout.LayoutParams.WRAP_CONTENT));\ngrid.setBackgroundColor(Color.WHITE);\ngrid.setNumColumns(3);\ngrid.setColumnWidth(GridView.AUTO_FIT);\ngrid.setVerticalSpacing(5);\ngrid.setHorizontalSpacing(5);\ngrid.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);\ngrid.setAdapter(new Listview1Adapter(listmap));\nlinear1.addView(grid);\ngrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n@Override\npublic void onItemClick(AdapterView parent, View view, int position, long id) {\nshowMessage(Integer.toString(position));\n}});\n\n//Sample 2\n//code by PlaySketch StudiO Inc\nGridView grid \u003d new GridView(this); grid.setLayoutParams(new GridView.LayoutParams(GridLayout.LayoutParams.MATCH_PARENT, GridLayout.LayoutParams.WRAP_CONTENT));\n\ngrid.setBackgroundColor(Color.RED); grid.setNumColumns(3);\n\ngrid.setColumnWidth(GridView.AUTO_FIT);\n\ngrid.setVerticalSpacing(5); grid.setHorizontalSpacing(5); grid.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);\n\nArrayAdapter adapter \u003d new ArrayAdapter\u003cString\u003e(this, android.R.layout.simple_list_item_1, list);\n//first create a new String list string1 and add items to it. and create linear1\ngrid.setAdapter(adapter);\nlinear1.addView(grid);\ngrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n@Override\npublic void onItemClick( AdapterView \u003c?\u003e _parent, View _view, int _position, long _id) {\nswitch (_position){\ncase 0:\nshowMessage(\"Poss 0 clicked\");\nbreak;\ncase 1:\nshowMessage(\"Poss 1 clicked\");\nbreak;\ncase 2:\nshowMessage(\"Poss 2 clicked\");\nbreak;\ncase 3:\nshowMessage(\"Poss 3 clicked\");\nbreak;\n}\n}\n});\n\n/*\nIf you only want to Toast the text of the item clicked, the onItemClickListener will look as given below.\n\ngrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n@Override\npublic void onItemClick(AdapterView \u003c?\u003e _parent, View _view, int _position, long _id) {\nString selectedItem \u003d _parent.getItemAtPosition(_position).toString();\nToast.makeText(MainActivity.this, selectedItem,Toast.LENGTH_SHORT).show();\n}});\n*/"},{"name":"GridView Custome","code":"\n//code by PlaySketch StudiO Inc\n\n\n//Add OnCreate\n{\nHashMap\u003cString, Object\u003e _item \u003d new HashMap\u003c\u003e();\n_item.put(\"name\", \"google\");\nlistmap.add(_item);\n}\n\n{\nHashMap\u003cString, Object\u003e _item \u003d new HashMap\u003c\u003e();\n_item.put(\"name\", \"facebook\");\nlistmap.add(_item);\n}\n\n{\nHashMap\u003cString, Object\u003e _item \u003d new HashMap\u003c\u003e();\n_item.put(\"name\", \"youtube\");\nlistmap.add(_item);\n}\n\nGridView grid \u003d new GridView(this);\ngrid.setLayoutParams(new GridView.LayoutParams(GridLayout.LayoutParams.MATCH_PARENT, GridLayout.LayoutParams.WRAP_CONTENT));\ngrid.setBackgroundColor(Color.WHITE);\ngrid.setNumColumns(3);\ngrid.setColumnWidth(GridView.AUTO_FIT);\ngrid.setVerticalSpacing(5);\ngrid.setHorizontalSpacing(5);\ngrid.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);\ngrid.setAdapter(new Listview1Adapter(listmap));\nlinear1.addView(grid);\ngrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n@Override\npublic void onItemClick(AdapterView parent, View view, int position, long id) {\nshowMessage(Integer.toString(position));\n}});\n//code by PlaySketch StudiO Inc\n}\nprivate String name \u003d \"\";\nprivate ArrayList\u003cHashMap\u003cString, Object\u003e\u003e listmap \u003d new ArrayList\u003c\u003e();\npublic class Listview1Adapter extends BaseAdapter {\nArrayList\u003cHashMap\u003cString, Object\u003e\u003e _data;\npublic Listview1Adapter(ArrayList\u003cHashMap\u003cString, Object\u003e\u003e _arr) {\n_data \u003d _arr;\n}\n\n@Override\npublic int getCount() {\nreturn _data.size();\n}\n\n@Override\npublic HashMap\u003cString, Object\u003e getItem(int _i) {\nreturn _data.get(_i);\n}\n\n@Override\npublic long getItemId(int _i) {\nreturn _i;\n}\n\n@Override\npublic View getView(final int _position, View _view, ViewGroup _viewGroup) {\nLayoutInflater _inflater \u003d (LayoutInflater)getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\nView _v \u003d _view;\nif (_v \u003d\u003d null) {\n_v \u003d _inflater.inflate(R.layout.custome, null);\n}\nfinal LinearLayout linear1 \u003d (LinearLayout) _v.findViewById(R.id.linear1);\nfinal ImageView imageview1 \u003d (ImageView) _v.findViewById(R.id.imageview1);\nfinal TextView textview1 \u003d (TextView) _v.findViewById(R.id.textview1);\n\nname \u003d _data.get((int)_position).get(\"name\").toString();\ntextview1.setText(name);\nif (name.equals(\"google\")) {\nimageview1.setImageResource(R.drawable.google);\n}\nreturn _v;\n}\n}\n\npublic void nothing() {\n"},{"name":"Focus","code":"\n//code by PlaySketch StudiO Inc\n\n youranywidget.requestFocus();\n"},{"name":"Fab Animation","code":"\n//code by PlaySketch StudiO Inc\n\nAnimation makeInAnimation \u003d AnimationUtils.makeInAnimation(getBaseContext(), false);\nmakeInAnimation.setAnimationListener(new Animation.AnimationListener() {\n    @Override\n    public void onAnimationEnd(Animation animation) { }\n\n    @Override\n    public void onAnimationRepeat(Animation animation) { }\n\n    @Override\n    public void onAnimationStart(Animation animation) {\n        _fab.setVisibility(View.VISIBLE);\n    }\n});\n\nAnimation makeOutAnimation \u003d AnimationUtils.makeOutAnimation(getBaseContext(), true);\nmakeOutAnimation.setAnimationListener(new Animation.AnimationListener() {\n    @Override\n    public void onAnimationEnd(Animation animation) {\n        _fab.setVisibility(View.INVISIBLE);\n    }\n\n    @Override\n    public void onAnimationRepeat(Animation animation) { }\n\n    @Override\n    public void onAnimationStart(Animation animation) { }\n});\n\n// ...\n\nif (_fab.isShown()) {\n    _fab.startAnimation(makeOutAnimation);\n}\n\n// ...\n\nif (!_fab.isShown()) {\n    _fab.startAnimation(makeInAnimation);\n}\n"},{"name":"Fab Ripple","code":"\n//code by PlaySketch StudiO Inc\n\n_fab.setRippleColor(Color.parseColor(\"#3E2723\"));\n"},{"name":"Fab Elevation ","code":"\n//code by PlaySketch StudiO Inc\n\n_fab.setCompatElevation(0f);\n"},{"name":"Fab Text","code":"\n//code by PlaySketch StudiO Inc\n\n_fab.setImageBitmap(textAsBitmap(\"OK\", 40, Color.WHITE));\n\n//method to convert your text to image\npublic static Bitmap textAsBitmap(String text, float textSize, int textColor) {\n    Paint paint \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n    paint.setTextSize(textSize);\n    paint.setColor(textColor);\n    paint.setTextAlign(Paint.Align.LEFT);\n    float baseline \u003d -paint.ascent(); // ascent() is negative\n    int width \u003d (int) (paint.measureText(text) + 0.0f); // round\n    int height \u003d (int) (baseline + paint.descent() + 0.0f);\n    Bitmap image \u003d Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n\n    Canvas canvas \u003d new Canvas(image);\n    canvas.drawText(text, 0, baseline, paint);\n    return image;\n}"},{"name":"Abs ListView","code":"\n//code by PlaySketch StudiO Inc\nal \u003d new ArrayList\u003c\u003e();\naddItems();\naa \u003d new ArrayAdapter\u003c\u003e(getApplicationContext(), android.R.layout.simple_list_item_1, al);\nlistview1.setAdapter(aa);\nlistview1.setOnScrollListener(new AbsListView.OnScrollListener() {\n\t@Override public void onScrollStateChanged(AbsListView view, int scrollState) {}\n\t@Override\n\tpublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n\t\tToast.makeText(getApplicationContext(),firstVisibleItem+\"---\"+visibleItemCount+\"---\"+totalItemCount, Toast.LENGTH_SHORT).show();\n\t\t// add more items to listview when there are two items remaining at the scroll end.\n\t\tif(firstVisibleItem + visibleItemCount \u003e\u003d totalItemCount-2){\n\t\t\taddItems();\n\t\t\taa.notifyDataSetChanged();\n\t\t}\n\t}\n});\n}\nArrayList\u003cString\u003e al ;\nArrayAdapter\u003cString\u003e aa;\npublic void addItems(){\n\tint size \u003d al.size();\n\tfor(int i\u003dsize;i\u003c(size+10);i++){\n\t\tal.add(\"List item \"+(i+1));\n\t}\n}{\n"},{"name":"Volume Controls ","code":"\n//code by PlaySketch StudiO Inc\n\n//add seekbar set progress to 12\n\naudioManager \u003d (AudioManager) getSystemService(Context.AUDIO_SERVICE); seekbar1.setMax(audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));\n\n}\n\nAudioManager audioManager;\n\nprivate void nothing() {\n\n//OnSeekBar Changed add:\n\ntextview1.setText(\"Music Volume : \" + _progressValue);\n\naudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, _progressValue, 0);"},{"name":"Print","code":"\n//code by PlaySketch StudiO Inc\n\n\njava.lang.System.setOut(new java.io.PrintStream(new java.io.OutputStream() {\njava.io.ByteArrayOutputStream outputStream \u003d new java.io.ByteArrayOutputStream();\n@Override\npublic void write(int oneByte) throws java.io.IOException {\noutputStream.write(oneByte);\ntextview1.setText(new String(outputStream.toByteArray()));\n}\n}));\n//Testing the System.out stream\njava.lang.System.out.println(\"Test\");\njava.lang.System.out.println(\"Test 2\");"},{"name":"Print Mode","code":"\n//code by PlaySketch StudiO Inc\npublic void Function(String _str) {\n\t\ttry {\n\t\t\tClass\u003c?\u003e c \u003d Class.forName(_str);\n\t\t\tSystem.out.println(\"name \u003d \" + c.getName());\n\t\t\tSystem.out.println(\"package \u003d \" + c.getPackage());\n\t\t\tjava.lang.reflect.Method[] methods \u003d c.getDeclaredMethods();\n\t\t\tSystem.out.println(\"----- Class methods ---------------\");\n\t\t\tfor (java.lang.reflect.Method method : methods) {\n\t\t\t\tSystem.out.println(method.getName());\n\t\t\t}\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n"},{"name":"Share Apk","code":"\n//code by PlaySketch StudiO Inc\n\nString apk \u003d \"\";\nString uri \u003d (\"com.my.project\");\n\ntry {\nandroid.content.pm.PackageInfo pi \u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\n\napk \u003d pi.applicationInfo.publicSourceDir;\n} catch (Exception e) {\nshowMessage(e.toString());\n}\nIntent iten \u003d new Intent(Intent.ACTION_SEND);\niten.setType(\"*/*\");\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\n\nstartActivity(Intent.createChooser(iten, \"Send APK\"));\n"},{"name":"Regex Email","code":"\n//code by PlaySketch StudiO Inc\npublic boolean isValid(String email) {\n\tString regex \u003d \"^[\\\\w-_\\\\.+]*[\\\\w-_\\\\.]\\\\@([\\\\w]+\\\\.)+[\\\\w]+[\\\\w]$\";\n\treturn email.matches(regex);\n}\n//code by PlaySketch StudiO Inc\n//Created By Gymkhana Studio From my Project\n"},{"name":"OverFlow Menu","code":"\n//code by PlaySketch StudiO Inc\n//Error Menu three dot not show on Lolipop Fixed Code By Gymkhana Studio\n\ngetOverflowMenu();\n}\nprivate void getOverflowMenu() {\n\ttry {\n\t\tViewConfiguration config \u003d ViewConfiguration.get(this);\n\t\tjava.lang.reflect.Field menuKeyField \u003d ViewConfiguration.class.getDeclaredField(\"sHasPermanentMenuKey\");\n\t\tif(menuKeyField !\u003d null) {\n\t\t\tmenuKeyField.setAccessible(true);\n\t\t\tmenuKeyField.setBoolean(config, false);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}{\n"},{"name":"Error Deprecation","code":"\n//code by PlaySketch StudiO Inc\n\n@SuppressWarnings(\"deprecation\")\n"},{"name":"EnClosing","code":"\n//code by PlaySketch StudiO Inc\n\nMainActivity myActivity \u003d new MainActivity(); MainActivity.parseYouTubeAndYahoo asyncTask \u003d myActivity.new parseYouTubeAndYahoo();\n"},{"name":"Get Package","code":"\n//code by PlaySketch StudiO Inc\npublic class _getPackageName {\n\tprivate String _package \u003d \"\";\n\tpublic String _get() {\n\t\t_getPackageName _o \u003d new _getPackageName();\n\t\tPackage _pack \u003d _o.getClass().getPackage();\n\t\tString _packageName \u003d _pack.getName();\n\t\treturn _package \u003d _packageName;\n\t}\n\tpublic String _getPackage() {\n\t\tif (_package.equals(\"\")) {\n\t\t\t_get();\n\t\t\treturn _package;\n\t\t} else {\n\t\t\treturn _package;\n\t\t}\n\t}\n}"},{"name":"Get App Version","code":"\n//code by PlaySketch StudiO Inc\n\ntry{\n    android.content.pm.PackageInfo pInfo \u003d MainActivity.this.getPackageManager().getPackageInfo(getPackageName(), 0);\n    version \u003d pInfo.versionName;\n} catch (android.content.pm.PackageManager.NameNotFoundException e){\n    e.printStackTrace();\n}\n"},{"name":"File Size","code":"\n//code by PlaySketch StudiO Inc\n\npublic String getFileSizes(long size) {\nif(size \u003c\u003d 0) return \"0\";\nfinal String[] units \u003d new String[] { \"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\" };\nint digitGroups \u003d (int) (Math.log10(size)/Math.log10(1024));\nString result \u003d null;\nresult \u003d new DecimalFormat(\"#,##0.#\").format(size/Math.pow(1024, digitGroups)) + \" \" + units[digitGroups];\nreturn result;\n}\n"},{"name":"keyboard Show","code":"\n//code by PlaySketch StudiO Inc\n\nandroid.view.inputmethod.InputMethodManager imm \u003d (android.view.inputmethod.InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); imm.showSoftInput(edittext1, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);\n"},{"name":"Keyboard hide","code":"\n//code by PlaySketch StudiO Inc\n\nandroid.view.View view \u003d this.getCurrentFocus();   android.view.inputmethod.InputMethodManager imm \u003d (android.view.inputmethod.InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n"},{"name":"Image Croper","code":"\n//code by PlaySketch StudiO Inc\n\n\nprivate void performCrop(Uri picUri) {\n    try {\n        Intent cropIntent \u003d new Intent(\"com.android.camera.action.CROP\");\n        // indicate image type and Uri\n        cropIntent.setDataAndType(picUri, \"image/*\");\n        // set crop properties here\n        cropIntent.putExtra(\"crop\", true);\n        // indicate aspect of desired crop\n        cropIntent.putExtra(\"aspectX\", 1);\n        cropIntent.putExtra(\"aspectY\", 1);\n        // indicate output X and Y\n        cropIntent.putExtra(\"outputX\", 128);\n        cropIntent.putExtra(\"outputY\", 128);\n        // retrieve data on return\n        cropIntent.putExtra(\"return-data\", true);\n        // start the activity - we handle returning in onActivityResult\n        startActivityForResult(cropIntent, PIC_CROP);\n    }\n    // respond to users whose devices do not support the crop action\n    catch (ActivityNotFoundException anfe) {\n        // display an error message\n        String errorMessage \u003d \"Whoops - your device doesn\u0027t support the crop action!\";\n        Toast toast \u003d Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT);\n        toast.show();\n    }\n}\n\nfinal int PIC_CROP \u003d 1;\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n\n    if (requestCode \u003d\u003d PIC_CROP) {\n        if (data !\u003d null) {\n            // get the returned data\n            Bundle extras \u003d data.getExtras();\n            // get the cropped bitmap\n            Bitmap selectedBitmap \u003d extras.getParcelable(\"data\");\n\n            imageview1.setImageBitmap(selectedBitmap);\n        }\n    }\n}\n"},{"name":"Read Asset Files","code":"StringBuilder text \u003d new StringBuilder();\ntry {\njava.io.BufferedReader br \u003d new java.io.BufferedReader(new java.io.InputStreamReader(getAssets().open(\"json.txt\"))); \nString line;\nwhile ((line \u003d br.readLine()) !\u003d null) {text.append(line);\ntext.append(\u0027n\u0027);\n}\nbr.close();\n}\ncatch (java.io.IOException e) {\n}\n\ntexts \u003d text.toString();"},{"name":"Hide ActionBar","code":"//Normal ActionBar :\n\ngetActionBar().hide();\n\n//Support ActionBar\n\ngetSupportActionBar().hide();"},{"name":"ActionBar Shadow","code":"//Normal ActionBar :\n\ngetActionBar().setElevation(0);\n\n//Support ActionBar :\n\ngetSupportActionBar().setElevation(0);"},{"name":"Text Blink","code":"Animation anim \u003dnew AlphaAnimation(0.0f,1.0f); \nanim.setDuration(50);\nanim.setStartOffset(20);\nanim.setRepeatMode(Animation.REVERSE);\nanim.setRepeatCount(Animation.INFINITE);\ntextview.startAnimation(anim);"},{"name":"Zip Content ","code":"final ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();\nfinal String _src \u003d\"/storage/emulated/0/a.zip\";\n\n\t\ttry {\n\t\t\tjava.util.zip.ZipFile zipFile \u003d new java.util.zip.ZipFile(_src);\n\t\t\tjava.util.Enumeration\u003c?\u003e enu \u003d zipFile.entries();\n\t\t\twhile (enu.hasMoreElements()) {\n\t\t\t\tjava.util.zip.ZipEntry zipEntry \u003d (java.util.zip.ZipEntry) enu.nextElement();\n\t\t\t\tString name \u003d zipEntry.getName();\n\t\t\t\tlong size \u003d zipEntry.getSize();\n\t\t\t\tlong compressedSize \u003d zipEntry.getCompressedSize();\ncontent.add(\"File Name : \"+- name+-\"+AFw-n\"+-\"File Size : \"+-android.text.format.Formatter.formatFileSize(this, size)+-\"+AFw-n\"+-\"Compressed Size : \"+-android.text.format.Formatter.formatFileSize(this, compressedSize));\n\t}\n      } catch (java.io.IOException e) {\n}\n\nfinal ListView lv1 \u003d new ListView(this);\nlv1.setAdapter(new ArrayAdapter\u003cString\u003e(getBaseContext(), android.R.layout.simple_list_item_1, content));\nlv1.setDividerHeight(2);\nfinal AlertDialog dialog \u003d new AlertDialog.Builder(MainActivity.this).create();\ndialog.setView(lv1);\ndialog.show();"},{"name":"Avl Loading ","code":"//Create :\r\nAVLoadingIndicatorView v \u003d new AVLoadingIndicatorView(this);\r\nLinearLayout.LayoutParams lp \u003d new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\r\nv.setLayoutParams(lp);\r\nlinear1.addView(v);\r\n\r\n//Indicator Color :\r\nv.setIndicatorColor(Color.parseColor(\"FF0000\"));\r\n\r\n//Set Indicator :\r\nv.setIndicatorName(String);\r\n\r\n//Indicators :\r\n\r\n1.TriangleSkew\r\n2.Square\r\n3.SemiCircle\r\n4.BallPulse\r\n5.BallPulseRise\r\n6.BallGridPulse\r\n7.BallGridBeat\r\n8.BallClipRotatePulse\r\n9.BallClipRotateMultiple\r\n10.BallClipRotate\r\n11.BallBeat\r\n12.BallRotate\r\n13.BallScale\r\n14.BallScaleMultiple\r\n15.BallScaleRipple\r\n16.BallScaleRippleMultiple\r\n17.BallSpinFadeLoader\r\n18.BallTrianglePath\r\n19.BallZigZagDeflect\r\n20.BallZigZag\r\n21.CubeTransition\r\n22.LineScale\r\n23.LineScaleParty\r\n24.LineScalePulseOut\r\n25.LineScalePulseOutRapid\r\n26.LineSpinFadeLoader\r\n27.Pacman\r\n28.JavaLibrary\r\n\r\n//Add Class :\r\n\r\npublic static class AVLoadingIndicatorView extends View {\r\n    private static final String TAG\u003d\"AVLoadingIndicatorView\";\r\n    private static final BallPulseIndicator DEFAULT_INDICATOR\u003dnew BallPulseIndicator();\r\n    private static final int MIN_SHOW_TIME \u003d 500; \r\n    private static final int MIN_DELAY \u003d 500;\r\n    private long mStartTime \u003d -1;\r\n    private boolean mPostedHide \u003d false;\r\n    private boolean mPostedShow \u003d false;\r\n    private boolean mDismissed \u003d false;\r\n    private final Runnable mDelayedHide \u003d new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            mPostedHide \u003d false;\r\n            mStartTime \u003d -1;\r\n            setVisibility(View.GONE);\r\n        }\r\n    };\r\n    private final Runnable mDelayedShow \u003d new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            mPostedShow \u003d false;\r\n            if (!mDismissed) {\r\n                mStartTime \u003d System.currentTimeMillis();\r\n                setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    };\r\n    int mMinWidth;\r\n    int mMaxWidth;\r\n    int mMinHeight;\r\n    int mMaxHeight;\r\n    private Indicator mIndicator;\r\n    private int mIndicatorColor;\r\n    private boolean mShouldStartAnimationDrawable;\r\n    public AVLoadingIndicatorView(Context context) {\r\n        super(context);\r\n        init(context, null,0,0);\r\n    }\r\n    public AVLoadingIndicatorView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(context, attrs,0,0);\r\n    }\r\n    public AVLoadingIndicatorView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(context, attrs,defStyleAttr,0);\r\n    }\r\n    public AVLoadingIndicatorView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n        init(context,attrs,defStyleAttr,0);\r\n    }\r\n    private void init(Context context,AttributeSet attrs,int defStyleAttr, int defStyleRes) {\r\n        mMinWidth \u003d 24;\r\n        mMaxWidth \u003d 48;\r\n        mMinHeight \u003d 24;\r\n        mMaxHeight \u003d 48;\r\n        mMinWidth \u003d mMinWidth;\r\n        mMaxWidth \u003d mMaxWidth;\r\n        mMinHeight \u003d mMinHeight;\r\n        mMaxHeight \u003d mMaxHeight; \r\n        String indicatorName\u003d\"\";\r\n        mIndicatorColor\u003dColor.WHITE;\r\n        setIndicator(indicatorName);\r\n        if (mIndicator\u003d\u003dnull){\r\n            setIndicator(DEFAULT_INDICATOR);\r\n        }     \r\n    }\r\n    public Indicator getIndicator() {\r\n        return mIndicator;\r\n    }\r\n    public void setIndicator(Indicator d) {\r\n        if (mIndicator !\u003d d) {\r\n            if (mIndicator !\u003d null) {\r\n                mIndicator.setCallback(null);\r\n                unscheduleDrawable(mIndicator);\r\n            }\r\n            mIndicator \u003d d;\r\n            setIndicatorColor(mIndicatorColor);\r\n            if (d !\u003d null) {\r\n                d.setCallback(this);\r\n            }\r\n            postInvalidate();\r\n        }\r\n    }\r\n    public void setIndicatorColor(int color){\r\n        this.mIndicatorColor\u003dcolor;\r\n        mIndicator.setColor(color);\r\n    }\r\n    public void setIndicatorName(String indi) {\r\n    \tif (indi.contains(\"TriangleSkew\")) {\r\n    \t\tTriangleSkewSpinIndicator indic \u003d new TriangleSkewSpinIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else  if (indi.contains(\"Square\")) {\r\n    \t\tSquareSpinIndicator indic \u003d new SquareSpinIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"SemiCircle\")) {\r\n    \t\tSemiCircleSpinIndicator indic \u003d new SemiCircleSpinIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallPulse\")) {\r\n    \t\tBallPulseSyncIndicator indic \u003d new BallPulseSyncIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallPulseRise\")) {\r\n    \t\tBallPulseRiseIndicator indic \u003d new BallPulseRiseIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallGridPulse\")) {\r\n    \t\tBallGridPulseIndicator indic \u003d new BallGridPulseIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallGridBeat\")) {\r\n    \t\tBallGridBeatIndicator indic \u003d new BallGridBeatIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallClipRotatePulse\")) {\r\n    \t\tBallClipRotatePulseIndicator indic \u003d new BallClipRotatePulseIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallClipRotateMultiple\")) {\r\n    \t\tBallClipRotateMultipleIndicator indic \u003d new BallClipRotateMultipleIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallClipRotate\")) {\r\n    \t\tBallClipRotateIndicator indic \u003d new BallClipRotateIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallBeat\")) {\r\n    \t\tBallBeatIndicator indic \u003d new BallBeatIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallRotate\")) {\r\n    \t\tBallRotateIndicator indic \u003d new BallRotateIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallScale\")) {\r\n    \t\tBallScaleIndicator indic \u003d new BallScaleIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallScaleMultiple\")) {\r\n    \t\tBallScaleMultipleIndicator indic \u003d new BallScaleMultipleIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallScaleRipple\")) {\r\n    \t\tBallScaleRippleIndicator indic \u003d new BallScaleRippleIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallScaleRippleMultiple\")) {\r\n    \t\tBallScaleRippleMultipleIndicator indic \u003d new BallScaleRippleMultipleIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallSpinFadeLoader\")) {\r\n    \t\tBallSpinFadeLoaderIndicator indic \u003d new BallSpinFadeLoaderIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallTrianglePath\")) {\r\n    \t\tBallTrianglePathIndicator indic \u003d new BallTrianglePathIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallZigZagDeflect\")) {\r\n    \t\tBallZigZagDeflectIndicator indic \u003d new BallZigZagDeflectIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"BallZigZag\")) {\r\n    \t\tBallZigZagIndicator indic \u003d new BallZigZagIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"CubeTransition\")) {\r\n    \t\tCubeTransitionIndicator indic \u003d new CubeTransitionIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"LineScale\")) {\r\n    \t\tLineScaleIndicator indic \u003d new LineScaleIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"LineScaleParty\")) {\r\n    \t\tLineScalePartyIndicator indic \u003d new LineScalePartyIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"LineScalePulseOut\")) {\r\n    \t\tLineScalePulseOutIndicator indic \u003d new LineScalePulseOutIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"LineScalePulseOutRapid\")) {\r\n    \t\tLineScalePulseOutRapidIndicator indic \u003d new LineScalePulseOutRapidIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"LineSpinFadeLoader\")) {\r\n    \t\tLineSpinFadeLoaderIndicator indic \u003d new LineSpinFadeLoaderIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"Pacman\")) {\r\n    \t\tPacmanIndicator indic \u003d new PacmanIndicator();\r\n    \t\tsetIndicator(indic);\r\n    \t} else if (indi.contains(\"JavaLibrary\")) {\r\n    \t\tJavaLibrary indic \u003d new JavaLibrary();\r\n    \t\tsetIndicator(indic);\r\n    \t}\r\n    }\r\n    public void setIndicator(String indicatorName){\r\n        if (TextUtils.isEmpty(indicatorName)){\r\n            return;\r\n        }\r\n        StringBuilder drawableClassName\u003dnew StringBuilder();\r\n        if (!indicatorName.contains(\".\")){\r\n            String defaultPackageName\u003dgetClass().getPackage().getName();\r\n            drawableClassName.append(defaultPackageName)\r\n                    .append(\".indicators\")\r\n                    .append(\".\");\r\n        }\r\n        drawableClassName.append(indicatorName);\r\n        try {\r\n            Class\u003c?\u003e drawableClass \u003d Class.forName(drawableClassName.toString());\r\n            Indicator indicator \u003d (Indicator) drawableClass.newInstance();\r\n            setIndicator(indicator);\r\n        } catch (ClassNotFoundException e) {\r\n            Log.e(TAG,\"Didn\u0027t find your class , check the name again !\");\r\n        } catch (InstantiationException e) {\r\n            e.printStackTrace();\r\n        } catch (IllegalAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void smoothToShow(){\r\n        startAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_in));\r\n        setVisibility(VISIBLE);\r\n    }\r\n    public void smoothToHide(){\r\n        startAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_out));\r\n        setVisibility(GONE);\r\n    }\r\n    public void hide() {\r\n        mDismissed \u003d true;\r\n        removeCallbacks(mDelayedShow);\r\n        long diff \u003d System.currentTimeMillis() - mStartTime;\r\n        if (diff \u003e\u003d MIN_SHOW_TIME || mStartTime \u003d\u003d -1) {\r\n            setVisibility(View.GONE);\r\n        } else {\r\n            if (!mPostedHide) {\r\n                postDelayed(mDelayedHide, MIN_SHOW_TIME - diff);\r\n                mPostedHide \u003d true;\r\n            }\r\n        }\r\n    }\r\n    public void show() {\r\n        mStartTime \u003d -1;\r\n        mDismissed \u003d false;\r\n        removeCallbacks(mDelayedHide);\r\n        if (!mPostedShow) {\r\n            postDelayed(mDelayedShow, MIN_DELAY);\r\n            mPostedShow \u003d true;\r\n        }\r\n    }\r\n    @Override\r\n    protected boolean verifyDrawable(android.graphics.drawable.Drawable who) {\r\n        return who \u003d\u003d mIndicator\r\n                || super.verifyDrawable(who);\r\n    }\r\n    void startAnimation() {\r\n        if (getVisibility() !\u003d VISIBLE) {\r\n            return;\r\n        }\r\n        if (mIndicator instanceof android.graphics.drawable.Animatable) {\r\n            mShouldStartAnimationDrawable \u003d true;\r\n        }\r\n        postInvalidate();\r\n    }\r\n    void stopAnimation() {\r\n        if (mIndicator instanceof android.graphics.drawable.Animatable) {\r\n            mIndicator.stop();\r\n            mShouldStartAnimationDrawable \u003d false;\r\n        }\r\n        postInvalidate();\r\n    }\r\n    @Override\r\n    public void setVisibility(int v) {\r\n        if (getVisibility() !\u003d v) {\r\n            super.setVisibility(v);\r\n            if (v \u003d\u003d GONE || v \u003d\u003d INVISIBLE) {\r\n                stopAnimation();\r\n            } else {\r\n                startAnimation();\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    protected void onVisibilityChanged(View changedView, int visibility) {\r\n        super.onVisibilityChanged(changedView, visibility);\r\n        if (visibility \u003d\u003d GONE || visibility \u003d\u003d INVISIBLE) {\r\n            stopAnimation();\r\n        } else {\r\n            startAnimation();\r\n        }\r\n    }\r\n    @Override\r\n    public void invalidateDrawable(android.graphics.drawable.Drawable dr) {\r\n        if (verifyDrawable(dr)) {\r\n            final Rect dirty \u003d dr.getBounds();\r\n            final int scrollX \u003d getScrollX() + getPaddingLeft();\r\n            final int scrollY \u003d getScrollY() + getPaddingTop();\r\n            invalidate(dirty.left + scrollX, dirty.top + scrollY,\r\n                    dirty.right + scrollX, dirty.bottom + scrollY);\r\n        } else {\r\n            super.invalidateDrawable(dr);\r\n        }\r\n    }\r\n    @Override\r\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n        updateDrawableBounds(w, h);\r\n    }\r\n    private void updateDrawableBounds(int w, int h) {\r\n        w -\u003d getPaddingRight() + getPaddingLeft();\r\n        h -\u003d getPaddingTop() + getPaddingBottom();\r\n        int right \u003d w;\r\n        int bottom \u003d h;\r\n        int top \u003d 0;\r\n        int left \u003d 0;\r\n        if (mIndicator !\u003d null) {\r\n            final int intrinsicWidth \u003d mIndicator.getIntrinsicWidth();\r\n            final int intrinsicHeight \u003d mIndicator.getIntrinsicHeight();\r\n            final float intrinsicAspect \u003d (float) intrinsicWidth / intrinsicHeight;\r\n            final float boundAspect \u003d (float) w / h;\r\n            if (intrinsicAspect !\u003d boundAspect) {\r\n                if (boundAspect \u003e intrinsicAspect) {\r\n                    final int width \u003d (int) (h * intrinsicAspect);\r\n                    left \u003d (w - width) / 2;\r\n                    right \u003d left + width;\r\n                } else {\r\n                    final int height \u003d (int) (w * (1 / intrinsicAspect));\r\n                    top \u003d (h - height) / 2;\r\n                    bottom \u003d top + height;\r\n                }\r\n            }\r\n            mIndicator.setBounds(left, top, right, bottom);\r\n        }\r\n    }\r\n    @Override\r\n    protected synchronized void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        drawTrack(canvas);\r\n    }\r\n    void drawTrack(Canvas canvas) {\r\n        final android.graphics.drawable.Drawable d \u003d mIndicator;\r\n        if (d !\u003d null) {\r\n            final int saveCount \u003d canvas.save();\r\n            canvas.translate(getPaddingLeft(), getPaddingTop());\r\n            d.draw(canvas);\r\n            canvas.restoreToCount(saveCount);\r\n            if (mShouldStartAnimationDrawable \u0026\u0026 d instanceof android.graphics.drawable.Animatable) {\r\n                ((android.graphics.drawable.Animatable) d).start();\r\n                mShouldStartAnimationDrawable \u003d false;\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int dw \u003d 0;\r\n        int dh \u003d 0;\r\n        final android.graphics.drawable.Drawable d \u003d mIndicator;\r\n        if (d !\u003d null) {\r\n            dw \u003d Math.max(mMinWidth, Math.min(mMaxWidth, d.getIntrinsicWidth()));\r\n            dh \u003d Math.max(mMinHeight, Math.min(mMaxHeight, d.getIntrinsicHeight()));\r\n        }\r\n        updateDrawableState();\r\n        dw +\u003d getPaddingLeft() + getPaddingRight();\r\n        dh +\u003d getPaddingTop() + getPaddingBottom();\r\n        final int measuredWidth \u003d resolveSizeAndState(dw, widthMeasureSpec, 0);\r\n        final int measuredHeight \u003d resolveSizeAndState(dh, heightMeasureSpec, 0);\r\n        setMeasuredDimension(measuredWidth, measuredHeight);\r\n    }\r\n    @Override\r\n    protected void drawableStateChanged() {\r\n        super.drawableStateChanged();\r\n        updateDrawableState();\r\n    }\r\n    private void updateDrawableState() {\r\n        final int[] state \u003d getDrawableState();\r\n        if (mIndicator !\u003d null \u0026\u0026 mIndicator.isStateful()) {\r\n            mIndicator.setState(state);\r\n        }\r\n    }\r\n    @Override\r\n    public void drawableHotspotChanged(float x, float y) {\r\n        super.drawableHotspotChanged(x, y);\r\n        if (mIndicator !\u003d null) {\r\n            mIndicator.setHotspot(x, y);\r\n        }\r\n    }\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        startAnimation();\r\n        removeCallbacks();\r\n    }\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        stopAnimation();\r\n        super.onDetachedFromWindow();\r\n        removeCallbacks();\r\n    }\r\n    private void removeCallbacks() {\r\n        removeCallbacks(mDelayedHide);\r\n        removeCallbacks(mDelayedShow);\r\n    }\r\n}\r\n\r\n\r\npublic static class BallPulseIndicator extends Indicator {\r\n    public static final float SCALE\u003d1.0f;\r\n    private float[] scaleFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(Math.min(getWidth(),getHeight())-circleSpacing*2)/6;\r\n        float x \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        float y\u003dgetHeight() / 2;\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            canvas.save();\r\n            float translateX\u003dx+(radius*2)*i+circleSpacing*i;\r\n            canvas.translate(translateX, y);\r\n            canvas.scale(scaleFloats[i], scaleFloats[i]);\r\n            canvas.drawCircle(0, 0, radius, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        int[] delays\u003dnew int[]{120,240,360};\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.3f,1);\r\n            scaleAnim.setDuration(750);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static abstract class Indicator extends android.graphics.drawable.Drawable implements android.graphics.drawable.Animatable {\r\n    private HashMap\u003cValueAnimator,ValueAnimator.AnimatorUpdateListener\u003e mUpdateListeners\u003dnew HashMap\u003c\u003e();\r\n    private ArrayList\u003cValueAnimator\u003e mAnimators;\r\n    private int alpha \u003d 255;\r\n    private static final Rect ZERO_BOUNDS_RECT \u003d new Rect();\r\n    protected Rect drawBounds \u003d ZERO_BOUNDS_RECT;\r\n    private boolean mHasAnimators;\r\n    private Paint mPaint\u003dnew Paint();\r\n    public Indicator(){\r\n        mPaint.setColor(Color.WHITE);\r\n        mPaint.setStyle(Paint.Style.FILL);\r\n        mPaint.setAntiAlias(true);\r\n    }\r\n    public int getColor() {\r\n        return mPaint.getColor();\r\n    }\r\n    public void setColor(int color) {\r\n        mPaint.setColor(color);\r\n    }\r\n    @Override\r\n    public void setAlpha(int alpha) {\r\n        this.alpha \u003d alpha;\r\n    }\r\n    @Override\r\n    public int getAlpha() {\r\n        return alpha;\r\n    }\r\n    @Override\r\n    public int getOpacity() {\r\n        return PixelFormat.OPAQUE;\r\n    }\r\n    @Override\r\n    public void setColorFilter(ColorFilter colorFilter) {}\r\n    @Override\r\n    public void draw(Canvas canvas) {\r\n        draw(canvas,mPaint);\r\n    }\r\n    public abstract void draw(Canvas canvas, Paint paint);\r\n    public abstract ArrayList\u003cValueAnimator\u003e onCreateAnimators();\r\n    @Override\r\n    public void start() {\r\n        ensureAnimators();\r\n        if (mAnimators \u003d\u003d null) {\r\n            return;\r\n        }\r\n        if (isStarted()) {\r\n            return;\r\n        }\r\n        startAnimators();\r\n        invalidateSelf();\r\n    }\r\n    private void startAnimators() {\r\n        for (int i \u003d 0; i \u003c mAnimators.size(); i++) {\r\n            ValueAnimator animator \u003d mAnimators.get(i);\r\n            ValueAnimator.AnimatorUpdateListener updateListener\u003dmUpdateListeners.get(animator);\r\n            if (updateListener!\u003dnull){\r\n                animator.addUpdateListener(updateListener);\r\n            }\r\n            animator.start();\r\n        }\r\n    }\r\n    private void stopAnimators() {\r\n        if (mAnimators!\u003dnull){\r\n            for (ValueAnimator animator : mAnimators) {\r\n                if (animator !\u003d null \u0026\u0026 animator.isStarted()) {\r\n                    animator.removeAllUpdateListeners();\r\n                    animator.end();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private void ensureAnimators() {\r\n        if (!mHasAnimators) {\r\n            mAnimators \u003d onCreateAnimators();\r\n            mHasAnimators \u003d true;\r\n        }\r\n    }\r\n    @Override\r\n    public void stop() {\r\n        stopAnimators();\r\n    }\r\n    private boolean isStarted() {\r\n        for (ValueAnimator animator : mAnimators) {\r\n            return animator.isStarted();\r\n        }\r\n        return false;\r\n    }\r\n    @Override\r\n    public boolean isRunning() {\r\n        for (ValueAnimator animator : mAnimators) {\r\n            return animator.isRunning();\r\n        }\r\n        return false;\r\n    }\r\n    public void addUpdateListener(ValueAnimator animator, ValueAnimator.AnimatorUpdateListener updateListener){\r\n        mUpdateListeners.put(animator,updateListener);\r\n    }\r\n    @Override\r\n    protected void onBoundsChange(Rect bounds) {\r\n        super.onBoundsChange(bounds);\r\n        setDrawBounds(bounds);\r\n    }\r\n    public void setDrawBounds(Rect drawBounds) {\r\n        setDrawBounds(drawBounds.left, drawBounds.top, drawBounds.right, drawBounds.bottom);\r\n    }\r\n    public void setDrawBounds(int left, int top, int right, int bottom) {\r\n        this.drawBounds \u003d new Rect(left, top, right, bottom);\r\n    }\r\n    public void postInvalidate(){\r\n        invalidateSelf();\r\n    }\r\n    public Rect getDrawBounds() {\r\n        return drawBounds;\r\n    }\r\n    public int getWidth(){\r\n        return drawBounds.width();\r\n    }\r\n    public int getHeight(){\r\n        return drawBounds.height();\r\n    }\r\n    public int centerX(){\r\n        return drawBounds.centerX();\r\n    }\r\n    public int centerY(){\r\n        return drawBounds.centerY();\r\n    }\r\n    public float exactCenterX(){\r\n        return drawBounds.exactCenterX();\r\n    }\r\n    public float exactCenterY(){\r\n        return drawBounds.exactCenterY();\r\n    }\r\n}\r\n\r\n\r\npublic static class LineScalePulseOutRapidIndicator extends LineScaleIndicator {\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        long[] delays\u003dnew long[]{400,200,0,200,400};\r\n        for (int i \u003d 0; i \u003c 5; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.4f,1);\r\n            scaleAnim.setDuration(1000);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleYFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class PacmanIndicator extends Indicator {\r\n    private float translateX;\r\n    private int alpha;\r\n    private float degrees1,degrees2;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        drawPacman(canvas,paint);\r\n        drawCircle(canvas,paint);\r\n    }\r\n    private void drawPacman(Canvas canvas,Paint paint){\r\n        float x\u003dgetWidth()/2;\r\n        float y\u003dgetHeight()/2;\r\n        canvas.save();\r\n        canvas.translate(x, y);\r\n        canvas.rotate(degrees1);\r\n        paint.setAlpha(255);\r\n        RectF rectF1\u003dnew RectF(-x/1.7f,-y/1.7f,x/1.7f,y/1.7f);\r\n        canvas.drawArc(rectF1, 0, 270, true, paint);\r\n        canvas.restore();\r\n        canvas.save();\r\n        canvas.translate(x, y);\r\n        canvas.rotate(degrees2);\r\n        paint.setAlpha(255);\r\n        RectF rectF2\u003dnew RectF(-x/1.7f,-y/1.7f,x/1.7f,y/1.7f);\r\n        canvas.drawArc(rectF2,90,270,true,paint);\r\n        canvas.restore();\r\n    }\r\n    private void drawCircle(Canvas canvas, Paint paint) {\r\n        float radius\u003dgetWidth()/11;\r\n        paint.setAlpha(alpha);\r\n        canvas.drawCircle(translateX, getHeight() / 2, radius, paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        float startT\u003dgetWidth()/11;\r\n        ValueAnimator translationAnim\u003dValueAnimator.ofFloat(getWidth()-startT,getWidth()/2);\r\n        translationAnim.setDuration(650);\r\n        translationAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        translationAnim.setRepeatCount(-1);\r\n        addUpdateListener(translationAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                translateX \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255,122);\r\n        alphaAnim.setDuration(650);\r\n        alphaAnim.setRepeatCount(-1);\r\n        addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                alpha \u003d (int) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim1\u003dValueAnimator.ofFloat(0, 45, 0);\r\n        rotateAnim1.setDuration(650);\r\n        rotateAnim1.setRepeatCount(-1);\r\n        addUpdateListener(rotateAnim1,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degrees1 \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim2\u003dValueAnimator.ofFloat(0,-45,0);\r\n        rotateAnim2.setDuration(650);\r\n        rotateAnim2.setRepeatCount(-1);\r\n        addUpdateListener(rotateAnim2,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degrees2 \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animators.add(translationAnim);\r\n        animators.add(alphaAnim);\r\n        animators.add(rotateAnim1);\r\n        animators.add(rotateAnim2);\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class JavaLibrary extends Indicator{\r\n    public static final float SCALE\u003d1.0f;\r\n    private float[] scaleFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(Math.min(getWidth(),getHeight())-circleSpacing*2)/12;\r\n        float x \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        float y\u003dgetHeight() / 2;\r\n        for (int i \u003d 0; i \u003c 4; i++) {\r\n            canvas.save();\r\n            float translateX\u003dx+(radius*2)*i+circleSpacing*i;\r\n            canvas.translate(translateX, y);\r\n            canvas.scale(scaleFloats[i], scaleFloats[i]);\r\n            canvas.drawCircle(0, 0, radius, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        int[] delays\u003dnew int[]{120,240,360,480};\r\n        for (int i \u003d 0; i \u003c 4; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.3f,1);\r\n            scaleAnim.setDuration(750);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class LineSpinFadeLoaderIndicator extends BallSpinFadeLoaderIndicator {\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float radius\u003dgetWidth()/10;\r\n        for (int i \u003d 0; i \u003c 8; i++) {\r\n            canvas.save();\r\n            Point point\u003dcircleAt(getWidth(),getHeight(),getWidth()/2.5f-radius,i*(Math.PI/4));\r\n            canvas.translate(point.x, point.y);\r\n            canvas.scale(scaleFloats[i], scaleFloats[i]);\r\n            canvas.rotate(i*45);\r\n            paint.setAlpha(alphas[i]);\r\n            RectF rectF\u003dnew RectF(-radius,-radius/1.5f,1.5f*radius,radius/1.5f);\r\n            canvas.drawRoundRect(rectF,5,5,paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n}\r\n\r\n\r\npublic static class BallZigZagIndicator extends Indicator {\r\n    float[] translateX\u003dnew float[2],translateY\u003dnew float[2];\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            canvas.save();\r\n            canvas.translate(translateX[i], translateY[i]);\r\n            canvas.drawCircle(0, 0, getWidth() / 10, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        float startX\u003dgetWidth()/6;\r\n        float startY\u003dgetWidth()/6;\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator translateXAnim\u003dValueAnimator.ofFloat(startX,getWidth()-startX,getWidth()/2,startX);\r\n            if (i\u003d\u003d1){\r\n                translateXAnim\u003dValueAnimator.ofFloat(getWidth()-startX,startX,getWidth()/2,getWidth()-startX);\r\n            }\r\n            ValueAnimator translateYAnim\u003dValueAnimator.ofFloat(startY,startY,getHeight()/2,startY);\r\n            if (i\u003d\u003d1){\r\n                translateYAnim\u003dValueAnimator.ofFloat(getHeight()-startY,getHeight()-startY,getHeight()/2,getHeight()-startY);\r\n            }\r\n            translateXAnim.setDuration(1000);\r\n            translateXAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translateXAnim.setRepeatCount(-1);\r\n            addUpdateListener(translateXAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateX[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            translateYAnim.setDuration(1000);\r\n            translateYAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translateYAnim.setRepeatCount(-1);\r\n            addUpdateListener(translateYAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateY[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(translateXAnim);\r\n            animators.add(translateYAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class LineScalePulseOutIndicator extends LineScaleIndicator {\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        long[] delays\u003dnew long[]{500,250,0,250,500};\r\n        for (int i \u003d 0; i \u003c 5; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.3f,1);\r\n            scaleAnim.setDuration(900);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleYFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\npublic static class CubeTransitionIndicator extends Indicator {\r\n    float[] translateX\u003dnew float[2],translateY\u003dnew float[2];\r\n    float degrees,scaleFloat\u003d1.0f;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float rWidth\u003dgetWidth()/5;\r\n        float rHeight\u003dgetHeight()/5;\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            canvas.save();\r\n            canvas.translate(translateX[i], translateY[i]);\r\n            canvas.rotate(degrees);\r\n            canvas.scale(scaleFloat,scaleFloat);\r\n            RectF rectF\u003dnew RectF(-rWidth/2,-rHeight/2,rWidth/2,rHeight/2);\r\n            canvas.drawRect(rectF,paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        float startX\u003dgetWidth()/5;\r\n        float startY\u003dgetHeight()/5;\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            final int index\u003di;\r\n            translateX[index]\u003dstartX;\r\n            ValueAnimator translationXAnim\u003dValueAnimator.ofFloat(startX,getWidth()-startX,getWidth()-startX, startX,startX);\r\n            if (i\u003d\u003d1){\r\n                translationXAnim\u003dValueAnimator.ofFloat(getWidth()-startX,startX,startX, getWidth()-startX,getWidth()-startX);\r\n            }\r\n            translationXAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translationXAnim.setDuration(1600);\r\n            translationXAnim.setRepeatCount(-1);\r\n            translationXAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateX[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            translateY[index]\u003dstartY;\r\n            ValueAnimator translationYAnim\u003dValueAnimator.ofFloat(startY,startY,getHeight()-startY,getHeight()- startY,startY);\r\n            if (i\u003d\u003d1){\r\n                translationYAnim\u003dValueAnimator.ofFloat(getHeight()-startY,getHeight()-startY,startY,startY,getHeight()-startY);\r\n            }\r\n            translationYAnim.setDuration(1600);\r\n            translationYAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translationYAnim.setRepeatCount(-1);\r\n            addUpdateListener(translationYAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateY[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(translationXAnim);\r\n            animators.add(translationYAnim);\r\n        }\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.5f,1,0.5f,1);\r\n        scaleAnim.setDuration(1600);\r\n        scaleAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scaleFloat \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim\u003dValueAnimator.ofFloat(0,180,360,1.5f*360,2*360);\r\n        rotateAnim.setDuration(1600);\r\n        rotateAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        rotateAnim.setRepeatCount(-1);\r\n        addUpdateListener(rotateAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degrees \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animators.add(scaleAnim);\r\n        animators.add(rotateAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\n//TriangleSkewSpinIndicator\r\n\r\npublic static class TriangleSkewSpinIndicator extends Indicator {\r\n    private float rotateX;\r\n    private float rotateY;\r\n    private Camera mCamera;\r\n    private Matrix mMatrix;\r\n    public TriangleSkewSpinIndicator(){\r\n        mCamera\u003dnew Camera();\r\n        mMatrix\u003dnew Matrix();\r\n    }\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        mMatrix.reset();\r\n        mCamera.save();\r\n        mCamera.rotateX(rotateX);\r\n        mCamera.rotateY(rotateY);\r\n        mCamera.getMatrix(mMatrix);\r\n        mCamera.restore();\r\n        mMatrix.preTranslate(-centerX(), -centerY());\r\n        mMatrix.postTranslate(centerX(), centerY());\r\n        canvas.concat(mMatrix);\r\n        Path path\u003dnew Path();\r\n        path.moveTo(getWidth()/5,getHeight()*4/5);\r\n        path.lineTo(getWidth()*4/5, getHeight()*4/5);\r\n        path.lineTo(getWidth()/2,getHeight()/5);\r\n        path.close();\r\n        canvas.drawPath(path, paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator animator\u003dValueAnimator.ofFloat(0,180,180,0,0);\r\n        addUpdateListener(animator,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                rotateX\u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animator.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator.setRepeatCount(-1);\r\n        animator.setDuration(2500);\r\n        ValueAnimator animator1\u003dValueAnimator.ofFloat(0,0,180,180,0);\r\n        addUpdateListener(animator1,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                rotateY\u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animator1.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator1.setRepeatCount(-1);\r\n        animator1.setDuration(2500);\r\n        animators.add(animator);\r\n        animators.add(animator1);\r\n        return animators;\r\n    }\r\n}\r\n\r\n//SquareSpinIndicator\r\n\r\npublic static class SquareSpinIndicator extends Indicator {\r\n    private float rotateX;\r\n    private float rotateY;\r\n    private Camera mCamera;\r\n    private Matrix mMatrix;\r\n    public SquareSpinIndicator(){\r\n        mCamera\u003dnew Camera();\r\n        mMatrix\u003dnew Matrix();\r\n    }\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        mMatrix.reset();\r\n        mCamera.save();\r\n        mCamera.rotateX(rotateX);\r\n        mCamera.rotateY(rotateY);\r\n        mCamera.getMatrix(mMatrix);\r\n        mCamera.restore();\r\n        mMatrix.preTranslate(-centerX(), -centerY());\r\n        mMatrix.postTranslate(centerX(), centerY());\r\n        canvas.concat(mMatrix);\r\n        canvas.drawRect(new RectF(getWidth()/5,getHeight()/5,getWidth()*4/5,getHeight()*4/5),paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator animator\u003dValueAnimator.ofFloat(0,180,180,0,0);\r\n        addUpdateListener(animator,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                rotateX\u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animator.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator.setRepeatCount(-1);\r\n        animator.setDuration(2500);\r\n        ValueAnimator animator1\u003dValueAnimator.ofFloat(0,0,180,180,0);\r\n        addUpdateListener(animator1,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                rotateY\u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animator1.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator1.setRepeatCount(-1);\r\n        animator1.setDuration(2500);\r\n        animators.add(animator);\r\n        animators.add(animator1);\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class LineScaleIndicator extends Indicator {\r\n    public static final float SCALE\u003d1.0f;\r\n    float[] scaleYFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float translateX\u003dgetWidth()/11;\r\n        float translateY\u003dgetHeight()/2;\r\n        for (int i \u003d 0; i \u003c 5; i++) {\r\n            canvas.save();\r\n            canvas.translate((2 + i * 2) * translateX - translateX / 2, translateY);\r\n            canvas.scale(SCALE, scaleYFloats[i]);\r\n            RectF rectF\u003dnew RectF(-translateX/2,-getHeight()/2.5f,translateX/2,getHeight()/2.5f);\r\n            canvas.drawRoundRect(rectF, 5, 5, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        long[] delays\u003dnew long[]{100,200,300,400,500};\r\n        for (int i \u003d 0; i \u003c 5; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1, 0.4f, 1);\r\n            scaleAnim.setDuration(1000);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleYFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n//SemiCircleSpinIndicator\r\n\r\npublic static class SemiCircleSpinIndicator extends Indicator {\r\n    private float degress;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        canvas.rotate(degress,centerX(),centerY());\r\n        RectF rectF\u003dnew RectF(0,0,getWidth(),getHeight());\r\n        canvas.drawArc(rectF,-60,120,false,paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator rotateAnim\u003dValueAnimator.ofFloat(0,180,360);\r\n        addUpdateListener(rotateAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degress\u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        rotateAnim.setDuration(600);\r\n        rotateAnim.setRepeatCount(-1);\r\n        animators.add(rotateAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class LineScalePartyIndicator extends Indicator {\r\n    public static final float SCALE\u003d1.0f;\r\n    float[] scaleFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float translateX\u003dgetWidth()/9;\r\n        float translateY\u003dgetHeight()/2;\r\n        for (int i \u003d 0; i \u003c 4; i++) {\r\n            canvas.save();\r\n            canvas.translate((2 + i * 2) * translateX - translateX / 2, translateY);\r\n            canvas.scale(scaleFloats[i], scaleFloats[i]);\r\n            RectF rectF\u003dnew RectF(-translateX/2,-getHeight()/2.5f,translateX/2,getHeight()/2.5f);\r\n            canvas.drawRoundRect(rectF,5,5,paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        long[] durations\u003dnew long[]{1260, 430, 1010, 730};\r\n        long[] delays\u003dnew long[]{770, 290, 280, 740};\r\n        for (int i \u003d 0; i \u003c 4; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.4f,1);\r\n            scaleAnim.setDuration(durations[i]);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\n//BallPulseSyncIndicator\r\npublic static class BallPulseSyncIndicator extends Indicator {\r\n    float[] translateYFloats\u003dnew float[3];\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(getWidth()-circleSpacing*2)/6;\r\n        float x \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            canvas.save();\r\n            float translateX\u003dx+(radius*2)*i+circleSpacing*i;\r\n            canvas.translate(translateX, translateYFloats[i]);\r\n            canvas.drawCircle(0, 0, radius, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(getWidth()-circleSpacing*2)/6;\r\n        int[] delays\u003dnew int[]{70,140,210};\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(getHeight()/2,getHeight()/2-radius*2,getHeight()/2);\r\n            scaleAnim.setDuration(600);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateYFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n//BallPulseRiseIndicator\r\npublic static class BallPulseRiseIndicator extends Indicator {\r\n    private Camera mCamera;\r\n    private Matrix mMatrix;\r\n    private float degress;\r\n    public BallPulseRiseIndicator(){\r\n        mCamera\u003dnew Camera();\r\n        mMatrix\u003dnew Matrix();\r\n    }\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        mMatrix.reset();\r\n        mCamera.save();\r\n        mCamera.rotateX(degress);\r\n        mCamera.getMatrix(mMatrix);\r\n        mCamera.restore();\r\n        mMatrix.preTranslate(-centerX(), -centerY());\r\n        mMatrix.postTranslate(centerX(), centerY());\r\n        canvas.concat(mMatrix);\r\n        float radius\u003dgetWidth()/10;\r\n        canvas.drawCircle(getWidth()/4,radius*2,radius,paint);\r\n        canvas.drawCircle(getWidth()*3/4,radius*2,radius,paint);\r\n        canvas.drawCircle(radius,getHeight()-2*radius,radius,paint);\r\n        canvas.drawCircle(getWidth()/2,getHeight()-2*radius,radius,paint);\r\n        canvas.drawCircle(getWidth()-radius,getHeight()-2*radius,radius,paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator animator\u003dValueAnimator.ofFloat(0,360);\r\n        addUpdateListener(animator,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degress \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animator.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator.setRepeatCount(-1);\r\n        animator.setDuration(1500);\r\n        animators.add(animator);\r\n        return animators;\r\n    }\r\n}\r\n\r\n//BallGridPulseIndicator\r\npublic static class BallGridPulseIndicator extends Indicator {\r\n    public static final int ALPHA\u003d255;\r\n    public static final float SCALE\u003d1.0f;\r\n    int[] alphas\u003dnew int[]{ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA};\r\n    float[] scaleFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(getWidth()-circleSpacing*4)/6;\r\n        float x \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        float y \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            for (int j \u003d 0; j \u003c 3; j++) {\r\n                canvas.save();\r\n                float translateX\u003dx+(radius*2)*j+circleSpacing*j;\r\n                float translateY\u003dy+(radius*2)*i+circleSpacing*i;\r\n                canvas.translate(translateX, translateY);\r\n                canvas.scale(scaleFloats[3 * i + j], scaleFloats[3 * i + j]);\r\n                paint.setAlpha(alphas[3 * i + j]);\r\n                canvas.drawCircle(0, 0, radius, paint);\r\n                canvas.restore();\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        int[] durations\u003d{720, 1020, 1280, 1420, 1450, 1180, 870, 1450, 1060};\r\n        int[] delays\u003d {-60, 250, -170, 480, 310, 30, 460, 780, 450};\r\n        for (int i \u003d 0; i \u003c 9; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.5f,1);\r\n            scaleAnim.setDuration(durations[i]);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255, 210, 122, 255);\r\n            alphaAnim.setDuration(durations[i]);\r\n            alphaAnim.setRepeatCount(-1);\r\n            alphaAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    alphas[index] \u003d (int) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n            animators.add(alphaAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n//BallGridBeatIndicator\r\npublic static class BallGridBeatIndicator extends Indicator {\r\n    public static final int ALPHA\u003d255;\r\n    int[] alphas\u003dnew int[]{ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(getWidth()-circleSpacing*4)/6;\r\n        float x \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        float y \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            for (int j \u003d 0; j \u003c 3; j++) {\r\n                canvas.save();\r\n                float translateX\u003dx+(radius*2)*j+circleSpacing*j;\r\n                float translateY\u003dy+(radius*2)*i+circleSpacing*i;\r\n                canvas.translate(translateX, translateY);\r\n                paint.setAlpha(alphas[3 * i + j]);\r\n                canvas.drawCircle(0, 0, radius, paint);\r\n                canvas.restore();\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        int[] durations\u003d{960, 930, 1190, 1130, 1340, 940, 1200, 820, 1190};\r\n        int[] delays\u003d {360, 400, 680, 410, 710, -150, -120, 10, 320};\r\n        for (int i \u003d 0; i \u003c 9; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255, 168,255);\r\n            alphaAnim.setDuration(durations[i]);\r\n            alphaAnim.setRepeatCount(-1);\r\n            alphaAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    alphas[index] \u003d (int) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(alphaAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n//BallClipRotatePulseIndicator\r\npublic static class BallClipRotatePulseIndicator extends Indicator {\r\n    float scaleFloat1,scaleFloat2,degrees;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d12;\r\n        float x\u003dgetWidth()/2;\r\n        float y\u003dgetHeight()/2;\r\n        canvas.save();\r\n        canvas.translate(x, y);\r\n        canvas.scale(scaleFloat1, scaleFloat1);\r\n        paint.setStyle(Paint.Style.FILL);\r\n        canvas.drawCircle(0, 0, x / 2.5f, paint);\r\n        canvas.restore();\r\n        canvas.translate(x, y);\r\n        canvas.scale(scaleFloat2, scaleFloat2);\r\n        canvas.rotate(degrees);\r\n        paint.setStrokeWidth(3);\r\n        paint.setStyle(Paint.Style.STROKE);\r\n        float[] startAngles\u003dnew float[]{225,45};\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            RectF rectF\u003dnew RectF(-x+circleSpacing,-y+circleSpacing,x-circleSpacing,y-circleSpacing);\r\n            canvas.drawArc(rectF, startAngles[i], 90, false, paint);\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.3f,1);\r\n        scaleAnim.setDuration(1000);\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scaleFloat1 \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator scaleAnim2\u003dValueAnimator.ofFloat(1,0.6f,1);\r\n        scaleAnim2.setDuration(1000);\r\n        scaleAnim2.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim2,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scaleFloat2 \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim\u003dValueAnimator.ofFloat(0, 180,360);\r\n        rotateAnim.setDuration(1000);\r\n        rotateAnim.setRepeatCount(-1);\r\n        addUpdateListener(rotateAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degrees \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        animators.add(scaleAnim);\r\n        animators.add(scaleAnim2);\r\n        animators.add(rotateAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\n//BallClipRotateMultipleIndicator\r\npublic static class BallClipRotateMultipleIndicator extends Indicator {\r\n    float scaleFloat\u003d1,degrees;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        paint.setStrokeWidth(3);\r\n        paint.setStyle(Paint.Style.STROKE);\r\n        float circleSpacing\u003d12;\r\n        float x\u003dgetWidth()/2;\r\n        float y\u003dgetHeight()/2;\r\n        canvas.save();\r\n        canvas.translate(x, y);\r\n        canvas.scale(scaleFloat, scaleFloat);\r\n        canvas.rotate(degrees);\r\n        float[] bStartAngles\u003dnew float[]{135,-45};\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            RectF rectF\u003dnew RectF(-x+circleSpacing,-y+circleSpacing,x-circleSpacing,y-circleSpacing);\r\n            canvas.drawArc(rectF, bStartAngles[i], 90, false, paint);\r\n        }\r\n        canvas.restore();\r\n        canvas.translate(x, y);\r\n        canvas.scale(scaleFloat, scaleFloat);\r\n        canvas.rotate(-degrees);\r\n        float[] sStartAngles\u003dnew float[]{225,45};\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            RectF rectF\u003dnew RectF(-x/1.8f+circleSpacing,-y/1.8f+circleSpacing,x/1.8f-circleSpacing,y/1.8f-circleSpacing);\r\n            canvas.drawArc(rectF, sStartAngles[i], 90, false, paint);\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.6f,1);\r\n        scaleAnim.setDuration(1000);\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scaleFloat \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim\u003dValueAnimator.ofFloat(0, 180,360);\r\n        rotateAnim.setDuration(1000);\r\n        rotateAnim.setRepeatCount(-1);\r\n        addUpdateListener(rotateAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degrees \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animators.add(scaleAnim);\r\n        animators.add(rotateAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\n//BallClipRotateIndicator\r\npublic static class BallClipRotateIndicator extends Indicator {\r\n    float scaleFloat\u003d1,degrees;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        paint.setStyle(Paint.Style.STROKE);\r\n        paint.setStrokeWidth(3);\r\n        float circleSpacing\u003d12;\r\n        float x \u003d (getWidth()) / 2;\r\n        float y\u003d(getHeight()) / 2;\r\n        canvas.translate(x, y);\r\n        canvas.scale(scaleFloat, scaleFloat);\r\n        canvas.rotate(degrees);\r\n        RectF rectF\u003dnew RectF(-x+circleSpacing,-y+circleSpacing,0+x-circleSpacing,0+y-circleSpacing);\r\n        canvas.drawArc(rectF, -45, 270, false, paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.6f,0.5f,1);\r\n        scaleAnim.setDuration(750);\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scaleFloat \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim\u003dValueAnimator.ofFloat(0,180,360);\r\n        rotateAnim.setDuration(750);\r\n        rotateAnim.setRepeatCount(-1);\r\n        addUpdateListener(rotateAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degrees \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animators.add(scaleAnim);\r\n        animators.add(rotateAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\n// BallBeatIndicator\r\n\r\npublic static class BallBeatIndicator extends Indicator {\r\n    public static final float SCALE\u003d1.0f;\r\n    public static final int ALPHA\u003d255;\r\n    private float[] scaleFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE};\r\n    int[] alphas\u003dnew int[]{ALPHA,\r\n            ALPHA,\r\n            ALPHA,};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        float radius\u003d(getWidth()-circleSpacing*2)/6;\r\n        float x \u003d getWidth()/ 2-(radius*2+circleSpacing);\r\n        float y\u003dgetHeight() / 2;\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            canvas.save();\r\n            float translateX\u003dx+(radius*2)*i+circleSpacing*i;\r\n            canvas.translate(translateX, y);\r\n            canvas.scale(scaleFloats[i], scaleFloats[i]);\r\n            paint.setAlpha(alphas[i]);\r\n            canvas.drawCircle(0, 0, radius, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        int[] delays\u003dnew int[]{350,0,350};\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.75f,1);\r\n            scaleAnim.setDuration(700);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255,51,255);\r\n            alphaAnim.setDuration(700);\r\n            alphaAnim.setRepeatCount(-1);\r\n            alphaAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    alphas[index] \u003d (int) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n            animators.add(alphaAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\npublic static class BallRotateIndicator extends Indicator {\r\n    float scaleFloat\u003d0.5f;\r\n    float degress;\r\n    private Matrix mMatrix;\r\n    public BallRotateIndicator(){\r\n        mMatrix\u003dnew Matrix();\r\n    }\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float radius\u003dgetWidth()/10;\r\n        float x \u003d getWidth()/ 2;\r\n        float y\u003dgetHeight()/2;\r\n        canvas.rotate(degress,centerX(),centerY());\r\n        canvas.save();\r\n        canvas.translate(x - radius * 2 - radius, y);\r\n        canvas.scale(scaleFloat, scaleFloat);\r\n        canvas.drawCircle(0, 0, radius, paint);\r\n        canvas.restore();\r\n        canvas.save();\r\n        canvas.translate(x, y);\r\n        canvas.scale(scaleFloat, scaleFloat);\r\n        canvas.drawCircle(0, 0, radius, paint);\r\n        canvas.restore();\r\n        canvas.save();\r\n        canvas.translate(x + radius * 2 + radius, y);\r\n        canvas.scale(scaleFloat, scaleFloat);\r\n        canvas.drawCircle(0,0,radius, paint);\r\n        canvas.restore();\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(0.5f,1,0.5f);\r\n        scaleAnim.setDuration(1000);\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scaleFloat \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator rotateAnim\u003dValueAnimator.ofFloat(0,180,360);\r\n        addUpdateListener(rotateAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                degress \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        rotateAnim.setDuration(1000);\r\n        rotateAnim.setRepeatCount(-1);\r\n        animators.add(scaleAnim);\r\n        animators.add(rotateAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class BallScaleIndicator extends Indicator {\r\n    float scale\u003d1;\r\n    int alpha\u003d255;\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        paint.setAlpha(alpha);\r\n        canvas.scale(scale,scale,getWidth()/2,getHeight()/2);\r\n        paint.setAlpha(alpha);\r\n        canvas.drawCircle(getWidth()/2,getHeight()/2,getWidth()/2-circleSpacing,paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(0,1);\r\n        scaleAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        scaleAnim.setDuration(1000);\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scale \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255, 0);\r\n        alphaAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        alphaAnim.setDuration(1000);\r\n        alphaAnim.setRepeatCount(-1);\r\n        addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                alpha \u003d (int) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animators.add(scaleAnim);\r\n        animators.add(alphaAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\npublic static class BallScaleMultipleIndicator extends Indicator {\r\n    float[] scaleFloats\u003dnew float[]{1,1,1};\r\n    int[] alphaInts\u003dnew int[]{255,255,255};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float circleSpacing\u003d4;\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            paint.setAlpha(alphaInts[i]);\r\n            canvas.scale(scaleFloats[i],scaleFloats[i],getWidth()/2,getHeight()/2);\r\n            canvas.drawCircle(getWidth()/2,getHeight()/2,getWidth()/2-circleSpacing,paint);\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        long[] delays\u003dnew long[]{0, 200, 400};\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(0,1);\r\n            scaleAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            scaleAnim.setDuration(1000);\r\n            scaleAnim.setRepeatCount(-1);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255,0);\r\n            alphaAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            alphaAnim.setDuration(1000);\r\n            alphaAnim.setRepeatCount(-1);\r\n            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    alphaInts[index] \u003d (int) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            animators.add(scaleAnim);\r\n            animators.add(alphaAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\npublic static class BallScaleRippleIndicator extends BallScaleIndicator {\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        paint.setStyle(Paint.Style.STROKE);\r\n        paint.setStrokeWidth(3);\r\n        super.draw(canvas, paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(0,1);\r\n        scaleAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        scaleAnim.setDuration(1000);\r\n        scaleAnim.setRepeatCount(-1);\r\n        addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                scale \u003d (float) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        ValueAnimator alphaAnim\u003dValueAnimator.ofInt(0, 255);\r\n        alphaAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        alphaAnim.setDuration(1000);\r\n        alphaAnim.setRepeatCount(-1);\r\n        addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                alpha \u003d (int) animation.getAnimatedValue();\r\n                postInvalidate();\r\n            }\r\n        });\r\n        animators.add(scaleAnim);\r\n        animators.add(alphaAnim);\r\n        return animators;\r\n    }\r\n}\r\n\r\npublic static class BallScaleRippleMultipleIndicator extends BallScaleMultipleIndicator {\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        paint.setStyle(Paint.Style.STROKE);\r\n        paint.setStrokeWidth(3);\r\n        super.draw(canvas, paint);\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        long[] delays\u003dnew long[]{0, 200, 400};\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(0,1);\r\n            scaleAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            scaleAnim.setDuration(1000);\r\n            scaleAnim.setRepeatCount(-1);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            ValueAnimator alphaAnim\u003dValueAnimator.ofInt(0,255);\r\n            scaleAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            alphaAnim.setDuration(1000);\r\n            alphaAnim.setRepeatCount(-1);\r\n            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    alphaInts[index] \u003d (int) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            animators.add(scaleAnim);\r\n            animators.add(alphaAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class BallSpinFadeLoaderIndicator extends Indicator {\r\n    public static final float SCALE\u003d1.0f;\r\n    public static final int ALPHA\u003d255;\r\n    float[] scaleFloats\u003dnew float[]{SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE,\r\n            SCALE};\r\n    int[] alphas\u003dnew int[]{ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA,\r\n            ALPHA};\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        float radius\u003dgetWidth()/10;\r\n        for (int i \u003d 0; i \u003c 8; i++) {\r\n            canvas.save();\r\n            Point point\u003dcircleAt(getWidth(),getHeight(),getWidth()/2-radius,i*(Math.PI/4));\r\n            canvas.translate(point.x,point.y);\r\n            canvas.scale(scaleFloats[i],scaleFloats[i]);\r\n            paint.setAlpha(alphas[i]);\r\n            canvas.drawCircle(0,0,radius,paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        int[] delays\u003d {0, 120, 240, 360, 480, 600, 720, 780, 840};\r\n        for (int i \u003d 0; i \u003c 8; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator scaleAnim\u003dValueAnimator.ofFloat(1,0.4f,1);\r\n            scaleAnim.setDuration(1000);\r\n            scaleAnim.setRepeatCount(-1);\r\n            scaleAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    scaleFloats[index] \u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            ValueAnimator alphaAnim\u003dValueAnimator.ofInt(255, 77, 255);\r\n            alphaAnim.setDuration(1000);\r\n            alphaAnim.setRepeatCount(-1);\r\n            alphaAnim.setStartDelay(delays[i]);\r\n            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    alphas[index] \u003d (int) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(scaleAnim);\r\n            animators.add(alphaAnim);\r\n        }\r\n        return animators;\r\n    }\r\n    Point circleAt(int width,int height,float radius,double angle){\r\n        float x\u003d (float) (width/2+radius*(Math.cos(angle)));\r\n        float y\u003d (float) (height/2+radius*(Math.sin(angle)));\r\n        return new Point(x,y);\r\n    }\r\n    final class Point{\r\n        public float x;\r\n        public float y;\r\n        public Point(float x, float y){\r\n            this.x\u003dx;\r\n            this.y\u003dy;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npublic static class BallTrianglePathIndicator extends Indicator {\r\n    float[] translateX\u003dnew float[3],translateY\u003dnew float[3];\r\n    @Override\r\n    public void draw(Canvas canvas, Paint paint) {\r\n        paint.setStrokeWidth(3);\r\n        paint.setStyle(Paint.Style.STROKE);\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            canvas.save();\r\n            canvas.translate(translateX[i], translateY[i]);\r\n            canvas.drawCircle(0, 0, getWidth() / 10, paint);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        float startX\u003dgetWidth()/5;\r\n        float startY\u003dgetWidth()/5;\r\n        for (int i \u003d 0; i \u003c 3; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator translateXAnim\u003dValueAnimator.ofFloat(getWidth()/2,getWidth()-startX,startX,getWidth()/2);\r\n            if (i\u003d\u003d1){\r\n                translateXAnim\u003dValueAnimator.ofFloat(getWidth()-startX,startX,getWidth()/2,getWidth()-startX);\r\n            }else if (i\u003d\u003d2){\r\n                translateXAnim\u003dValueAnimator.ofFloat(startX,getWidth()/2,getWidth()-startX,startX);\r\n            }\r\n            ValueAnimator translateYAnim\u003dValueAnimator.ofFloat(startY,getHeight()-startY,getHeight()-startY,startY);\r\n            if (i\u003d\u003d1){\r\n                translateYAnim\u003dValueAnimator.ofFloat(getHeight()-startY,getHeight()-startY,startY,getHeight()-startY);\r\n            }else if (i\u003d\u003d2){\r\n                translateYAnim\u003dValueAnimator.ofFloat(getHeight()-startY,startY,getHeight()-startY,getHeight()-startY);\r\n            }\r\n            translateXAnim.setDuration(2000);\r\n            translateXAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n                translateXAnim.setRepeatCount(-1);\r\n            addUpdateListener(translateXAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateX [index]\u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            translateYAnim.setDuration(2000);\r\n            translateYAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translateYAnim.setRepeatCount(-1);\r\n            addUpdateListener(translateYAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateY [index]\u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(translateXAnim);\r\n            animators.add(translateYAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r\n\r\n\r\npublic static class BallZigZagDeflectIndicator extends BallZigZagIndicator {\r\n    @Override\r\n    public ArrayList\u003cValueAnimator\u003e onCreateAnimators() {\r\n        ArrayList\u003cValueAnimator\u003e animators\u003dnew ArrayList\u003c\u003e();\r\n        float startX\u003dgetWidth()/6;\r\n        float startY\u003dgetWidth()/6;\r\n        for (int i \u003d 0; i \u003c 2; i++) {\r\n            final int index\u003di;\r\n            ValueAnimator translateXAnim\u003dValueAnimator.ofFloat(startX,getWidth()-startX,startX,getWidth()-startX,startX);\r\n            if (i\u003d\u003d1){\r\n                translateXAnim\u003dValueAnimator.ofFloat(getWidth()-startX,startX,getWidth()-startX,startX,getWidth()-startX);\r\n            }\r\n            ValueAnimator translateYAnim\u003dValueAnimator.ofFloat(startY,startY,getHeight()-startY,getHeight()-startY,startY);\r\n            if (i\u003d\u003d1){\r\n                translateYAnim\u003dValueAnimator.ofFloat(getHeight()-startY,getHeight()-startY,startY,startY,getHeight()-startY);\r\n            }\r\n            translateXAnim.setDuration(2000);\r\n            translateXAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translateXAnim.setRepeatCount(-1);\r\n            addUpdateListener(translateXAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateX [index]\u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            translateYAnim.setDuration(2000);\r\n            translateYAnim.setInterpolator(new android.view.animation.LinearInterpolator());\r\n            translateYAnim.setRepeatCount(-1);\r\n            addUpdateListener(translateYAnim,new ValueAnimator.AnimatorUpdateListener() {\r\n                @Override\r\n                public void onAnimationUpdate(ValueAnimator animation) {\r\n                    translateY [index]\u003d (float) animation.getAnimatedValue();\r\n                    postInvalidate();\r\n                }\r\n            });\r\n            animators.add(translateXAnim);\r\n            animators.add(translateYAnim);\r\n        }\r\n        return animators;\r\n    }\r\n}\r"},{"name":"Dot Progress","code":"//Create Dot Progress :\r\n\r\nfinal DilatingDotsProgressBar bar \u003d new DilatingDotsProgressBar(this); \r\nbar.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT)); \r\nbar.setDotRadius(5); \r\nbar.setDotColors(Color.RED, Color.BLACK); \r\nbar.setNumberOfDots(3); \r\nbar.setDotScaleMultiplier(1); \r\nbar.setGrowthSpeed(500); \r\nbar.setDotSpacing(4); \r\nlinear1.addView(bar); \r\n\r\n\r\n//Show :\r\n\r\nbar.showNow(); \r\n\r\n//Hide :\r\n\r\nbar.hideNow(); \r\n\r\n\r\n//Create Class :\r\n\r\npublic static class DilatingDotDrawable extends android.graphics.drawable.Drawable {\r\n    private static final String TAG \u003d DilatingDotDrawable.class.getSimpleName();\r\n    private Paint mPaint \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\r\n    private float radius;\r\n    private float maxRadius;\r\n    final Rect mDirtyBounds \u003d new Rect(0, 0, 0, 0);\r\n\r\n    public DilatingDotDrawable(final int color, final float radius, final float maxRadius) {\r\n        mPaint.setColor(color);\r\n        mPaint.setStyle(Paint.Style.FILL);\r\n        mPaint.setStrokeCap(Paint.Cap.ROUND);\r\n        mPaint.setStrokeJoin(Paint.Join.ROUND);\r\n\r\n        this.radius \u003d radius;\r\n        setMaxRadius(maxRadius);\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas canvas) {\r\n        final Rect bounds \u003d getBounds();\r\n        canvas.drawCircle(bounds.centerX(), bounds.centerY(), radius - 1, mPaint);\r\n    }\r\n\r\n    @Override\r\n    public void setAlpha(int alpha) {\r\n        if (alpha !\u003d mPaint.getAlpha()) {\r\n            mPaint.setAlpha(alpha);\r\n            invalidateSelf();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setColorFilter(ColorFilter colorFilter) {\r\n        mPaint.setColorFilter(colorFilter);\r\n        invalidateSelf();\r\n    }\r\n\r\n    @Override\r\n    public int getOpacity() {\r\n        return PixelFormat.TRANSLUCENT;\r\n    }\r\n\r\n    public void setColor(int color) {\r\n        mPaint.setColor(color);\r\n        invalidateSelf();\r\n    }\r\n\r\n    public void setRadius(float radius) {\r\n        this.radius \u003d radius;\r\n        invalidateSelf();\r\n    }\r\n\r\n    public float getRadius() {\r\n        return radius;\r\n    }\r\n\r\n    @Override\r\n    public int getIntrinsicWidth() {\r\n        return (int) (maxRadius * 2) + 2;\r\n    }\r\n\r\n    @Override\r\n    public int getIntrinsicHeight() {\r\n        return (int) (maxRadius * 2) + 2;\r\n    }\r\n\r\n    public void setMaxRadius(final float maxRadius) {\r\n        this.maxRadius \u003d maxRadius;\r\n        mDirtyBounds.bottom \u003d (int) (maxRadius * 2) + 2;\r\n        mDirtyBounds.right \u003d (int) (maxRadius * 2) + 2;\r\n    }\r\n\r\n    @Override\r\n    public Rect getDirtyBounds() {\r\n        return mDirtyBounds;\r\n    }\r\n\r\n    @Override\r\n    protected void onBoundsChange(final Rect bounds) {\r\n        super.onBoundsChange(bounds);\r\n        mDirtyBounds.offsetTo(bounds.left, bounds.top);\r\n    }\r\n}\r\n\r\n\r\npublic static class DilatingDotsProgressBar extends View {\r\n    public static final String TAG \u003d DilatingDotsProgressBar.class.getSimpleName();\r\n    public static final double START_DELAY_FACTOR \u003d 0.35;\r\n    private static final float DEFAULT_GROWTH_MULTIPLIER \u003d 1.75f;\r\n    private static final int MIN_SHOW_TIME \u003d 500; // ms\r\n    private static final int MIN_DELAY \u003d 500; // ms\r\n    private int mDotColor;\r\n    private int mDotEndColor;\r\n    private int mAnimationDuration;\r\n    private int mWidthBetweenDotCenters;\r\n    private int mNumberDots;\r\n    private float mDotRadius;\r\n    private float mDotScaleMultiplier;\r\n    private float mDotMaxRadius;\r\n    private float mHorizontalSpacing;\r\n    private long mStartTime \u003d -1;\r\n    private boolean mShouldAnimate;\r\n    private boolean mDismissed \u003d false;\r\n    private boolean mIsRunning \u003d false;\r\n    private boolean mAnimateColors \u003d false;\r\n    private ArrayList\u003cDilatingDotDrawable\u003e mDrawables \u003d new ArrayList\u003c\u003e();\r\n    private final List\u003candroid.animation.Animator\u003e mAnimations \u003d new ArrayList\u003c\u003e();\r\n    /** delayed runnable to stop the progress */\r\n    private final Runnable mDelayedHide \u003d new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            mStartTime \u003d -1;\r\n            mIsRunning \u003d false;\r\n            setVisibility(View.GONE);\r\n            stopAnimations();\r\n        }\r\n    };\r\n\r\n    /** delayed runnable to start the progress */\r\n    private final Runnable mDelayedShow \u003d new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!mDismissed) {\r\n                mStartTime \u003d System.currentTimeMillis();\r\n                setVisibility(View.VISIBLE);\r\n                startAnimations();\r\n            }\r\n        }\r\n    };\r\n\r\n    public DilatingDotsProgressBar(Context context) {\r\n        this(context, null);\r\n    }\r\n\r\n    public DilatingDotsProgressBar(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n\r\n    public DilatingDotsProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(attrs);\r\n    }\r\n\r\n    private void init(AttributeSet attrs) {\r\n        //TypedArray a \u003d getContext().obtainStyledAttributes(attrs, R.styleable.DilatingDotsProgressBar);\r\n        //mNumberDots \u003d a.getInt(R.styleable.DilatingDotsProgressBar_dd_numDots, 3);\r\n        //mDotRadius \u003d a.getDimension(R.styleable.DilatingDotsProgressBar_android_radius, 8);\r\n        //mDotColor \u003d a.getColor(R.styleable.DilatingDotsProgressBar_android_color, 0xff9c27b0);\r\n        //mDotEndColor \u003d a.getColor(R.styleable.DilatingDotsProgressBar_dd_endColor, mDotColor);\r\n        //mDotScaleMultiplier \u003d a.getFloat(R.styleable.DilatingDotsProgressBar_dd_scaleMultiplier, DEFAULT_GROWTH_MULTIPLIER);\r\n        //mAnimationDuration \u003d a.getInt(R.styleable.DilatingDotsProgressBar_dd_animationDuration, 300);\r\n        //mHorizontalSpacing \u003d a.getDimension(R.styleable.DilatingDotsProgressBar_dd_horizontalSpacing, 12);\r\n        //a.recycle();\r\n\r\n\r\n        mNumberDots \u003d 3;\r\n        mDotRadius \u003d 8;\r\n        mDotColor \u003d Color.RED;\r\n        mDotEndColor \u003d mDotColor;\r\n        mDotScaleMultiplier \u003d DEFAULT_GROWTH_MULTIPLIER;\r\n        mAnimationDuration \u003d 300;\r\n        mHorizontalSpacing \u003d 12;\r\n\r\n\r\n\r\n        mShouldAnimate \u003d false;\r\n        mAnimateColors \u003d mDotColor !\u003d mDotEndColor;\r\n        calculateMaxRadius();\r\n        calculateWidthBetweenDotCenters();\r\n\r\n        initDots();\r\n        updateDots();\r\n    }\r\n\r\n    @Override\r\n    protected void onSizeChanged(final int w, final int h, final int oldw, final int oldh) {\r\n        super.onSizeChanged(w, h, oldw, oldh);\r\n        if (computeMaxHeight() !\u003d h || w !\u003d computeMaxWidth()) {\r\n            updateDots();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        removeCallbacks();\r\n    }\r\n\r\n    private void removeCallbacks() {\r\n        removeCallbacks(mDelayedHide);\r\n        removeCallbacks(mDelayedShow);\r\n    }\r\n\r\n    public void reset() {\r\n        hideNow();\r\n    }\r\n\r\n    /**\r\n     * Hide the progress view if it is visible. The progress view will not be\r\n     * hidden until it has been shown for at least a minimum show time. If the\r\n     * progress view was not yet visible, cancels showing the progress view.\r\n     */\r\n    @SuppressWarnings (\"unused\")\r\n    public void hide() {\r\n        hide(MIN_SHOW_TIME);\r\n    }\r\n\r\n    public void hide(int delay) {\r\n        mDismissed \u003d true;\r\n        removeCallbacks(mDelayedShow);\r\n        long diff \u003d System.currentTimeMillis() - mStartTime;\r\n        if ((diff \u003e\u003d delay) || (mStartTime \u003d\u003d -1)) {\r\n            mDelayedHide.run();\r\n        } else {\r\n            if ((delay - diff) \u003c\u003d 0) {\r\n                mDelayedHide.run();\r\n            } else {\r\n                postDelayed(mDelayedHide, delay - diff);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show the progress view after waiting for a minimum delay. If\r\n     * during that time, hide() is called, the view is never made visible.\r\n     */\r\n    @SuppressWarnings (\"unused\")\r\n    public void show() {\r\n        show(MIN_DELAY);\r\n    }\r\n\r\n    @SuppressWarnings (\"unused\")\r\n    public void showNow() {\r\n        show(0);\r\n    }\r\n\r\n    @SuppressWarnings (\"unused\")\r\n    public void hideNow() {\r\n        hide(0);\r\n    }\r\n\r\n    public void show(int delay) {\r\n        if (mIsRunning) {\r\n            return;\r\n        }\r\n\r\n        mIsRunning \u003d true;\r\n\r\n        mStartTime \u003d -1;\r\n        mDismissed \u003d false;\r\n        removeCallbacks(mDelayedHide);\r\n\r\n        if (delay \u003d\u003d 0) {\r\n            mDelayedShow.run();\r\n        } else {\r\n            postDelayed(mDelayedShow, delay);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        if (shouldAnimate()) {\r\n            for (DilatingDotDrawable dot : mDrawables) {\r\n                dot.draw(canvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected boolean verifyDrawable(final android.graphics.drawable.Drawable who) {\r\n        if (shouldAnimate()) {\r\n            return mDrawables.contains(who);\r\n        }\r\n        return super.verifyDrawable(who);\r\n    }\r\n\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        setMeasuredDimension((int) computeMaxWidth(), (int) computeMaxHeight());\r\n    }\r\n\r\n    private float computeMaxHeight() {\r\n        return mDotMaxRadius * 2;\r\n    }\r\n\r\n    private float computeMaxWidth() {\r\n        return computeWidth() + ((mDotMaxRadius - mDotRadius) * 2);\r\n    }\r\n\r\n    private float computeWidth() {\r\n        return (((mDotRadius * 2) + mHorizontalSpacing) * mDrawables.size()) - mHorizontalSpacing;\r\n    }\r\n\r\n    private void calculateMaxRadius() {\r\n        mDotMaxRadius \u003d mDotRadius * mDotScaleMultiplier;\r\n    }\r\n\r\n    private void calculateWidthBetweenDotCenters() {\r\n        mWidthBetweenDotCenters \u003d (int) (mDotRadius * 2) + (int) mHorizontalSpacing;\r\n    }\r\n\r\n    private void initDots() {\r\n        mDrawables.clear();\r\n        mAnimations.clear();\r\n        for (int i \u003d 1; i \u003c\u003d mNumberDots; i++) {\r\n            final DilatingDotDrawable dot \u003d new DilatingDotDrawable(mDotColor, mDotRadius, mDotMaxRadius);\r\n            dot.setCallback(this);\r\n            mDrawables.add(dot);\r\n\r\n            final long startDelay \u003d (i - 1) * (int) (START_DELAY_FACTOR * mAnimationDuration);\r\n\r\n            // Sizing\r\n            android.animation.ValueAnimator growAnimator \u003d android.animation.ObjectAnimator.ofFloat(dot, \"radius\", mDotRadius, mDotMaxRadius, mDotRadius);\r\n            growAnimator.setDuration(mAnimationDuration);\r\n            growAnimator.setInterpolator(new android.view.animation.AccelerateDecelerateInterpolator());\r\n            if (i \u003d\u003d mNumberDots) {\r\n                growAnimator.addListener(new android.animation.AnimatorListenerAdapter() {\r\n                    @Override\r\n                    public void onAnimationEnd(android.animation.Animator animation) {\r\n                        if (shouldAnimate()) {\r\n                            startAnimations();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            growAnimator.setStartDelay(startDelay);\r\n\r\n            mAnimations.add(growAnimator);\r\n\r\n            if (mAnimateColors) {\r\n                // Gradient\r\n                android.animation.ValueAnimator colorAnimator \u003d android.animation.ValueAnimator.ofInt(mDotEndColor, mDotColor);\r\n                colorAnimator.setDuration(mAnimationDuration);\r\n                colorAnimator.setEvaluator(new android.animation.ArgbEvaluator());\r\n                colorAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\r\n\r\n                    @Override\r\n                    public void onAnimationUpdate(android.animation.ValueAnimator animator) {\r\n                        dot.setColor((int) animator.getAnimatedValue());\r\n                    }\r\n\r\n                });\r\n                if (i \u003d\u003d mNumberDots) {\r\n                    colorAnimator.addListener(new android.animation.AnimatorListenerAdapter() {\r\n                        @Override\r\n                        public void onAnimationEnd(android.animation.Animator animation) {\r\n                            if (shouldAnimate()) {\r\n                                startAnimations();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                colorAnimator.setStartDelay(startDelay);\r\n\r\n                mAnimations.add(colorAnimator);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updateDots() {\r\n        if (mDotRadius \u003c\u003d 0) {\r\n            mDotRadius \u003d getHeight() / 2 / mDotScaleMultiplier;\r\n        }\r\n\r\n        int left \u003d (int) (mDotMaxRadius - mDotRadius);\r\n        int right \u003d (int) (left + mDotRadius * 2) + 2;\r\n        int top \u003d 0;\r\n        int bottom \u003d (int) (mDotMaxRadius * 2) + 2;\r\n\r\n        for (int i \u003d 0; i \u003c mDrawables.size(); i++) {\r\n            final DilatingDotDrawable dot \u003d mDrawables.get(i);\r\n            dot.setRadius(mDotRadius);\r\n            dot.setBounds(left, top, right, bottom);\r\n            android.animation.ValueAnimator growAnimator \u003d (android.animation.ValueAnimator) mAnimations.get(i);\r\n            growAnimator.setFloatValues(mDotRadius, mDotRadius * mDotScaleMultiplier, mDotRadius);\r\n\r\n            left +\u003d mWidthBetweenDotCenters;\r\n            right +\u003d mWidthBetweenDotCenters;\r\n        }\r\n    }\r\n\r\n    protected void startAnimations() {\r\n        mShouldAnimate \u003d true;\r\n        for (android.animation.Animator anim : mAnimations) {\r\n            anim.start();\r\n        }\r\n    }\r\n\r\n    protected void stopAnimations() {\r\n        mShouldAnimate \u003d false;\r\n        removeCallbacks();\r\n        for (android.animation.Animator anim : mAnimations) {\r\n            anim.cancel();\r\n        }\r\n    }\r\n\r\n    protected boolean shouldAnimate() {\r\n        return mShouldAnimate;\r\n    }\r\n\r\n    // -------------------------------\r\n    // ------ Getters \u0026 Setters ------\r\n    // -------------------------------\r\n\r\n    public void setDotRadius(float radius) {\r\n        reset();\r\n        mDotRadius \u003d radius;\r\n        calculateMaxRadius();\r\n        calculateWidthBetweenDotCenters();\r\n        setupDots();\r\n    }\r\n\r\n    public void setDotSpacing(float horizontalSpacing) {\r\n        reset();\r\n        mHorizontalSpacing \u003d horizontalSpacing;\r\n        calculateWidthBetweenDotCenters();\r\n        setupDots();\r\n    }\r\n\r\n    public void setGrowthSpeed(int growthSpeed) {\r\n        reset();\r\n        mAnimationDuration \u003d growthSpeed;\r\n        setupDots();\r\n    }\r\n\r\n    public void setNumberOfDots(int numDots) {\r\n        reset();\r\n        mNumberDots \u003d numDots;\r\n        setupDots();\r\n    }\r\n\r\n    public void setDotScaleMultiplier(float multiplier) {\r\n        reset();\r\n        mDotScaleMultiplier \u003d multiplier;\r\n        calculateMaxRadius();\r\n        setupDots();\r\n    }\r\n\r\n    public void setDotColor(int color) {\r\n        if (color !\u003d mDotColor) {\r\n            if (mAnimateColors) {\r\n                // Cancel previous animations\r\n                reset();\r\n                mDotColor \u003d color;\r\n                mDotEndColor \u003d color;\r\n                mAnimateColors \u003d false;\r\n\r\n                setupDots();\r\n\r\n            } else {\r\n                mDotColor \u003d color;\r\n                for (DilatingDotDrawable dot : mDrawables) {\r\n                    dot.setColor(mDotColor);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set different start and end colors for dots. This will result in gradient behaviour. In case you want set 1 solid\r\n     * color - use {@link #setDotColor(int)} instead\r\n     *\r\n     * @param startColor starting color of the dot\r\n     * @param endColor   ending color of the dot\r\n     */\r\n    public void setDotColors(int startColor, int endColor) {\r\n        if (mDotColor !\u003d startColor || mDotEndColor !\u003d endColor) {\r\n            if (mAnimateColors) {\r\n                reset();\r\n            }\r\n            mDotColor \u003d startColor;\r\n            mDotEndColor \u003d endColor;\r\n\r\n            mAnimateColors \u003d mDotColor !\u003d mDotEndColor;\r\n\r\n            setupDots();\r\n        }\r\n    }\r\n\r\n    private void setupDots() {\r\n        initDots();\r\n        updateDots();\r\n        showNow();\r\n    }\r\n\r\n    public int getDotGrowthSpeed() {\r\n        return mAnimationDuration;\r\n    }\r\n\r\n    public float getDotRadius() {\r\n        return mDotRadius;\r\n    }\r\n\r\n    public float getHorizontalSpacing() {\r\n        return mHorizontalSpacing;\r\n    }\r\n\r\n    public int getNumberOfDots() {\r\n        return mNumberDots;\r\n    }\r\n\r\n    public float getDotScaleMultiplier() {\r\n        return mDotScaleMultiplier;\r\n    }\r\n}\r\n"},{"name":"Import Export SQL","code":"//Usage :\r\n\r\nSQManager javalibrary \u003d new SQManager(getApplicationContext(), db);\r\njavalibrary.setOnImportListener(new SQManager.ImportListener() {\r\n\t@Override\r\n\tpublic void onSuccess(String message) {\r\n\t\t\r\n\t}\r\n\t@Override\r\n\tpublic void onFailure(Exception exception) {\r\n\t\t\r\n\t}\r\n});\r\njavalibrary.setOnExportListener(new SQManager.ExportListener() {\r\n\t@Override\r\n\tpublic void onSuccess(String message) {\r\n\t\t\r\n\t}\r\n\t@Override\r\n\tpublic void onFailure(Exception exception) {\r\n\t\t\r\n\t}\r\n});\r\n\r\n//Add Class :\r\n\r\npublic static class SQManager extends android.database.sqlite.SQLiteOpenHelper {\r\n    private Context context;\r\n    private String DB_PATH;\r\n    private String DB_NAME;\r\n    public ImportListener importListener;\r\n    public ExportListener exportListener;\r\n    public SQManager(Context context, String DB_NAME) {\r\n        super(context, DB_NAME, null, 1);\r\n        this.context \u003d context;\r\n        this.DB_NAME \u003d DB_NAME;\r\n        DB_PATH \u003d \"/data/data/\" + context.getPackageName() + \"/databases/\";\r\n    }\r\n    public void setOnImportListener(ImportListener importListener) {\r\n        this.importListener \u003d importListener;\r\n    }\r\n    public void setOnExportListener(ExportListener exportListener) {\r\n        this.exportListener \u003d exportListener;\r\n    }\r\n    public boolean isDataBaseExists() {\r\n        java.io.File dbFile \u003d new java.io.File(DB_PATH + DB_NAME);\r\n        return dbFile.exists();\r\n    }\r\n    public void importDataBaseFromAssets() {\r\n        java.io.InputStream myInput \u003d null;\r\n        java.io.OutputStream myOutput \u003d null;\r\n        try {\r\n            this.getReadableDatabase();\r\n            myInput \u003d context.getAssets().open(DB_NAME);\r\n            String outFileName \u003d DB_PATH + DB_NAME;\r\n            myOutput \u003d new java.io.FileOutputStream(outFileName);\r\n            byte[] buffer \u003d new byte[1024];\r\n            int length;\r\n            while ((length \u003d myInput.read(buffer)) \u003e 0) {\r\n                myOutput.write(buffer, 0, length);\r\n            }\r\n            if (importListener !\u003d null)\r\n                importListener.onSuccess(\"Successfully Imported\");\r\n        } catch (Exception e) {\r\n            if (importListener !\u003d null)\r\n                importListener.onFailure(e);\r\n        } finally {\r\n            try {\r\n                myOutput.flush();\r\n                myOutput.close();\r\n                myInput.close();\r\n            } catch (java.io.IOException e) {\r\n                if (importListener !\u003d null)\r\n                    importListener.onFailure(e);\r\n            }\r\n        }\r\n    }\r\n    public void importDataBase(String path) {\r\n        java.io.InputStream myInput \u003d null;\r\n        java.io.OutputStream myOutput \u003d null;\r\n        try {\r\n            this.getReadableDatabase();\r\n            String inFileName \u003d path + DB_NAME;\r\n            myInput \u003d new java.io.FileInputStream(inFileName);\r\n            String outFileName \u003d DB_PATH + DB_NAME;\r\n            myOutput \u003d new java.io.FileOutputStream(outFileName);\r\n            byte[] buffer \u003d new byte[1024];\r\n            int length;\r\n            while ((length \u003d myInput.read(buffer)) \u003e 0) {\r\n                myOutput.write(buffer, 0, length);\r\n            }\r\n            if (importListener !\u003d null)\r\n                importListener.onSuccess(\"Successfully Imported\");\r\n        } catch (Exception e) {\r\n            if (importListener !\u003d null)\r\n                importListener.onFailure(e);\r\n        } finally {\r\n            try {\r\n                myOutput.flush();\r\n                myOutput.close();\r\n                myInput.close();\r\n            } catch (java.io.IOException ioe) {\r\n                if (importListener !\u003d null)\r\n                    importListener.onFailure(ioe);\r\n            }\r\n        }\r\n\r\n    }\r\n    public void exportDataBase(String path) {\r\n        java.io.InputStream myInput \u003d null;\r\n        java.io.OutputStream myOutput \u003d null;\r\n        try {\r\n            String inFileName \u003d DB_PATH + DB_NAME;\r\n            myInput \u003d new java.io.FileInputStream(inFileName);\r\n            String outFileName \u003d path + DB_NAME;\r\n            myOutput \u003d new java.io.FileOutputStream(outFileName);\r\n            byte[] buffer \u003d new byte[1024];\r\n            int length;\r\n            while ((length \u003d myInput.read(buffer)) \u003e 0) {\r\n                myOutput.write(buffer, 0, length);\r\n            }\r\n            if (exportListener !\u003d null)\r\n                exportListener.onSuccess(\"Successfully Exported\");\r\n        } catch (Exception e) {\r\n            if (exportListener !\u003d null)\r\n                exportListener.onFailure(e);\r\n        } finally {\r\n            try {\r\n                myOutput.flush();\r\n                myOutput.close();\r\n                myInput.close();\r\n            } catch (Exception ex) {\r\n                if (exportListener !\u003d null)\r\n                    exportListener.onFailure(ex);\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    public void onCreate(android.database.sqlite.SQLiteDatabase arg0) {\r\n    }\r\n    @Override\r\n    public void onUpgrade(android.database.sqlite.SQLiteDatabase db, int oldVersion, int newVersion) {\r\n    }\r\n    public interface ImportListener {\r\n        void onSuccess(String message);\r\n        void onFailure(Exception exception);\r\n    }\r\n    public interface ExportListener {\r\n        void onSuccess(String message);\r\n        void onFailure(Exception exception);\r\n    }\r\n}"},{"name":"ThreeView","code":"//Create :\r\n\r\nTreeNode root \u003d TreeNode.root();\r\nTreeNode parent \u003d new TreeNode(\"MyParentNode\");\r\nTreeNode child0 \u003d new TreeNode(\"ChildNode0\");\r\nTreeNode child1 \u003d new TreeNode(\"ChildNode1\");\r\nparent.addChildren(child0, child1);\r\nroot.addChild(parent);\r\nAndroidTreeView tView \u003d new AndroidTreeView(this, root);\r\nlinear1.addView(tView.getView());\r\n\r\n//For Learn More : View Tutorial For This Library :^)\r\n\r\n//Add Class :\r\n\r\npublic static class SimpleViewHolder extends TreeNode.BaseNodeViewHolder\u003cObject\u003e {\r\n    public SimpleViewHolder(Context context) {\r\n        super(context);\r\n    }\r\n    @Override\r\n    public View createNodeView(TreeNode node, Object value) {\r\n        final TextView tv \u003d new TextView(context);\r\n        tv.setText(String.valueOf(value));\r\n        return tv;\r\n    }\r\n    @Override\r\n    public void toggle(boolean active) {\r\n    }\r\n}\r\npublic static class TreeNode {\r\n    public static final String NODES_ID_SEPARATOR \u003d \":\";\r\n    private int mId;\r\n    private int mLastId;\r\n    private TreeNode mParent;\r\n    private boolean mSelected;\r\n    private boolean mSelectable \u003d true;\r\n    private final List\u003cTreeNode\u003e children;\r\n    private BaseNodeViewHolder mViewHolder;\r\n    private TreeNodeClickListener mClickListener;\r\n    private TreeNodeLongClickListener mLongClickListener;\r\n    private Object mValue;\r\n    private boolean mExpanded;\r\n    public static TreeNode root() {\r\n        TreeNode root \u003d new TreeNode(null);\r\n        root.setSelectable(false);\r\n        return root;\r\n    }\r\n    private int generateId() {\r\n        return ++mLastId;\r\n    }\r\n    public TreeNode(Object value) {\r\n        children \u003d new ArrayList\u003c\u003e();\r\n        mValue \u003d value;\r\n    }\r\n    public TreeNode addChild(TreeNode childNode) {\r\n        childNode.mParent \u003d this;\r\n        childNode.mId \u003d generateId();\r\n        children.add(childNode);\r\n        return this;\r\n    }\r\n    public TreeNode addChildren(TreeNode... nodes) {\r\n        for (TreeNode n : nodes) {\r\n            addChild(n);\r\n        }\r\n        return this;\r\n    }\r\n    public TreeNode addChildren(Collection\u003cTreeNode\u003e nodes) {\r\n        for (TreeNode n : nodes) {\r\n            addChild(n);\r\n        }\r\n        return this;\r\n    }\r\n    public int deleteChild(TreeNode child) {\r\n        for (int i \u003d 0; i \u003c children.size(); i++) {\r\n            if (child.mId \u003d\u003d children.get(i).mId) {\r\n                children.remove(i);\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    public List\u003cTreeNode\u003e getChildren() {\r\n        return Collections.unmodifiableList(children);\r\n    }\r\n    public int size() {\r\n        return children.size();\r\n    }\r\n    public TreeNode getParent() {\r\n        return mParent;\r\n    }\r\n    public int getId() {\r\n        return mId;\r\n    }\r\n    public boolean isLeaf() {\r\n        return size() \u003d\u003d 0;\r\n    }\r\n    public Object getValue() {\r\n        return mValue;\r\n    }\r\n    public boolean isExpanded() {\r\n        return mExpanded;\r\n    }\r\n    public TreeNode setExpanded(boolean expanded) {\r\n        mExpanded \u003d expanded;\r\n        return this;\r\n    }\r\n    public void setSelected(boolean selected) {\r\n        mSelected \u003d selected;\r\n    }\r\n    public boolean isSelected() {\r\n        return mSelectable \u0026\u0026 mSelected;\r\n    }\r\n    public void setSelectable(boolean selectable) {\r\n        mSelectable \u003d selectable;\r\n    }\r\n    public boolean isSelectable() {\r\n        return mSelectable;\r\n    }\r\n    public String getPath() {\r\n        final StringBuilder path \u003d new StringBuilder();\r\n        TreeNode node \u003d this;\r\n        while (node.mParent !\u003d null) {\r\n            path.append(node.getId());\r\n            node \u003d node.mParent;\r\n            if (node.mParent !\u003d null) {\r\n                path.append(NODES_ID_SEPARATOR);\r\n            }\r\n        }\r\n        return path.toString();\r\n    }\r\n    public int getLevel() {\r\n        int level \u003d 0;\r\n        TreeNode root \u003d this;\r\n        while (root.mParent !\u003d null) {\r\n            root \u003d root.mParent;\r\n            level++;\r\n        }\r\n        return level;\r\n    }\r\n    public boolean isLastChild() {\r\n        if (!isRoot()) {\r\n            int parentSize \u003d mParent.children.size();\r\n            if (parentSize \u003e 0) {\r\n                final List\u003cTreeNode\u003e parentChildren \u003d mParent.children;\r\n                return parentChildren.get(parentSize - 1).mId \u003d\u003d mId;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public TreeNode setViewHolder(BaseNodeViewHolder viewHolder) {\r\n        mViewHolder \u003d viewHolder;\r\n        if (viewHolder !\u003d null) {\r\n            viewHolder.mNode \u003d this;\r\n        }\r\n        return this;\r\n    }\r\n    public TreeNode setClickListener(TreeNodeClickListener listener) {\r\n        mClickListener \u003d listener;\r\n        return this;\r\n    }\r\n    public TreeNodeClickListener getClickListener() {\r\n        return this.mClickListener;\r\n    }\r\n    public TreeNode setLongClickListener(TreeNodeLongClickListener listener) {\r\n        mLongClickListener \u003d listener;\r\n        return this;\r\n    }\r\n    public TreeNodeLongClickListener getLongClickListener() {\r\n        return mLongClickListener;\r\n    }\r\n    public BaseNodeViewHolder getViewHolder() {\r\n        return mViewHolder;\r\n    }\r\n    public boolean isFirstChild() {\r\n        if (!isRoot()) {\r\n            List\u003cTreeNode\u003e parentChildren \u003d mParent.children;\r\n            return parentChildren.get(0).mId \u003d\u003d mId;\r\n        }\r\n        return false;\r\n    }\r\n    public boolean isRoot() {\r\n        return mParent \u003d\u003d null;\r\n    }\r\n    public TreeNode getRoot() {\r\n        TreeNode root \u003d this;\r\n        while (root.mParent !\u003d null) {\r\n            root \u003d root.mParent;\r\n        }\r\n        return root;\r\n    }\r\n    public interface TreeNodeClickListener {\r\n        void onClick(TreeNode node, Object value);\r\n    }\r\n    public interface TreeNodeLongClickListener {\r\n        boolean onLongClick(TreeNode node, Object value);\r\n    }\r\n    public static abstract class BaseNodeViewHolder\u003cE\u003e {\r\n        protected AndroidTreeView tView;\r\n        protected TreeNode mNode;\r\n        private View mView;\r\n        protected int containerStyle;\r\n        protected Context context;\r\n        public BaseNodeViewHolder(Context context) {\r\n            this.context \u003d context;\r\n        }\r\n        public View getView() {\r\n            if (mView !\u003d null) {\r\n                return mView;\r\n            }\r\n            final View nodeView \u003d getNodeView();\r\n            final TreeNodeWrapperView nodeWrapperView \u003d new TreeNodeWrapperView(nodeView.getContext(), getContainerStyle());\r\n            nodeWrapperView.insertNodeView(nodeView);\r\n            mView \u003d nodeWrapperView;\r\n\r\n            return mView;\r\n        }\r\n        public void setTreeViev(AndroidTreeView treeViev) {\r\n            this.tView \u003d treeViev;\r\n        }\r\n        public AndroidTreeView getTreeView() {\r\n            return tView;\r\n        }\r\n        public void setContainerStyle(int style) {\r\n            containerStyle \u003d style;\r\n        }\r\n        public View getNodeView() {\r\n            return createNodeView(mNode, (E) mNode.getValue());\r\n        }\r\n        public ViewGroup getNodeItemsView() {\r\n            return (ViewGroup) getView().findViewById(0x000002);\r\n        }\r\n        public boolean isInitialized() {\r\n            return mView !\u003d null;\r\n        }\r\n        public int getContainerStyle() {\r\n            return containerStyle;\r\n        }\r\n        public abstract View createNodeView(TreeNode node, E value);\r\n        public void toggle(boolean active) {\r\n        }\r\n        public void toggleSelectionMode(boolean editModeEnabled) {\r\n        }\r\n    }\r\n}\r\npublic static class AndroidTreeView {\r\n    private static final String NODES_PATH_SEPARATOR \u003d \";\";\r\n    protected TreeNode mRoot;\r\n    private Context mContext;\r\n    private boolean applyForRoot;\r\n    private int containerStyle \u003d 0;\r\n    private Class\u003c? extends TreeNode.BaseNodeViewHolder\u003e defaultViewHolderClass \u003d SimpleViewHolder.class;\r\n    private TreeNode.TreeNodeClickListener nodeClickListener;\r\n    private TreeNode.TreeNodeLongClickListener nodeLongClickListener;\r\n    private boolean mSelectionModeEnabled;\r\n    private boolean mUseDefaultAnimation \u003d false;\r\n    private boolean use2dScroll \u003d false;\r\n    private boolean enableAutoToggle \u003d true;\r\n    public AndroidTreeView(Context context) {\r\n        mContext \u003d context;\r\n    }\r\n    public void setRoot(TreeNode mRoot) {\r\n        this.mRoot \u003d mRoot;\r\n    }\r\n    public AndroidTreeView(Context context, TreeNode root) {\r\n        mRoot \u003d root;\r\n        mContext \u003d context;\r\n    }\r\n    public void setDefaultAnimation(boolean defaultAnimation) {\r\n        this.mUseDefaultAnimation \u003d defaultAnimation;\r\n    }\r\n    public void setDefaultContainerStyle(int style) {\r\n        setDefaultContainerStyle(style, false);\r\n    }\r\n    public void setDefaultContainerStyle(int style, boolean applyForRoot) {\r\n        containerStyle \u003d style;\r\n        this.applyForRoot \u003d applyForRoot;\r\n    }\r\n    public void setUse2dScroll(boolean use2dScroll) {\r\n        this.use2dScroll \u003d use2dScroll;\r\n    }\r\n    public boolean is2dScrollEnabled() {\r\n        return use2dScroll;\r\n    }\r\n    public void setUseAutoToggle(boolean enableAutoToggle) {\r\n        this.enableAutoToggle \u003d enableAutoToggle;\r\n    }\r\n    public boolean isAutoToggleEnabled() {\r\n        return enableAutoToggle;\r\n    }\r\n    public void setDefaultViewHolder(Class\u003c? extends TreeNode.BaseNodeViewHolder\u003e viewHolder) {\r\n        defaultViewHolderClass \u003d viewHolder;\r\n    }\r\n    public void setDefaultNodeClickListener(TreeNode.TreeNodeClickListener listener) {\r\n        nodeClickListener \u003d listener;\r\n    }\r\n    public void setDefaultNodeLongClickListener(TreeNode.TreeNodeLongClickListener listener) {\r\n        nodeLongClickListener \u003d listener;\r\n    }\r\n    public void expandAll() {\r\n        expandNode(mRoot, true);\r\n    }\r\n    public void collapseAll() {\r\n        for (TreeNode n : mRoot.getChildren()) {\r\n            collapseNode(n, true);\r\n        }\r\n    }\r\n    public View getView(int style) {\r\n        final ViewGroup view;\r\n        if (style \u003e 0) {\r\n            ContextThemeWrapper newContext \u003d new ContextThemeWrapper(mContext, style);\r\n            view \u003d use2dScroll ? new TwoDScrollView(newContext) : new ScrollView(newContext);\r\n        } else {\r\n            view \u003d use2dScroll ? new TwoDScrollView(mContext) : new ScrollView(mContext);\r\n        }\r\n        Context containerContext \u003d mContext;\r\n        if (containerStyle !\u003d 0 \u0026\u0026 applyForRoot) {\r\n            containerContext \u003d new ContextThemeWrapper(mContext, containerStyle);\r\n        }\r\n        final LinearLayout viewTreeItems \u003d new LinearLayout(containerContext, null, containerStyle);\r\n        viewTreeItems.setId(0x000003); //tree_item\r\n        viewTreeItems.setOrientation(LinearLayout.VERTICAL);\r\n        view.addView(viewTreeItems);\r\n        mRoot.setViewHolder(new TreeNode.BaseNodeViewHolder(mContext) {\r\n            @Override\r\n            public View createNodeView(TreeNode node, Object value) {\r\n                return null;\r\n            }\r\n            @Override\r\n            public ViewGroup getNodeItemsView() {\r\n                return viewTreeItems;\r\n            }\r\n        });\r\n        expandNode(mRoot, false);\r\n        return view;\r\n    }\r\n    public View getView() {\r\n        return getView(-1);\r\n    }\r\n    public void expandLevel(int level) {\r\n        for (TreeNode n : mRoot.getChildren()) {\r\n            expandLevel(n, level);\r\n        }\r\n    }\r\n    private void expandLevel(TreeNode node, int level) {\r\n        if (node.getLevel() \u003c\u003d level) {\r\n            expandNode(node, false);\r\n        }\r\n        for (TreeNode n : node.getChildren()) {\r\n            expandLevel(n, level);\r\n        }\r\n    }\r\n    public void expandNode(TreeNode node) {\r\n        expandNode(node, false);\r\n    }\r\n    public void collapseNode(TreeNode node) {\r\n        collapseNode(node, false);\r\n    }\r\n    public String getSaveState() {\r\n        final StringBuilder builder \u003d new StringBuilder();\r\n        getSaveState(mRoot, builder);\r\n        if (builder.length() \u003e 0) {\r\n            builder.setLength(builder.length() - 1);\r\n        }\r\n        return builder.toString();\r\n    }\r\n    public void restoreState(String saveState) {\r\n        if (!TextUtils.isEmpty(saveState)) {\r\n            collapseAll();\r\n            final String[] openNodesArray \u003d saveState.split(NODES_PATH_SEPARATOR);\r\n            final Set\u003cString\u003e openNodes \u003d new HashSet\u003c\u003e(Arrays.asList(openNodesArray));\r\n            restoreNodeState(mRoot, openNodes);\r\n        }\r\n    }\r\n    private void restoreNodeState(TreeNode node, Set\u003cString\u003e openNodes) {\r\n        for (TreeNode n : node.getChildren()) {\r\n            if (openNodes.contains(n.getPath())) {\r\n                expandNode(n);\r\n                restoreNodeState(n, openNodes);\r\n            }\r\n        }\r\n    }\r\n    private void getSaveState(TreeNode root, StringBuilder sBuilder) {\r\n        for (TreeNode node : root.getChildren()) {\r\n            if (node.isExpanded()) {\r\n                sBuilder.append(node.getPath());\r\n                sBuilder.append(NODES_PATH_SEPARATOR);\r\n                getSaveState(node, sBuilder);\r\n            }\r\n        }\r\n    }\r\n    public void toggleNode(TreeNode node) {\r\n        if (node.isExpanded()) {\r\n            collapseNode(node, false);\r\n        } else {\r\n            expandNode(node, false);\r\n        }\r\n\r\n    }\r\n    private void collapseNode(TreeNode node, final boolean includeSubnodes) {\r\n        node.setExpanded(false);\r\n        TreeNode.BaseNodeViewHolder nodeViewHolder \u003d getViewHolderForNode(node);\r\n\r\n        if (mUseDefaultAnimation) {\r\n            collapse(nodeViewHolder.getNodeItemsView());\r\n        } else {\r\n            nodeViewHolder.getNodeItemsView().setVisibility(View.GONE);\r\n        }\r\n        nodeViewHolder.toggle(false);\r\n        if (includeSubnodes) {\r\n            for (TreeNode n : node.getChildren()) {\r\n                collapseNode(n, includeSubnodes);\r\n            }\r\n        }\r\n    }\r\n    private void expandNode(final TreeNode node, boolean includeSubnodes) {\r\n        node.setExpanded(true);\r\n        final TreeNode.BaseNodeViewHolder parentViewHolder \u003d getViewHolderForNode(node);\r\n        parentViewHolder.getNodeItemsView().removeAllViews();\r\n        parentViewHolder.toggle(true);\r\n        for (final TreeNode n : node.getChildren()) {\r\n            addNode(parentViewHolder.getNodeItemsView(), n);\r\n\r\n            if (n.isExpanded() || includeSubnodes) {\r\n                expandNode(n, includeSubnodes);\r\n            }\r\n        }\r\n        if (mUseDefaultAnimation) {\r\n            expand(parentViewHolder.getNodeItemsView());\r\n        } else {\r\n            parentViewHolder.getNodeItemsView().setVisibility(View.VISIBLE);\r\n        }\r\n\r\n    }\r\n    private void addNode(ViewGroup container, final TreeNode n) {\r\n        final TreeNode.BaseNodeViewHolder viewHolder \u003d getViewHolderForNode(n);\r\n        final View nodeView \u003d viewHolder.getView();\r\n        container.addView(nodeView);\r\n        if (mSelectionModeEnabled) {\r\n            viewHolder.toggleSelectionMode(mSelectionModeEnabled);\r\n        }\r\n        nodeView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (n.getClickListener() !\u003d null) {\r\n                    n.getClickListener().onClick(n, n.getValue());\r\n                } else if (nodeClickListener !\u003d null) {\r\n                    nodeClickListener.onClick(n, n.getValue());\r\n                }\r\n                if (enableAutoToggle) {\r\n                    toggleNode(n);\r\n                }\r\n            }\r\n        });\r\n        nodeView.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View view) {\r\n                if (n.getLongClickListener() !\u003d null) {\r\n                    return n.getLongClickListener().onLongClick(n, n.getValue());\r\n                } else if (nodeLongClickListener !\u003d null) {\r\n                    return nodeLongClickListener.onLongClick(n, n.getValue());\r\n                }\r\n                if (enableAutoToggle) {\r\n                    toggleNode(n);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    public void setSelectionModeEnabled(boolean selectionModeEnabled) {\r\n        if (!selectionModeEnabled) {\r\n            deselectAll();\r\n        }\r\n        mSelectionModeEnabled \u003d selectionModeEnabled;\r\n        for (TreeNode node : mRoot.getChildren()) {\r\n            toggleSelectionMode(node, selectionModeEnabled);\r\n        }\r\n\r\n    }\r\n    public \u003cE\u003e List\u003cE\u003e getSelectedValues(Class\u003cE\u003e clazz) {\r\n        List\u003cE\u003e result \u003d new ArrayList\u003c\u003e();\r\n        List\u003cTreeNode\u003e selected \u003d getSelected();\r\n        for (TreeNode n : selected) {\r\n            Object value \u003d n.getValue();\r\n            if (value !\u003d null \u0026\u0026 value.getClass().equals(clazz)) {\r\n                result.add((E) value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    public boolean isSelectionModeEnabled() {\r\n        return mSelectionModeEnabled;\r\n    }\r\n    private void toggleSelectionMode(TreeNode parent, boolean mSelectionModeEnabled) {\r\n        toogleSelectionForNode(parent, mSelectionModeEnabled);\r\n        if (parent.isExpanded()) {\r\n            for (TreeNode node : parent.getChildren()) {\r\n                toggleSelectionMode(node, mSelectionModeEnabled);\r\n            }\r\n        }\r\n    }\r\n    public List\u003cTreeNode\u003e getSelected() {\r\n        if (mSelectionModeEnabled) {\r\n            return getSelected(mRoot);\r\n        } else {\r\n            return new ArrayList\u003c\u003e();\r\n        }\r\n    }\r\n    private List\u003cTreeNode\u003e getSelected(TreeNode parent) {\r\n        List\u003cTreeNode\u003e result \u003d new ArrayList\u003c\u003e();\r\n        for (TreeNode n : parent.getChildren()) {\r\n            if (n.isSelected()) {\r\n                result.add(n);\r\n            }\r\n            result.addAll(getSelected(n));\r\n        }\r\n        return result;\r\n    }\r\n    public void selectAll(boolean skipCollapsed) {\r\n        makeAllSelection(true, skipCollapsed);\r\n    }\r\n    public void deselectAll() {\r\n        makeAllSelection(false, false);\r\n    }\r\n    private void makeAllSelection(boolean selected, boolean skipCollapsed) {\r\n        if (mSelectionModeEnabled) {\r\n            for (TreeNode node : mRoot.getChildren()) {\r\n                selectNode(node, selected, skipCollapsed);\r\n            }\r\n        }\r\n    }\r\n    public void selectNode(TreeNode node, boolean selected) {\r\n        if (mSelectionModeEnabled) {\r\n            node.setSelected(selected);\r\n            toogleSelectionForNode(node, true);\r\n        }\r\n    }\r\n    private void selectNode(TreeNode parent, boolean selected, boolean skipCollapsed) {\r\n        parent.setSelected(selected);\r\n        toogleSelectionForNode(parent, true);\r\n        boolean toContinue \u003d skipCollapsed ? parent.isExpanded() : true;\r\n        if (toContinue) {\r\n            for (TreeNode node : parent.getChildren()) {\r\n                selectNode(node, selected, skipCollapsed);\r\n            }\r\n        }\r\n    }\r\n    private void toogleSelectionForNode(TreeNode node, boolean makeSelectable) {\r\n        TreeNode.BaseNodeViewHolder holder \u003d getViewHolderForNode(node);\r\n        if (holder.isInitialized()) {\r\n            getViewHolderForNode(node).toggleSelectionMode(makeSelectable);\r\n        }\r\n    }\r\n    private TreeNode.BaseNodeViewHolder getViewHolderForNode(TreeNode node) {\r\n        TreeNode.BaseNodeViewHolder viewHolder \u003d node.getViewHolder();\r\n        if (viewHolder \u003d\u003d null) {\r\n            try {\r\n                final Object object \u003d defaultViewHolderClass.getConstructor(Context.class).newInstance(mContext);\r\n                viewHolder \u003d (TreeNode.BaseNodeViewHolder) object;\r\n                node.setViewHolder(viewHolder);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(\"Could not instantiate class \" + defaultViewHolderClass);\r\n            }\r\n        }\r\n        if (viewHolder.getContainerStyle() \u003c\u003d 0) {\r\n            viewHolder.setContainerStyle(containerStyle);\r\n        }\r\n        if (viewHolder.getTreeView() \u003d\u003d null) {\r\n            viewHolder.setTreeViev(this);\r\n        }\r\n        return viewHolder;\r\n    }\r\n    private static void expand(final View v) {\r\n        v.measure(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);\r\n        final int targetHeight \u003d v.getMeasuredHeight();\r\n        v.getLayoutParams().height \u003d 0;\r\n        v.setVisibility(View.VISIBLE);\r\n        Animation a \u003d new Animation() {\r\n            @Override\r\n            protected void applyTransformation(float interpolatedTime, Transformation t) {\r\n                v.getLayoutParams().height \u003d interpolatedTime \u003d\u003d 1\r\n                        ? LinearLayout.LayoutParams.WRAP_CONTENT\r\n                        : (int) (targetHeight * interpolatedTime);\r\n                v.requestLayout();\r\n            }\r\n            @Override\r\n            public boolean willChangeBounds() {\r\n                return true;\r\n            }\r\n        };\r\n        a.setDuration((int) (targetHeight / v.getContext().getResources().getDisplayMetrics().density));\r\n        v.startAnimation(a);\r\n    }\r\n    private static void collapse(final View v) {\r\n        final int initialHeight \u003d v.getMeasuredHeight();\r\n        Animation a \u003d new Animation() {\r\n            @Override\r\n            protected void applyTransformation(float interpolatedTime, Transformation t) {\r\n                if (interpolatedTime \u003d\u003d 1) {\r\n                    v.setVisibility(View.GONE);\r\n                } else {\r\n                    v.getLayoutParams().height \u003d initialHeight - (int) (initialHeight * interpolatedTime);\r\n                    v.requestLayout();\r\n                }\r\n            }\r\n            @Override\r\n            public boolean willChangeBounds() {\r\n                return true;\r\n            }\r\n        };\r\n        a.setDuration((int) (initialHeight / v.getContext().getResources().getDisplayMetrics().density));\r\n        v.startAnimation(a);\r\n    }\r\n    public void addNode(TreeNode parent, final TreeNode nodeToAdd) {\r\n        parent.addChild(nodeToAdd);\r\n        if (parent.isExpanded()) {\r\n            final TreeNode.BaseNodeViewHolder parentViewHolder \u003d getViewHolderForNode(parent);\r\n            addNode(parentViewHolder.getNodeItemsView(), nodeToAdd);\r\n        }\r\n    }\r\n    public void removeNode(TreeNode node) {\r\n        if (node.getParent() !\u003d null) {\r\n            TreeNode parent \u003d node.getParent();\r\n            int index \u003d parent.deleteChild(node);\r\n            if (parent.isExpanded() \u0026\u0026 index \u003e\u003d 0) {\r\n                final TreeNode.BaseNodeViewHolder parentViewHolder \u003d getViewHolderForNode(parent);\r\n                parentViewHolder.getNodeItemsView().removeViewAt(index);\r\n            }\r\n        }\r\n    }\r\n}\r\npublic static class TreeNodeWrapperView extends LinearLayout {\r\n    private LinearLayout nodeItemsContainer;\r\n    private ViewGroup nodeContainer;\r\n    private final int containerStyle;\r\n    public TreeNodeWrapperView(Context context, int containerStyle) {\r\n        super(context);\r\n        this.containerStyle \u003d containerStyle;\r\n        init();\r\n    }\r\n    private void init() {\r\n        setOrientation(LinearLayout.VERTICAL);\r\n        nodeContainer \u003d new RelativeLayout(getContext());\r\n        nodeContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        nodeContainer.setId(0x000001); //node_header\r\n        ContextThemeWrapper newContext \u003d new ContextThemeWrapper(getContext(), containerStyle);\r\n        nodeItemsContainer \u003d new LinearLayout(newContext, null, containerStyle);\r\n        nodeItemsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\r\n        nodeItemsContainer.setId(0x000002);//node_item\r\n        nodeItemsContainer.setOrientation(LinearLayout.VERTICAL);\r\n        nodeItemsContainer.setVisibility(View.GONE);\r\n        addView(nodeContainer);\r\n        addView(nodeItemsContainer);\r\n    }\r\n    public void insertNodeView(View nodeView) {\r\n        nodeContainer.addView(nodeView);\r\n    }\r\n    public ViewGroup getNodeContainer() {\r\n        return nodeContainer;\r\n    }\r\n}\r\npublic static class TwoDScrollView extends FrameLayout {\r\n    static final int ANIMATED_SCROLL_GAP \u003d 250;\r\n    static final float MAX_SCROLL_FACTOR \u003d 0.5f;\r\n    private long mLastScroll;\r\n    private final Rect mTempRect \u003d new Rect();\r\n    private Scroller mScroller;\r\n    private boolean mTwoDScrollViewMovedFocus;\r\n    private float mLastMotionY;\r\n    private float mLastMotionX;\r\n    private boolean mIsLayoutDirty \u003d true;\r\n    private View mChildToScrollTo \u003d null;\r\n    private boolean mIsBeingDragged \u003d false;\r\n    private VelocityTracker mVelocityTracker;\r\n    private int mTouchSlop;\r\n    private int mMinimumVelocity;\r\n    private int mMaximumVelocity;\r\n    public TwoDScrollView(Context context) {\r\n        super(context);\r\n        initTwoDScrollView();\r\n    }\r\n    public TwoDScrollView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initTwoDScrollView();\r\n    }\r\n    public TwoDScrollView(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        initTwoDScrollView();\r\n    }\r\n    @Override\r\n    protected float getTopFadingEdgeStrength() {\r\n        if (getChildCount() \u003d\u003d 0) {\r\n            return 0.0f;\r\n        }\r\n        final int length \u003d getVerticalFadingEdgeLength();\r\n        if (getScrollY() \u003c length) {\r\n            return getScrollY() / (float) length;\r\n        }\r\n        return 1.0f;\r\n    }\r\n    @Override\r\n    protected float getBottomFadingEdgeStrength() {\r\n        if (getChildCount() \u003d\u003d 0) {\r\n            return 0.0f;\r\n        }\r\n        final int length \u003d getVerticalFadingEdgeLength();\r\n        final int bottomEdge \u003d getHeight() - getPaddingBottom();\r\n        final int span \u003d getChildAt(0).getBottom() - getScrollY() - bottomEdge;\r\n        if (span \u003c length) {\r\n            return span / (float) length;\r\n        }\r\n        return 1.0f;\r\n    }\r\n    @Override\r\n    protected float getLeftFadingEdgeStrength() {\r\n        if (getChildCount() \u003d\u003d 0) {\r\n            return 0.0f;\r\n        }\r\n        final int length \u003d getHorizontalFadingEdgeLength();\r\n        if (getScrollX() \u003c length) {\r\n            return getScrollX() / (float) length;\r\n        }\r\n        return 1.0f;\r\n    }\r\n    @Override\r\n    protected float getRightFadingEdgeStrength() {\r\n        if (getChildCount() \u003d\u003d 0) {\r\n            return 0.0f;\r\n        }\r\n        final int length \u003d getHorizontalFadingEdgeLength();\r\n        final int rightEdge \u003d getWidth() - getPaddingRight();\r\n        final int span \u003d getChildAt(0).getRight() - getScrollX() - rightEdge;\r\n        if (span \u003c length) {\r\n            return span / (float) length;\r\n        }\r\n        return 1.0f;\r\n    }\r\n    public int getMaxScrollAmountVertical() {\r\n        return (int) (MAX_SCROLL_FACTOR * getHeight());\r\n    }\r\n    public int getMaxScrollAmountHorizontal() {\r\n        return (int) (MAX_SCROLL_FACTOR * getWidth());\r\n    }\r\n    private void initTwoDScrollView() {\r\n        mScroller \u003d new Scroller(getContext());\r\n        setFocusable(true);\r\n        setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);\r\n        setWillNotDraw(false);\r\n        final ViewConfiguration configuration \u003d ViewConfiguration.get(getContext());\r\n        mTouchSlop \u003d configuration.getScaledTouchSlop();\r\n        mMinimumVelocity \u003d configuration.getScaledMinimumFlingVelocity();\r\n        mMaximumVelocity \u003d configuration.getScaledMaximumFlingVelocity();\r\n    }\r\n    @Override\r\n    public void addView(View child) {\r\n        if (getChildCount() \u003e 0) {\r\n            throw new IllegalStateException(\"TwoDScrollView can host only one direct child\");\r\n        }\r\n        super.addView(child);\r\n    }\r\n    @Override\r\n    public void addView(View child, int index) {\r\n        if (getChildCount() \u003e 0) {\r\n            throw new IllegalStateException(\"TwoDScrollView can host only one direct child\");\r\n        }\r\n        super.addView(child, index);\r\n    }\r\n    @Override\r\n    public void addView(View child, ViewGroup.LayoutParams params) {\r\n        if (getChildCount() \u003e 0) {\r\n            throw new IllegalStateException(\"TwoDScrollView can host only one direct child\");\r\n        }\r\n        super.addView(child, params);\r\n    }\r\n    @Override\r\n    public void addView(View child, int index, ViewGroup.LayoutParams params) {\r\n        if (getChildCount() \u003e 0) {\r\n            throw new IllegalStateException(\"TwoDScrollView can host only one direct child\");\r\n        }\r\n        super.addView(child, index, params);\r\n    }\r\n    private boolean canScroll() {\r\n        View child \u003d getChildAt(0);\r\n        if (child !\u003d null) {\r\n            int childHeight \u003d child.getHeight();\r\n            int childWidth \u003d child.getWidth();\r\n            return (getHeight() \u003c childHeight + getPaddingTop() + getPaddingBottom()) ||\r\n                    (getWidth() \u003c childWidth + getPaddingLeft() + getPaddingRight());\r\n        }\r\n        return false;\r\n    }\r\n    @Override\r\n    public boolean dispatchKeyEvent(KeyEvent event) {\r\n        boolean handled \u003d super.dispatchKeyEvent(event);\r\n        if (handled) {\r\n            return true;\r\n        }\r\n        return executeKeyEvent(event);\r\n    }\r\n    public boolean executeKeyEvent(KeyEvent event) {\r\n        mTempRect.setEmpty();\r\n        if (!canScroll()) {\r\n            if (isFocused()) {\r\n                View currentFocused \u003d findFocus();\r\n                if (currentFocused \u003d\u003d this) currentFocused \u003d null;\r\n                View nextFocused \u003d FocusFinder.getInstance().findNextFocus(this, currentFocused, View.FOCUS_DOWN);\r\n                return nextFocused !\u003d null \u0026\u0026 nextFocused !\u003d this \u0026\u0026 nextFocused.requestFocus(View.FOCUS_DOWN);\r\n            }\r\n            return false;\r\n        }\r\n        boolean handled \u003d false;\r\n        if (event.getAction() \u003d\u003d KeyEvent.ACTION_DOWN) {\r\n            switch (event.getKeyCode()) {\r\n                case KeyEvent.KEYCODE_DPAD_UP:\r\n                    if (!event.isAltPressed()) {\r\n                        handled \u003d arrowScroll(View.FOCUS_UP, false);\r\n                    } else {\r\n                        handled \u003d fullScroll(View.FOCUS_UP, false);\r\n                    }\r\n                    break;\r\n                case KeyEvent.KEYCODE_DPAD_DOWN:\r\n                    if (!event.isAltPressed()) {\r\n                        handled \u003d arrowScroll(View.FOCUS_DOWN, false);\r\n                    } else {\r\n                        handled \u003d fullScroll(View.FOCUS_DOWN, false);\r\n                    }\r\n                    break;\r\n                case KeyEvent.KEYCODE_DPAD_LEFT:\r\n                    if (!event.isAltPressed()) {\r\n                        handled \u003d arrowScroll(View.FOCUS_LEFT, true);\r\n                    } else {\r\n                        handled \u003d fullScroll(View.FOCUS_LEFT, true);\r\n                    }\r\n                    break;\r\n                case KeyEvent.KEYCODE_DPAD_RIGHT:\r\n                    if (!event.isAltPressed()) {\r\n                        handled \u003d arrowScroll(View.FOCUS_RIGHT, true);\r\n                    } else {\r\n                        handled \u003d fullScroll(View.FOCUS_RIGHT, true);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        return handled;\r\n    }\r\n    @Override\r\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\r\n        final int action \u003d ev.getAction();\r\n        if ((action \u003d\u003d MotionEvent.ACTION_MOVE) \u0026\u0026 (mIsBeingDragged)) {\r\n            return true;\r\n        }\r\n        if (!canScroll()) {\r\n            mIsBeingDragged \u003d false;\r\n            return false;\r\n        }\r\n        final float y \u003d ev.getY();\r\n        final float x \u003d ev.getX();\r\n        switch (action) {\r\n            case MotionEvent.ACTION_MOVE:\r\n                final int yDiff \u003d (int) Math.abs(y - mLastMotionY);\r\n                final int xDiff \u003d (int) Math.abs(x - mLastMotionX);\r\n                if (yDiff \u003e mTouchSlop || xDiff \u003e mTouchSlop) {\r\n                    mIsBeingDragged \u003d true;\r\n                }\r\n                break;\r\n            case MotionEvent.ACTION_DOWN:\r\n                mLastMotionY \u003d y;\r\n                mLastMotionX \u003d x;\r\n                mIsBeingDragged \u003d !mScroller.isFinished();\r\n                break;\r\n            case MotionEvent.ACTION_CANCEL:\r\n            case MotionEvent.ACTION_UP:\r\n                mIsBeingDragged \u003d false;\r\n                break;\r\n        }\r\n        return mIsBeingDragged;\r\n    }\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent ev) {\r\n        if (ev.getAction() \u003d\u003d MotionEvent.ACTION_DOWN \u0026\u0026 ev.getEdgeFlags() !\u003d 0) {\r\n            return false;\r\n        }\r\n        if (!canScroll()) {\r\n            return false;\r\n        }\r\n        if (mVelocityTracker \u003d\u003d null) {\r\n            mVelocityTracker \u003d VelocityTracker.obtain();\r\n        }\r\n        mVelocityTracker.addMovement(ev);\r\n        final int action \u003d ev.getAction();\r\n        final float y \u003d ev.getY();\r\n        final float x \u003d ev.getX();\r\n        switch (action) {\r\n            case MotionEvent.ACTION_DOWN:\r\n                if (!mScroller.isFinished()) {\r\n                    mScroller.abortAnimation();\r\n                }\r\n                mLastMotionY \u003d y;\r\n                mLastMotionX \u003d x;\r\n                break;\r\n            case MotionEvent.ACTION_MOVE:\r\n                int deltaX \u003d (int) (mLastMotionX - x);\r\n                int deltaY \u003d (int) (mLastMotionY - y);\r\n                mLastMotionX \u003d x;\r\n                mLastMotionY \u003d y;\r\n                if (deltaX \u003c 0) {\r\n                    if (getScrollX() \u003c 0) {\r\n                        deltaX \u003d 0;\r\n                    }\r\n                } else if (deltaX \u003e 0) {\r\n                    final int rightEdge \u003d getWidth() - getPaddingRight();\r\n                    final int availableToScroll \u003d getChildAt(0).getRight() - getScrollX() - rightEdge;\r\n                    if (availableToScroll \u003e 0) {\r\n                        deltaX \u003d Math.min(availableToScroll, deltaX);\r\n                    } else {\r\n                        deltaX \u003d 0;\r\n                    }\r\n                }\r\n                if (deltaY \u003c 0) {\r\n                    if (getScrollY() \u003c 0) {\r\n                        deltaY \u003d 0;\r\n                    }\r\n                } else if (deltaY \u003e 0) {\r\n                    final int bottomEdge \u003d getHeight() - getPaddingBottom();\r\n                    final int availableToScroll \u003d getChildAt(0).getBottom() - getScrollY() - bottomEdge;\r\n                    if (availableToScroll \u003e 0) {\r\n                        deltaY \u003d Math.min(availableToScroll, deltaY);\r\n                    } else {\r\n                        deltaY \u003d 0;\r\n                    }\r\n                }\r\n                if (deltaY !\u003d 0 || deltaX !\u003d 0)\r\n                    scrollBy(deltaX, deltaY);\r\n                break;\r\n            case MotionEvent.ACTION_UP:\r\n                final VelocityTracker velocityTracker \u003d mVelocityTracker;\r\n                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\r\n                int initialXVelocity \u003d (int) velocityTracker.getXVelocity();\r\n                int initialYVelocity \u003d (int) velocityTracker.getYVelocity();\r\n                if ((Math.abs(initialXVelocity) + Math.abs(initialYVelocity) \u003e mMinimumVelocity) \u0026\u0026 getChildCount() \u003e 0) {\r\n                    fling(-initialXVelocity, -initialYVelocity);\r\n                }\r\n                if (mVelocityTracker !\u003d null) {\r\n                    mVelocityTracker.recycle();\r\n                    mVelocityTracker \u003d null;\r\n                }\r\n        }\r\n        return true;\r\n    }\r\n    private View findFocusableViewInMyBounds(final boolean topFocus, final int top, final boolean leftFocus, final int left, View preferredFocusable) {\r\n        final int verticalFadingEdgeLength \u003d getVerticalFadingEdgeLength() / 2;\r\n        final int topWithoutFadingEdge \u003d top + verticalFadingEdgeLength;\r\n        final int bottomWithoutFadingEdge \u003d top + getHeight() - verticalFadingEdgeLength;\r\n        final int horizontalFadingEdgeLength \u003d getHorizontalFadingEdgeLength() / 2;\r\n        final int leftWithoutFadingEdge \u003d left + horizontalFadingEdgeLength;\r\n        final int rightWithoutFadingEdge \u003d left + getWidth() - horizontalFadingEdgeLength;\r\n        if ((preferredFocusable !\u003d null)\r\n                \u0026\u0026 (preferredFocusable.getTop() \u003c bottomWithoutFadingEdge)\r\n                \u0026\u0026 (preferredFocusable.getBottom() \u003e topWithoutFadingEdge)\r\n                \u0026\u0026 (preferredFocusable.getLeft() \u003c rightWithoutFadingEdge)\r\n                \u0026\u0026 (preferredFocusable.getRight() \u003e leftWithoutFadingEdge)) {\r\n            return preferredFocusable;\r\n        }\r\n        return findFocusableViewInBounds(topFocus, topWithoutFadingEdge, bottomWithoutFadingEdge, leftFocus, leftWithoutFadingEdge, rightWithoutFadingEdge);\r\n    }\r\n    private View findFocusableViewInBounds(boolean topFocus, int top, int bottom, boolean leftFocus, int left, int right) {\r\n        List\u003cView\u003e focusables \u003d getFocusables(View.FOCUS_FORWARD);\r\n        View focusCandidate \u003d null;\r\n        boolean foundFullyContainedFocusable \u003d false;\r\n        int count \u003d focusables.size();\r\n        for (int i \u003d 0; i \u003c count; i++) {\r\n            View view \u003d focusables.get(i);\r\n            int viewTop \u003d view.getTop();\r\n            int viewBottom \u003d view.getBottom();\r\n            int viewLeft \u003d view.getLeft();\r\n            int viewRight \u003d view.getRight();\r\n            if (top \u003c viewBottom \u0026\u0026 viewTop \u003c bottom \u0026\u0026 left \u003c viewRight \u0026\u0026 viewLeft \u003c right) {\r\n                final boolean viewIsFullyContained \u003d (top \u003c viewTop) \u0026\u0026 (viewBottom \u003c bottom) \u0026\u0026 (left \u003c viewLeft) \u0026\u0026 (viewRight \u003c right);\r\n                if (focusCandidate \u003d\u003d null) {\r\n                    focusCandidate \u003d view;\r\n                    foundFullyContainedFocusable \u003d viewIsFullyContained;\r\n                } else {\r\n                    final boolean viewIsCloserToVerticalBoundary \u003d\r\n                            (topFocus \u0026\u0026 viewTop \u003c focusCandidate.getTop()) ||\r\n                                    (!topFocus \u0026\u0026 viewBottom \u003e focusCandidate.getBottom());\r\n                    final boolean viewIsCloserToHorizontalBoundary \u003d\r\n                            (leftFocus \u0026\u0026 viewLeft \u003c focusCandidate.getLeft()) ||\r\n                                    (!leftFocus \u0026\u0026 viewRight \u003e focusCandidate.getRight());\r\n                    if (foundFullyContainedFocusable) {\r\n                        if (viewIsFullyContained \u0026\u0026 viewIsCloserToVerticalBoundary \u0026\u0026 viewIsCloserToHorizontalBoundary) {\r\n                            focusCandidate \u003d view;\r\n                        }\r\n                    } else {\r\n                        if (viewIsFullyContained) {\r\n                            focusCandidate \u003d view;\r\n                            foundFullyContainedFocusable \u003d true;\r\n                        } else if (viewIsCloserToVerticalBoundary \u0026\u0026 viewIsCloserToHorizontalBoundary) {\r\n                            focusCandidate \u003d view;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return focusCandidate;\r\n    }\r\n    public boolean fullScroll(int direction, boolean horizontal) {\r\n        if (!horizontal) {\r\n            boolean down \u003d direction \u003d\u003d View.FOCUS_DOWN;\r\n            int height \u003d getHeight();\r\n            mTempRect.top \u003d 0;\r\n            mTempRect.bottom \u003d height;\r\n            if (down) {\r\n                int count \u003d getChildCount();\r\n                if (count \u003e 0) {\r\n                    View view \u003d getChildAt(count - 1);\r\n                    mTempRect.bottom \u003d view.getBottom();\r\n                    mTempRect.top \u003d mTempRect.bottom - height;\r\n                }\r\n            }\r\n            return scrollAndFocus(direction, mTempRect.top, mTempRect.bottom, 0, 0, 0);\r\n        } else {\r\n            boolean right \u003d direction \u003d\u003d View.FOCUS_DOWN;\r\n            int width \u003d getWidth();\r\n            mTempRect.left \u003d 0;\r\n            mTempRect.right \u003d width;\r\n            if (right) {\r\n                int count \u003d getChildCount();\r\n                if (count \u003e 0) {\r\n                    View view \u003d getChildAt(count - 1);\r\n                    mTempRect.right \u003d view.getBottom();\r\n                    mTempRect.left \u003d mTempRect.right - width;\r\n                }\r\n            }\r\n            return scrollAndFocus(0, 0, 0, direction, mTempRect.top, mTempRect.bottom);\r\n        }\r\n    }\r\n    private boolean scrollAndFocus(int directionY, int top, int bottom, int directionX, int left, int right) {\r\n        boolean handled \u003d true;\r\n        int height \u003d getHeight();\r\n        int containerTop \u003d getScrollY();\r\n        int containerBottom \u003d containerTop + height;\r\n        boolean up \u003d directionY \u003d\u003d View.FOCUS_UP;\r\n        int width \u003d getWidth();\r\n        int containerLeft \u003d getScrollX();\r\n        int containerRight \u003d containerLeft + width;\r\n        boolean leftwards \u003d directionX \u003d\u003d View.FOCUS_UP;\r\n        View newFocused \u003d findFocusableViewInBounds(up, top, bottom, leftwards, left, right);\r\n        if (newFocused \u003d\u003d null) {\r\n            newFocused \u003d this;\r\n        }\r\n        if ((top \u003e\u003d containerTop \u0026\u0026 bottom \u003c\u003d containerBottom) || (left \u003e\u003d containerLeft \u0026\u0026 right \u003c\u003d containerRight)) {\r\n            handled \u003d false;\r\n        } else {\r\n            int deltaY \u003d up ? (top - containerTop) : (bottom - containerBottom);\r\n            int deltaX \u003d leftwards ? (left - containerLeft) : (right - containerRight);\r\n            doScroll(deltaX, deltaY);\r\n        }\r\n        if (newFocused !\u003d findFocus() \u0026\u0026 newFocused.requestFocus(directionY)) {\r\n            mTwoDScrollViewMovedFocus \u003d true;\r\n            mTwoDScrollViewMovedFocus \u003d false;\r\n        }\r\n        return handled;\r\n    }\r\n    public boolean arrowScroll(int direction, boolean horizontal) {\r\n        View currentFocused \u003d findFocus();\r\n        if (currentFocused \u003d\u003d this) currentFocused \u003d null;\r\n        View nextFocused \u003d FocusFinder.getInstance().findNextFocus(this, currentFocused, direction);\r\n        final int maxJump \u003d horizontal ? getMaxScrollAmountHorizontal() : getMaxScrollAmountVertical();\r\n        if (!horizontal) {\r\n            if (nextFocused !\u003d null) {\r\n                nextFocused.getDrawingRect(mTempRect);\r\n                offsetDescendantRectToMyCoords(nextFocused, mTempRect);\r\n                int scrollDelta \u003d computeScrollDeltaToGetChildRectOnScreen(mTempRect);\r\n                doScroll(0, scrollDelta);\r\n                nextFocused.requestFocus(direction);\r\n            } else {\r\n                int scrollDelta \u003d maxJump;\r\n                if (direction \u003d\u003d View.FOCUS_UP \u0026\u0026 getScrollY() \u003c scrollDelta) {\r\n                    scrollDelta \u003d getScrollY();\r\n                } else if (direction \u003d\u003d View.FOCUS_DOWN) {\r\n                    if (getChildCount() \u003e 0) {\r\n                        int daBottom \u003d getChildAt(0).getBottom();\r\n                        int screenBottom \u003d getScrollY() + getHeight();\r\n                        if (daBottom - screenBottom \u003c maxJump) {\r\n                            scrollDelta \u003d daBottom - screenBottom;\r\n                        }\r\n                    }\r\n                }\r\n                if (scrollDelta \u003d\u003d 0) {\r\n                    return false;\r\n                }\r\n                doScroll(0, direction \u003d\u003d View.FOCUS_DOWN ? scrollDelta : -scrollDelta);\r\n            }\r\n        } else {\r\n            if (nextFocused !\u003d null) {\r\n                nextFocused.getDrawingRect(mTempRect);\r\n                offsetDescendantRectToMyCoords(nextFocused, mTempRect);\r\n                int scrollDelta \u003d computeScrollDeltaToGetChildRectOnScreen(mTempRect);\r\n                doScroll(scrollDelta, 0);\r\n                nextFocused.requestFocus(direction);\r\n            } else {\r\n                int scrollDelta \u003d maxJump;\r\n                if (direction \u003d\u003d View.FOCUS_UP \u0026\u0026 getScrollY() \u003c scrollDelta) {\r\n                    scrollDelta \u003d getScrollY();\r\n                } else if (direction \u003d\u003d View.FOCUS_DOWN) {\r\n                    if (getChildCount() \u003e 0) {\r\n                        int daBottom \u003d getChildAt(0).getBottom();\r\n                        int screenBottom \u003d getScrollY() + getHeight();\r\n                        if (daBottom - screenBottom \u003c maxJump) {\r\n                            scrollDelta \u003d daBottom - screenBottom;\r\n                        }\r\n                    }\r\n                }\r\n                if (scrollDelta \u003d\u003d 0) {\r\n                    return false;\r\n                }\r\n                doScroll(direction \u003d\u003d View.FOCUS_DOWN ? scrollDelta : -scrollDelta, 0);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    private void doScroll(int deltaX, int deltaY) {\r\n        if (deltaX !\u003d 0 || deltaY !\u003d 0) {\r\n            smoothScrollBy(deltaX, deltaY);\r\n        }\r\n    }\r\n    public final void smoothScrollBy(int dx, int dy) {\r\n        long duration \u003d AnimationUtils.currentAnimationTimeMillis() - mLastScroll;\r\n        if (duration \u003e ANIMATED_SCROLL_GAP) {\r\n            mScroller.startScroll(getScrollX(), getScrollY(), dx, dy);\r\n            awakenScrollBars(mScroller.getDuration());\r\n            invalidate();\r\n        } else {\r\n            if (!mScroller.isFinished()) {\r\n                mScroller.abortAnimation();\r\n            }\r\n            scrollBy(dx, dy);\r\n        }\r\n        mLastScroll \u003d AnimationUtils.currentAnimationTimeMillis();\r\n    }\r\n    public final void smoothScrollTo(int x, int y) {\r\n        smoothScrollBy(x - getScrollX(), y - getScrollY());\r\n    }\r\n    @Override\r\n    protected int computeVerticalScrollRange() {\r\n        int count \u003d getChildCount();\r\n        return count \u003d\u003d 0 ? getHeight() : (getChildAt(0)).getBottom();\r\n    }\r\n    @Override\r\n    protected int computeHorizontalScrollRange() {\r\n        int count \u003d getChildCount();\r\n        return count \u003d\u003d 0 ? getWidth() : (getChildAt(0)).getRight();\r\n    }\r\n    @Override\r\n    protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec) {\r\n        ViewGroup.LayoutParams lp \u003d child.getLayoutParams();\r\n        int childWidthMeasureSpec;\r\n        int childHeightMeasureSpec;\r\n        childWidthMeasureSpec \u003d getChildMeasureSpec(parentWidthMeasureSpec, getPaddingLeft() + getPaddingRight(), lp.width);\r\n        childHeightMeasureSpec \u003d MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\r\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\r\n    }\r\n    @Override\r\n    protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) {\r\n        final MarginLayoutParams lp \u003d (MarginLayoutParams) child.getLayoutParams();\r\n        final int childWidthMeasureSpec \u003d MeasureSpec.makeMeasureSpec(lp.leftMargin + lp.rightMargin, MeasureSpec.UNSPECIFIED);\r\n        final int childHeightMeasureSpec \u003d MeasureSpec.makeMeasureSpec(lp.topMargin + lp.bottomMargin, MeasureSpec.UNSPECIFIED);\r\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\r\n    }\r\n    @Override\r\n    public void computeScroll() {\r\n        if (mScroller.computeScrollOffset()) {\r\n            int oldX \u003d getScrollX();\r\n            int oldY \u003d getScrollY();\r\n            int x \u003d mScroller.getCurrX();\r\n            int y \u003d mScroller.getCurrY();\r\n            if (getChildCount() \u003e 0) {\r\n                View child \u003d getChildAt(0);\r\n                scrollTo(clamp(x, getWidth() - getPaddingRight() - getPaddingLeft(), child.getWidth()),\r\n                        clamp(y, getHeight() - getPaddingBottom() - getPaddingTop(), child.getHeight()));\r\n            } else {\r\n                scrollTo(x, y);\r\n            }\r\n            if (oldX !\u003d getScrollX() || oldY !\u003d getScrollY()) {\r\n                onScrollChanged(getScrollX(), getScrollY(), oldX, oldY);\r\n            }\r\n            postInvalidate();\r\n        }\r\n    }\r\n    private void scrollToChild(View child) {\r\n        child.getDrawingRect(mTempRect);\r\n        offsetDescendantRectToMyCoords(child, mTempRect);\r\n        int scrollDelta \u003d computeScrollDeltaToGetChildRectOnScreen(mTempRect);\r\n        if (scrollDelta !\u003d 0) {\r\n            scrollBy(0, scrollDelta);\r\n        }\r\n    }\r\n    private boolean scrollToChildRect(Rect rect, boolean immediate) {\r\n        final int delta \u003d computeScrollDeltaToGetChildRectOnScreen(rect);\r\n        final boolean scroll \u003d delta !\u003d 0;\r\n        if (scroll) {\r\n            if (immediate) {\r\n                scrollBy(0, delta);\r\n            } else {\r\n                smoothScrollBy(0, delta);\r\n            }\r\n        }\r\n        return scroll;\r\n    }\r\n    protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect) {\r\n        if (getChildCount() \u003d\u003d 0) return 0;\r\n        int height \u003d getHeight();\r\n        int screenTop \u003d getScrollY();\r\n        int screenBottom \u003d screenTop + height;\r\n        int fadingEdge \u003d getVerticalFadingEdgeLength();\r\n        if (rect.top \u003e 0) {\r\n            screenTop +\u003d fadingEdge;\r\n        }\r\n        if (rect.bottom \u003c getChildAt(0).getHeight()) {\r\n            screenBottom -\u003d fadingEdge;\r\n        }\r\n        int scrollYDelta \u003d 0;\r\n        if (rect.bottom \u003e screenBottom \u0026\u0026 rect.top \u003e screenTop) {\r\n            if (rect.height() \u003e height) {\r\n                scrollYDelta +\u003d (rect.top - screenTop);\r\n            } else {\r\n                scrollYDelta +\u003d (rect.bottom - screenBottom);\r\n            }\r\n            int bottom \u003d getChildAt(0).getBottom();\r\n            int distanceToBottom \u003d bottom - screenBottom;\r\n            scrollYDelta \u003d Math.min(scrollYDelta, distanceToBottom);\r\n        } else if (rect.top \u003c screenTop \u0026\u0026 rect.bottom \u003c screenBottom) {\r\n            if (rect.height() \u003e height) {\r\n                scrollYDelta -\u003d (screenBottom - rect.bottom);\r\n            } else {\r\n                scrollYDelta -\u003d (screenTop - rect.top);\r\n            }\r\n            scrollYDelta \u003d Math.max(scrollYDelta, -getScrollY());\r\n        }\r\n        return scrollYDelta;\r\n    }\r\n    @Override\r\n    public void requestChildFocus(View child, View focused) {\r\n        if (!mTwoDScrollViewMovedFocus) {\r\n            if (!mIsLayoutDirty) {\r\n                scrollToChild(focused);\r\n            } else {\r\n                mChildToScrollTo \u003d focused;\r\n            }\r\n        }\r\n        super.requestChildFocus(child, focused);\r\n    }\r\n    @Override\r\n    protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect) {\r\n        if (direction \u003d\u003d View.FOCUS_FORWARD) {\r\n            direction \u003d View.FOCUS_DOWN;\r\n        } else if (direction \u003d\u003d View.FOCUS_BACKWARD) {\r\n            direction \u003d View.FOCUS_UP;\r\n        }\r\n        final View nextFocus \u003d previouslyFocusedRect \u003d\u003d null ?\r\n                FocusFinder.getInstance().findNextFocus(this, null, direction) :\r\n                FocusFinder.getInstance().findNextFocusFromRect(this,\r\n                        previouslyFocusedRect, direction);\r\n        if (nextFocus \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return nextFocus.requestFocus(direction, previouslyFocusedRect);\r\n    }\r\n    @Override\r\n    public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) {\r\n        rectangle.offset(child.getLeft() - child.getScrollX(), child.getTop() - child.getScrollY());\r\n        return scrollToChildRect(rectangle, immediate);\r\n    }\r\n    @Override\r\n    public void requestLayout() {\r\n        mIsLayoutDirty \u003d true;\r\n        super.requestLayout();\r\n    }\r\n    @Override\r\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\r\n        super.onLayout(changed, l, t, r, b);\r\n        mIsLayoutDirty \u003d false;\r\n        if (mChildToScrollTo !\u003d null \u0026\u0026 isViewDescendantOf(mChildToScrollTo, this)) {\r\n            scrollToChild(mChildToScrollTo);\r\n        }\r\n        mChildToScrollTo \u003d null;\r\n        scrollTo(getScrollX(), getScrollY());\r\n    }\r\n    @Override\r\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n        super.onSizeChanged(w, h, oldw, oldh);\r\n        View currentFocused \u003d findFocus();\r\n        if (null \u003d\u003d currentFocused || this \u003d\u003d currentFocused)\r\n            return;\r\n        currentFocused.getDrawingRect(mTempRect);\r\n        offsetDescendantRectToMyCoords(currentFocused, mTempRect);\r\n        int scrollDeltaX \u003d computeScrollDeltaToGetChildRectOnScreen(mTempRect);\r\n        int scrollDeltaY \u003d computeScrollDeltaToGetChildRectOnScreen(mTempRect);\r\n        doScroll(scrollDeltaX, scrollDeltaY);\r\n    }\r\n    private boolean isViewDescendantOf(View child, View parent) {\r\n        if (child \u003d\u003d parent) {\r\n            return true;\r\n        }\r\n        final ViewParent theParent \u003d child.getParent();\r\n        return (theParent instanceof ViewGroup) \u0026\u0026 isViewDescendantOf((View) theParent, parent);\r\n    }\r\n    public void fling(int velocityX, int velocityY) {\r\n        if (getChildCount() \u003e 0) {\r\n            int height \u003d getHeight() - getPaddingBottom() - getPaddingTop();\r\n            int bottom \u003d getChildAt(0).getHeight();\r\n            int width \u003d getWidth() - getPaddingRight() - getPaddingLeft();\r\n            int right \u003d getChildAt(0).getWidth();\r\n            mScroller.fling(getScrollX(), getScrollY(), velocityX, velocityY, 0, right - width, 0, bottom - height);\r\n            final boolean movingDown \u003d velocityY \u003e 0;\r\n            final boolean movingRight \u003d velocityX \u003e 0;\r\n            View newFocused \u003d findFocusableViewInMyBounds(movingRight, mScroller.getFinalX(), movingDown, mScroller.getFinalY(), findFocus());\r\n            if (newFocused \u003d\u003d null) {\r\n                newFocused \u003d this;\r\n            }\r\n            if (newFocused !\u003d findFocus() \u0026\u0026 newFocused.requestFocus(movingDown ? View.FOCUS_DOWN : View.FOCUS_UP)) {\r\n                mTwoDScrollViewMovedFocus \u003d true;\r\n                mTwoDScrollViewMovedFocus \u003d false;\r\n            }\r\n            awakenScrollBars(mScroller.getDuration());\r\n            invalidate();\r\n        }\r\n    }\r\n    public void scrollTo(int x, int y) {\r\n        if (getChildCount() \u003e 0) {\r\n            View child \u003d getChildAt(0);\r\n            x \u003d clamp(x, getWidth() - getPaddingRight() - getPaddingLeft(), child.getWidth());\r\n            y \u003d clamp(y, getHeight() - getPaddingBottom() - getPaddingTop(), child.getHeight());\r\n            if (x !\u003d getScrollX() || y !\u003d getScrollY()) {\r\n                super.scrollTo(x, y);\r\n            }\r\n        }\r\n    }\r\n    private int clamp(int n, int my, int child) {\r\n        if (my \u003e\u003d child || n \u003c 0) {\r\n            return 0;\r\n        }\r\n        if ((my + n) \u003e child) {\r\n            return child - my;\r\n        }\r\n        return n;\r\n    }\r\n}"},{"name":"Windows7 Progress","code":"//Create Windows 7 ProgressBar :\r\n\r\nWP7ProgressBar wp7 \u003d new WP7ProgressBar(this);\r\nwp7.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\nlinear1.addView(wp7);\r\n\r\n//Create Windows 10 ProgressBar :\r\n\r\nWP10ProgressBar wp10 \u003d new WP10ProgressBar(this);\r\nwp10.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\nlinear1.addView(wp10);\r\n\r\n// Show\r\nwp7.showProgressBar();\r\n\r\n\r\n//Hide\r\nwp7.hideProgressBar();\r\n\r\n//Add Class :\r\n\r\npublic static class WP7ProgressBar extends LinearLayout {\r\n    private static final int INTERVAL_DEF \u003d 150;\r\n    private static final int INDICATOR_COUNT_DEF \u003d 5;\r\n    private static final int ANIMATION_DURATION_DEF \u003d 2200;\r\n    private static final int INDICATOR_HEIGHT_DEF \u003d 5;\r\n    private static final int INDICATOR_RADIUS_DEF \u003d 0;\r\n    private int interval;\r\n    private int animationDuration;\r\n    private int indicatorHeight;\r\n    private int indicatorColor;\r\n    private int indicatorRadius;\r\n    private boolean isShowing \u003d false;\r\n    private ArrayList\u003cWP7Indicator\u003e WP7Indicators;\r\n    private Handler handler;\r\n    private int progressBarCount \u003d 0;\r\n    private ObjectAnimator objectAnimator;\r\n    public WP7ProgressBar(Context context) {\r\n        super(context);\r\n        initialize(null);\r\n    }\r\n    public WP7ProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initialize(attrs);\r\n    }\r\n    public WP7ProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initialize(attrs);\r\n    }\r\n    private void initialize(AttributeSet attrs) {\r\n        this.setGravity(Gravity.CENTER);\r\n        this.setOrientation(HORIZONTAL);\r\n        this.handler \u003d new Handler();\r\n        setAttributes(attrs);\r\n        initializeIndicators();\r\n    }\r\n    private void setAttributes(AttributeSet attributeSet) {\r\n        //TypedArray typedArray \u003d getContext().obtainStyledAttributes(attributeSet, R.styleable.WP7ProgressBar);\r\n        interval \u003d INTERVAL_DEF;\r\n        animationDuration \u003d ANIMATION_DURATION_DEF;\r\n        indicatorHeight \u003d INDICATOR_HEIGHT_DEF;\r\n        indicatorRadius \u003d INDICATOR_RADIUS_DEF;\r\n        indicatorColor \u003d Color.BLUE; //Context.getColor(getContext(), R.color.colorAccent);\r\n        //typedArray.recycle();\r\n    }\r\n    private void showAnimation() {\r\n        for (int i \u003d 0; i \u003c WP7Indicators.size(); i++) {\r\n            WP7Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\r\n        }\r\n    }\r\n    private void initializeIndicators() {\r\n        this.removeAllViews();\r\n        ArrayList\u003cWP7Indicator\u003e WP7Indicators \u003d new ArrayList\u003c\u003e();\r\n        for (int i \u003d 0; i \u003c INDICATOR_COUNT_DEF; i++) {\r\n            WP7Indicator WP7Indicator \u003d new WP7Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius);\r\n            WP7Indicators.add(WP7Indicator);\r\n            this.addView(WP7Indicator);\r\n        }\r\n        this.WP7Indicators \u003d WP7Indicators;\r\n    }\r\n    private void show() {\r\n        if (isShowing)\r\n            return;\r\n        isShowing \u003d true;\r\n        showAnimation();\r\n    }\r\n    private void hide() {\r\n        clearIndicatorsAnimations();\r\n        isShowing \u003d false;\r\n    }\r\n    private void startWholeViewAnimation() {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"translationX\", -200, 200);\r\n        objectAnimator.setInterpolator(new LinearInterpolator());\r\n        objectAnimator.setDuration(animationDuration + (5 * interval));\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\r\n        objectAnimator.start();\r\n    }\r\n    private void hideWholeViewAnimation() {\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n    private void clearIndicatorsAnimations() {\r\n        for (WP7Indicator WP7Indicator : WP7Indicators) {\r\n            WP7Indicator.removeAnim();\r\n        }\r\n    }\r\n    public void showProgressBar() {\r\n        progressBarCount++;\r\n        if (progressBarCount \u003d\u003d 1) {\r\n            handler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    WP7ProgressBar.this.show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public void hideProgressBar() {\r\n        progressBarCount--;\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (progressBarCount \u003d\u003d 0) {\r\n                    WP7ProgressBar.this.hide();\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    public void setInterval(int interval) {\r\n        this.interval \u003d interval;\r\n        initializeIndicators();\r\n    }\r\n    public void setAnimationDuration(int animationDuration) {\r\n        this.animationDuration \u003d animationDuration;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorHeight(int indicatorHeight) {\r\n        this.indicatorHeight \u003d indicatorHeight;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorRadius(int indicatorRadius) {\r\n        this.indicatorRadius \u003d indicatorRadius;\r\n        initializeIndicators();\r\n    }\r\n}\r\n\r\npublic static class WP10ProgressBar extends RelativeLayout {\r\n    private static final int INTERVAL_DEF \u003d 150;\r\n    private static final int INDICATOR_COUNT_DEF \u003d 5;\r\n    private static final int ANIMATION_DURATION_DEF \u003d 1800;\r\n    private static final int INDICATOR_HEIGHT_DEF \u003d 7;\r\n    private static final int INDICATOR_RADIUS_DEF \u003d 0;\r\n    private int interval;\r\n    private int animationDuration;\r\n    private int indicatorHeight;\r\n    private int indicatorColor;\r\n    private int indicatorRadius;\r\n    private boolean isShowing \u003d false;\r\n    private ArrayList\u003cWP10Indicator\u003e wp10Indicators;\r\n    private Handler handler;\r\n    private int progressBarCount \u003d 0;\r\n    public WP10ProgressBar(Context context) {\r\n        super(context);\r\n        initialize(null);\r\n    }\r\n    public WP10ProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initialize(attrs);\r\n    }\r\n    public WP10ProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initialize(attrs);\r\n    }\r\n    private void initialize(AttributeSet attrs) {\r\n        this.setGravity(Gravity.CENTER);\r\n        this.handler \u003d new Handler();\r\n        this.setRotation(-25);\r\n        setAttributes(attrs);\r\n        initializeIndicators();\r\n    }\r\n    private void setAttributes(AttributeSet attributeSet) {\r\n        //TypedArray typedArray \u003d getContext().obtainStyledAttributes(attributeSet, R.styleable.WP10ProgressBar);\r\n        interval \u003d INTERVAL_DEF;\r\n        animationDuration \u003d ANIMATION_DURATION_DEF;\r\n        indicatorHeight \u003d INDICATOR_HEIGHT_DEF;\r\n        indicatorRadius \u003d INDICATOR_RADIUS_DEF;\r\n        indicatorColor \u003d Color.BLUE;\r\n    }\r\n    private void showAnimation() {\r\n        for (int i \u003d 0; i \u003c wp10Indicators.size(); i++) {\r\n            wp10Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\r\n        }\r\n    }\r\n    private void initializeIndicators() {\r\n        this.removeAllViews();\r\n        ArrayList\u003cWP10Indicator\u003e WP10Indicators \u003d new ArrayList\u003c\u003e();\r\n        for (int i \u003d 0; i \u003c INDICATOR_COUNT_DEF; i++) {\r\n            WP10Indicator wp10Indicator \u003d new WP10Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius, i);\r\n            WP10Indicators.add(wp10Indicator);\r\n            this.addView(wp10Indicator);\r\n        }\r\n        this.wp10Indicators \u003d WP10Indicators;\r\n    }\r\n    private void show() {\r\n        if (isShowing)\r\n            return;\r\n        isShowing \u003d true;\r\n        showAnimation();\r\n    }\r\n    private void hide() {\r\n        clearIndicatorsAnimations();\r\n        isShowing \u003d false;\r\n    }\r\n    private void clearIndicatorsAnimations() {\r\n        for (WP10Indicator wp10Indicator : wp10Indicators) {\r\n            wp10Indicator.removeAnim();\r\n        }\r\n    }\r\n    public void showProgressBar() {\r\n        progressBarCount++;\r\n        if (progressBarCount \u003d\u003d 1) {\r\n            handler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    WP10ProgressBar.this.show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public void hideProgressBar() {\r\n        progressBarCount--;\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (progressBarCount \u003d\u003d 0) {\r\n                    WP10ProgressBar.this.hide();\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    public void setInterval(int interval) {\r\n        this.interval \u003d interval;\r\n        initializeIndicators();\r\n    }\r\n    public void setAnimationDuration(int animationDuration) {\r\n        this.animationDuration \u003d animationDuration;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorHeight(int indicatorHeight) {\r\n        this.indicatorHeight \u003d indicatorHeight;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorRadius(int indicatorRadius) {\r\n        this.indicatorRadius \u003d indicatorRadius;\r\n        initializeIndicators();\r\n    }\r\n}\r\n\r\n\r\npublic static class Base10Indicator extends View {\r\n    private int color;\r\n    public Base10Indicator(Context context, int indicatorHeight, int color, int radius) {\r\n        super(context);\r\n        this.color \u003d color;\r\n        initialize(indicatorHeight, radius);\r\n    }\r\n    private void initialize(int indicatorHeight, int radius) {\r\n        this.setBackground(getCube(radius));\r\n        LinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(Utils.px2dp(getContext(), indicatorHeight), Utils.px2dp(getContext(), indicatorHeight));\r\n        this.setLayoutParams(layoutParams);\r\n    }\r\n    private android.graphics.drawable.GradientDrawable getCube(int radius) {\r\n        android.graphics.drawable.GradientDrawable drawable \u003d new android.graphics.drawable.GradientDrawable();\r\n        drawable.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\r\n        drawable.setColor(color);\r\n        drawable.setCornerRadius(Utils.px2dp(getContext(), radius));\r\n        return drawable;\r\n    }\r\n}\r\n\r\npublic static class Utils {\r\n    public static int px2dp(Context context, int px) {\r\n        float scale \u003d context.getResources().getDisplayMetrics().density;\r\n        return (int) (px * scale + 0.5f);\r\n    }\r\n}\r\n\r\nstatic class WP7Indicator extends View {\r\n    private ObjectAnimator objectAnimator;\r\n    private int color;\r\n    public WP7Indicator(Context context, int indicatorHeight, int color, int radius) {\r\n        super(context);\r\n        this.color \u003d color;\r\n        initialize(indicatorHeight, radius);\r\n    }\r\n    private void initialize(int indicatorHeight, int radius) {\r\n        this.setBackground(getCube(radius));\r\n        LinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(Utils.px2dp(getContext(), indicatorHeight), Utils.px2dp(getContext(), indicatorHeight));\r\n        layoutParams.rightMargin \u003d Utils.px2dp(getContext(), (int) (1.5f * indicatorHeight));\r\n        this.setLayoutParams(layoutParams);\r\n        startAnim(0, 0);\r\n        removeAnim();\r\n    }\r\n    private android.graphics.drawable.GradientDrawable getCube(int radius) {\r\n        android.graphics.drawable.GradientDrawable drawable \u003d new android.graphics.drawable.GradientDrawable();\r\n        drawable.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\r\n        drawable.setColor(color);\r\n        drawable.setCornerRadius(Utils.px2dp(getContext(), radius));\r\n        return drawable;\r\n    }\r\n    public void startAnim(long animationDuration, long delay) {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"translationX\", +1000, -1000);\r\n        objectAnimator.setInterpolator(new WPInterpolator());\r\n        objectAnimator.setDuration(animationDuration);\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\r\n        objectAnimator.setStartDelay(delay);\r\n        objectAnimator.start();\r\n    }\r\n    public void removeAnim() {\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n}\r\n\r\npublic static class WP10Indicator extends RelativeLayout {\r\n    private Base10Indicator base10Indicator;\r\n    private ObjectAnimator objectAnimator;\r\n    private int number;\r\n    public WP10Indicator(Context context, int indicatorHeight, int color, int radius, int number) {\r\n        super(context);\r\n        initialize(indicatorHeight, color, radius, number);\r\n    }\r\n    private void initialize(int indicatorHeight, int color, int radius, int number) {\r\n        this.number \u003d number;\r\n        this.base10Indicator \u003d new Base10Indicator(getContext(), indicatorHeight, color, radius);\r\n        RelativeLayout.LayoutParams layoutParams \u003d new LayoutParams(Utils.px2dp(getContext(), indicatorHeight * 8),\r\n                Utils.px2dp(getContext(), indicatorHeight * 8));\r\n        this.setLayoutParams(layoutParams);\r\n        this.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);\r\n        this.addView(base10Indicator);\r\n        startAnim(0, 0);\r\n        removeAnim();\r\n        this.setAlpha(0f);\r\n    }\r\n    public void startAnim(final long animationDuration, final long delay) {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"rotation\", (number * 15), -360 + (number * 15));\r\n        objectAnimator.setInterpolator(new WPInterpolator());\r\n        objectAnimator.setDuration(animationDuration);\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(2);\r\n        objectAnimator.addListener(new android.animation.Animator.AnimatorListener() {\r\n            @Override\r\n            public void onAnimationStart(android.animation.Animator animator) {\r\n                WP10Indicator.this.setAlpha(1f);\r\n                startAlphaAnimation(animationDuration);\r\n            }\r\n            @Override\r\n            public void onAnimationEnd(android.animation.Animator animator) {\r\n                removeAnim();\r\n                startAnim(animationDuration, 0);\r\n            }\r\n            @Override\r\n            public void onAnimationCancel(android.animation.Animator animator) {\r\n            }\r\n            @Override\r\n            public void onAnimationRepeat(android.animation.Animator animator) {\r\n            }\r\n        });\r\n        objectAnimator.setStartDelay(delay);\r\n        objectAnimator.start();\r\n    }\r\n    public void startAlphaAnimation(long animationDuration) {\r\n        this.animate().alpha(0).setDuration(animationDuration / 12).setStartDelay(2 * animationDuration);\r\n    }\r\n    public void removeAnim() {\r\n        this.animate().alpha(0f).setDuration(0).setStartDelay(0);\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n}\r\n\r\npublic static class WPInterpolator implements android.view.animation.Interpolator {\r\n    @Override\r\n    public float getInterpolation(float v) {\r\n        if (v \u003e 0.3f \u0026\u0026 v \u003c 0.70f)\r\n            return (float) ((-(v - 0.5) / 6) + 0.5f);\r\n        return (float) ((-4) * Math.pow(v - 0.5, 3) + 0.5);\r\n    }\r\n}\r\n"},{"name":"Image Compression ","code":"//Create Image Compression\r\n\r\njava.io.File actualFile\u003dnew java.io.File(img);\r\ntry {\r\njava.io.File CodifyImgFile\u003dnew CodifyImg(MainActivity.this).setQuality(10).setMaxWidth(150).setMaxHeight(150).compressToFile(actualFile);\r\nint file_size \u003d Integer.parseInt(String.valueOf(actualFile.length()/1024));\r\nint result_file_size \u003d Integer.parseInt(String.valueOf(CodifyImgFile.length()/1024));\r\nimageview2.setImageBitmap(BitmapFactory.decodeFile(CodifyImgFile.getAbsolutePath()));\r\nBitmap b\u003dnew CodifyImg(MainActivity.this).compressToBitmap(actualFile);\r\ntextview.setText(file_size+\" Kb\");\r\ntextview.setText(result_file_size+\" Kb\");\r\n} catch (Exception e) {\r\n}\r\n\r\n//Add Class :\r\n\r\npublic static class CodifyCompressor {\r\n    private static int height, width, inSampleSize;\r\n    private static String encodedfile;\r\n    public static java.io.File compressImageFile(java.io.File imageFile, int reqHeight, int reqWidth,\r\n                                         String filePath, int quality,\r\n                                         Bitmap.CompressFormat compressFormat, int orientation) throws java.io.IOException {\r\n        java.io.FileOutputStream fileOutputStream \u003d null;\r\n        java.io.File file \u003d new java.io.File(filePath).getParentFile();\r\n        if (!file.exists()) {\r\n            file.mkdirs();\r\n        }\r\n        try {\r\n            fileOutputStream \u003d new java.io.FileOutputStream(filePath);\r\n            decodeBitmapAndCompress(imageFile, reqHeight, reqWidth,orientation)\r\n                    .compress(compressFormat, quality, fileOutputStream);\r\n        } finally {\r\n            if (fileOutputStream !\u003d null) {\r\n                fileOutputStream.flush();\r\n                fileOutputStream.close();\r\n            }\r\n        }\r\n        return new java.io.File(filePath);\r\n    }\r\n    public static Bitmap decodeBitmapAndCompress(java.io.File imageFile, int reqHeight, int reqWidth,int reqOrientation)\r\n            throws java.io.IOException {\r\n        BitmapFactory.Options options \u003d new BitmapFactory.Options();\r\n        options.inJustDecodeBounds \u003d true;\r\n        BitmapFactory.decodeFile(imageFile.getAbsolutePath(), options);\r\n        //Calculating Sample Size\r\n        options.inSampleSize \u003d calculateSampleSize(options, reqHeight, reqWidth);\r\n        options.inJustDecodeBounds \u003d false;\r\n        Bitmap scaledBitmap \u003d BitmapFactory.decodeFile(imageFile.getAbsolutePath(), options);\r\n        android.media.ExifInterface exifInterface;\r\n        exifInterface \u003d new android.media.ExifInterface(imageFile.getAbsolutePath());\r\n        int orientation \u003d exifInterface.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, 0);\r\n        Matrix matrix \u003d new Matrix();\r\n        if (orientation \u003d\u003d 6) {\r\n            matrix.postRotate(90);\r\n        } else if (orientation \u003d\u003d 3) {\r\n            matrix.postRotate(180);\r\n        } else if (orientation \u003d\u003d 8) {\r\n            matrix.postRotate(270);\r\n        }\r\n        if(reqOrientation\u003e0){\r\n            matrix.postRotate(reqOrientation);\r\n        }\r\n        scaledBitmap \u003d Bitmap.createBitmap(scaledBitmap, 0, 0, scaledBitmap.getWidth()\r\n                , scaledBitmap.getHeight(), matrix, true);\r\n        return scaledBitmap;\r\n    }\r\n    private static int calculateSampleSize(BitmapFactory.Options options, int reqHeight, int reqWidth) {\r\n        height \u003d options.outHeight;\r\n        width \u003d options.outWidth;\r\n        inSampleSize \u003d 1;\r\n        int halfHeight \u003d height / 2;\r\n        int halfWidth \u003d width / 2;\r\n        if (height \u003e reqHeight || width \u003e reqWidth) {\r\n            while ((halfHeight / inSampleSize) \u003e\u003d reqHeight \u0026\u0026 (halfWidth / inSampleSize) \u003e\u003d reqWidth) {\r\n                inSampleSize *\u003d 2;\r\n            }\r\n        }\r\n        return inSampleSize;\r\n    }\r\n    public static String getBase64forCompressedImage(java.io.File compressFile){\r\n        java.io.FileInputStream fileInputStreamReader \u003d null;\r\n        byte[] bytes \u003d new byte[(int)compressFile.length()];\r\n        try {\r\n            fileInputStreamReader \u003d new java.io.FileInputStream(compressFile);\r\n            fileInputStreamReader.read(bytes);\r\n            encodedfile \u003d android.util.Base64.encodeToString(bytes,android.util.Base64.DEFAULT);\r\n        } catch (java.io.IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return encodedfile;\r\n    }\r\n}\r\n\r\n\r\n\r\npublic static class OrientationConstants {\r\n    public static final int ORIENTATION_90\u003d90;\r\n    public static final int ORIENTATION_180\u003d180;\r\n    public static final int ORIENTATION_270\u003d270;\r\n}\r\n\r\n\r\npublic static class CodifyImg {\r\n    private int maxWidth \u003d 612;\r\n    private int maxHeight \u003d 816;\r\n    private int quality \u003d 80;\r\n    private int orientation\u003d0;\r\n    private Bitmap.CompressFormat compressFormat \u003d Bitmap.CompressFormat.JPEG;\r\n    String destinationDirectory;\r\n    public CodifyImg(Context context) {\r\n        destinationDirectory \u003d context.getCacheDir().getPath() + java.io.File.separator + \"images\";\r\n    }\r\n    public CodifyImg setMaxWidth(int maxWidth) {\r\n        this.maxWidth \u003d maxWidth;\r\n        return this;\r\n    }\r\n    public CodifyImg setMaxHeight(int maxHeight) {\r\n        this.maxHeight \u003d maxHeight;\r\n        return this;\r\n    }\r\n    public CodifyImg setQuality(int quality) {\r\n        this.quality \u003d quality;\r\n        return this;\r\n    }\r\n    public CodifyImg setOrientation(int orientation){\r\n        this.orientation\u003dorientation;\r\n        return this;\r\n    }\r\n    public CodifyImg setCompressFormat(Bitmap.CompressFormat compressFormat) {\r\n        this.compressFormat \u003d compressFormat;\r\n        return this;\r\n    }\r\n    public Bitmap compressToBitmap(java.io.File imageFile) throws java.io.IOException {\r\n        return CodifyCompressor.decodeBitmapAndCompress(imageFile, maxHeight, maxWidth,orientation);\r\n    }\r\n    public java.io.File compressToFile(java.io.File imageFile) throws java.io.IOException {\r\n        return compressToFile(imageFile, imageFile.getName(),orientation);\r\n    }\r\n    public java.io.File compressToFile(java.io.File imageFile, String fileName,int orientation) throws java.io.IOException {\r\n        return CodifyCompressor.compressImageFile(imageFile, maxHeight, maxWidth,\r\n                destinationDirectory + java.io.File.separator + fileName, quality, compressFormat,orientation);\r\n    }\r\n    public static String getBase64forImage(java.io.File compressFile){\r\n        return CodifyCompressor.getBase64forCompressedImage(compressFile);\r\n    }\r\n    public static Bitmap decodeBase64(String base64){\r\n        byte[] decodedBytes \u003d android.util.Base64.decode(base64, android.util.Base64.DEFAULT);\r\n        Bitmap decodedImage \u003d BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);\r\n        return decodedImage;\r\n    }\r\n}"},{"name":"HTML Builder","code":"//Sample 1 :\r\n\r\nHtmlBuilder html \u003d new HtmlBuilder();\r\nhtml.p(\"Lorem ipsum dolor sit amet, denique detraxit reprimique quo in. Ius dicat omnes mucius cu.\");\r\nhtml.font().color(\"red\").face(\"sans-serif-condensed\").text(\"Red Text\").close();\r\ntextview.setText(html.build());\r\n\r\n\r\n//Sample 2 :\r\n\r\ntextview.setText(buildDemoHtml());\r\n\r\n//Add Private :\r\n\r\n private Spanned buildDemoHtml() {\r\n    HtmlBuilder html \u003d new HtmlBuilder();\r\n    html.h1(\"Example Usage\");\r\n\r\n    html.h3().font(\"cursive\", \"Code:\").close();\r\n    html.font(0xFFCAE682, \"HtmlBuilder\")\r\n        .append(\u0027 \u0027)\r\n        .font(0xFFD4C4A9, \"html\")\r\n        .append(\u0027 \u0027)\r\n        .font(0xFF888888, \"\u003d\")\r\n        .append(\" \")\r\n        .font(0xFF33B5E5, \"new\")\r\n        .append(\" \")\r\n        .font(0xFFCAE682, \"HtmlBuilder\")\r\n        .append(\"()\")\r\n        .br();\r\n    html.font(0xFFD4C4A9, \"html\")\r\n        .append(\".strong(\")\r\n        .font(0xFF95E454, \"\\\"Strong text\\\"\")\r\n        .append(\").br();\")\r\n        .br();\r\n    html.font(0xFFD4C4A9, \"html\")\r\n        .append(\".font(\")\r\n        .font(0xFFCAE682, \"Color\")\r\n        .append(\u0027.\u0027)\r\n        .font(0xFF53DCCD, \"RED\")\r\n        .append(\", \")\r\n        .font(0xFF95E454, \"\\\"This will be red text\\\"\")\r\n        .append(\");\")\r\n        .br();\r\n    html.font(0xFFCAE682, \"textView\")\r\n        .append(\".setText(\")\r\n        .font(0xFFD4C4A9, \"html\")\r\n        .append(\".build());\")\r\n        .close()\r\n        .br();\r\n\r\n    html.h3().font(\"cursive\", \"Result:\").close();\r\n    html.strong(\"Strong text\").br().font(Color.RED, \"This will be red text\");\r\n\r\n    html.h1(\"Supported Tags\");\r\n    html.append(\"\u0026lt;a href\u003d\u0026quot;...\u0026quot;\u0026gt;\").br();\r\n    html.append(\"\u0026lt;b\u0026gt;\").br();\r\n    html.append(\"\u0026lt;big\u0026gt;\").br();\r\n    html.append(\"\u0026lt;blockquote\u0026gt;\").br();\r\n    html.append(\"\u0026lt;br\u0026gt;\").br();\r\n    html.append(\"\u0026lt;cite\u0026gt;\").br();\r\n    html.append(\"\u0026lt;dfn\u0026gt;\").br();\r\n    html.append(\"\u0026lt;div align\u003d\u0026quot;...\u0026quot;\u0026gt;\").br();\r\n    html.append(\"\u0026lt;em\u0026gt;\").br();\r\n    html.append(\"\u0026lt;font color\u003d\u0026quot;...\u0026quot; face\u003d\u0026quot;...\u0026quot;\u0026gt;\").br();\r\n    html.append(\"\u0026lt;h1\u0026gt;\").br();\r\n    html.append(\"\u0026lt;h2\u0026gt;\").br();\r\n    html.append(\"\u0026lt;h3\u0026gt;\").br();\r\n    html.append(\"\u0026lt;h4\u0026gt;\").br();\r\n    html.append(\"\u0026lt;h5\u0026gt;\").br();\r\n    html.append(\"\u0026lt;h6\u0026gt;\").br();\r\n    html.append(\"\u0026lt;i\u0026gt;\").br();\r\n    html.append(\"\u0026lt;img src\u003d\u0026quot;...\u0026quot;\u0026gt;\").br();\r\n    html.append(\"\u0026lt;p\u0026gt;\").br();\r\n    html.append(\"\u0026lt;small\u0026gt;\").br();\r\n    html.append(\"\u0026lt;strike\u0026gt;\").br();\r\n    html.append(\"\u0026lt;strong\u0026gt;\").br();\r\n    html.append(\"\u0026lt;sub\u0026gt;\").br();\r\n    html.append(\"\u0026lt;sup\u0026gt;\").br();\r\n    html.append(\"\u0026lt;tt\u0026gt;\").br();\r\n    html.append(\"\u0026lt;u\u0026gt;\").br();\r\n    html.append(\"\u0026ul;u\u0026gt;\").br();\r\n    html.append(\"\u0026li;u\u0026gt;\").br();\r\n\r\n    html.h1(\"Links\");\r\n    html.p()\r\n        .strong().a(\"https://gymkhana-studio.blogspot.com\", \"Gymkhana Studio\").close()\r\n        .append(\"\u0026nbsp;\u0026nbsp;|\u0026nbsp;\u0026nbsp;\")\r\n        .strong().a(\"https://github.com/GabrielGymkhanaCGN\", \"GitHub\").close()\r\n        .close();\r\n\r\n    return html.build();\r\n  }\r\n\r\n//Create Class :\r\n\r\npublic static class HtmlBuilder {\r\n  private final StringBuilder html \u003d new StringBuilder();\r\n  private final LinkedList\u003cString\u003e tags \u003d new LinkedList\u003c\u003e();\r\n  public HtmlBuilder open(String element, String data) {\r\n    tags.add(element);\r\n    html.append(\u0027\u003c\u0027);\r\n    html.append(element);\r\n    if (data !\u003d null) {\r\n      html.append(\u0027 \u0027).append(data);\r\n    }\r\n    html.append(\u0027\u003e\u0027);\r\n    return this;\r\n  }\r\n  public HtmlBuilder open(String element) {\r\n    return open(element, null);\r\n  }\r\n  public HtmlBuilder close(String element) {\r\n    html.append(\"\u003c/\").append(element).append(\u0027\u003e\u0027);\r\n    for (Iterator\u003cString\u003e iterator \u003d tags.iterator(); iterator.hasNext(); ) {\r\n      if (iterator.next().equals(element)) {\r\n        iterator.remove();\r\n        break;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  public HtmlBuilder close() {\r\n    if (tags.isEmpty()) {\r\n      return this;\r\n    }\r\n    html.append(\"\u003c/\").append(tags.removeLast()).append(\u0027\u003e\u0027);\r\n    return this;\r\n  }\r\n  public HtmlBuilder close(char element) {\r\n    return close(String.valueOf(element));\r\n  }\r\n  public HtmlBuilder append(boolean b) {\r\n    html.append(b);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(char c) {\r\n    html.append(c);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(int i) {\r\n    html.append(i);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(long l) {\r\n    html.append(l);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(float f) {\r\n    html.append(f);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(double d) {\r\n    html.append(d);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(Object obj) {\r\n    html.append(obj);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(String str) {\r\n    html.append(str);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(StringBuffer sb) {\r\n    html.append(sb);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(char[] chars) {\r\n    html.append(chars);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(char[] str, int offset, int len) {\r\n    html.append(str, offset, len);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(CharSequence csq) {\r\n    html.append(csq);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(CharSequence csq, int start, int end) {\r\n    html.append(csq, start, end);\r\n    return this;\r\n  }\r\n  public HtmlBuilder append(Tag tag) {\r\n    html.append(tag.toString());\r\n    return this;\r\n  }\r\n  public HtmlBuilder a(String href, String text) {\r\n    return append(String.format(\"\u003ca href\u003d\\\"%s\\\"\u003e%s\u003c/a\u003e\", href, text));\r\n  }\r\n  public HtmlBuilder b() {\r\n    return open(\"b\");\r\n  }\r\n  public HtmlBuilder b(String text) {\r\n    html.append(\"\u003cb\u003e\").append(text).append(\"\u003c/b\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder big() {\r\n    return open(\"big\");\r\n  }\r\n\r\n  public HtmlBuilder big(String text) {\r\n    html.append(\"\u003cbig\u003e\").append(text).append(\"\u003c/big\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder blockquote() {\r\n    return open(\"blockquote\");\r\n  }\r\n\r\n  public HtmlBuilder blockquote(String text) {\r\n    html.append(\"\u003cblockquote\u003e\").append(text).append(\"\u003c/blockquote\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder br() {\r\n    html.append(\"\u003cbr\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder cite() {\r\n    return open(\"cite\");\r\n  }\r\n\r\n  public HtmlBuilder cite(String text) {\r\n    html.append(\"\u003ccite\u003e\").append(text).append(\"\u003c/cite\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder dfn() {\r\n    return open(\"dfn\");\r\n  }\r\n\r\n  public HtmlBuilder dfn(String text) {\r\n    html.append(\"\u003cdfn\u003e\").append(text).append(\"\u003c/dfn\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder div() {\r\n    return open(\"div\");\r\n  }\r\n\r\n  public HtmlBuilder div(String align) {\r\n    html.append(String.format(\"\u003cdiv align\u003d\\\"%s\\\"\u003e\", align));\r\n    tags.add(\"div\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder em() {\r\n    return open(\"em\");\r\n  }\r\n\r\n  public HtmlBuilder em(String text) {\r\n    html.append(\"\u003cem\u003e\").append(text).append(\"\u003c/em\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public Font font() {\r\n    return new Font(this);\r\n  }\r\n\r\n  public HtmlBuilder font(int color, String text) {\r\n    return font().color(color).text(text).close();\r\n  }\r\n\r\n  public HtmlBuilder font(String face, String text) {\r\n    return font().face(face).text(text).close();\r\n  }\r\n\r\n  public HtmlBuilder h1() {\r\n    return open(\"h1\");\r\n  }\r\n\r\n  public HtmlBuilder h1(String text) {\r\n    html.append(\"\u003ch1\u003e\").append(text).append(\"\u003c/h1\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder h2() {\r\n    return open(\"h2\");\r\n  }\r\n\r\n  public HtmlBuilder h2(String text) {\r\n    html.append(\"\u003ch2\u003e\").append(text).append(\"\u003c/h2\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder h3() {\r\n    return open(\"h3\");\r\n  }\r\n\r\n  public HtmlBuilder h3(String text) {\r\n    html.append(\"\u003ch3\u003e\").append(text).append(\"\u003c/h3\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder h4() {\r\n    return open(\"h4\");\r\n  }\r\n\r\n  public HtmlBuilder h4(String text) {\r\n    html.append(\"\u003ch4\u003e\").append(text).append(\"\u003c/h4\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder h5() {\r\n    return open(\"h5\");\r\n  }\r\n\r\n  public HtmlBuilder h5(String text) {\r\n    html.append(\"\u003ch5\u003e\").append(text).append(\"\u003c/h5\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder h6() {\r\n    return open(\"h6\");\r\n  }\r\n\r\n  public HtmlBuilder h6(String text) {\r\n    html.append(\"\u003ch6\u003e\").append(text).append(\"\u003c/h6\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder i() {\r\n    return open(\"i\");\r\n  }\r\n\r\n  public HtmlBuilder i(String text) {\r\n    html.append(\"\u003ci\u003e\").append(text).append(\"\u003c/i\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public Img img() {\r\n    return new Img(this);\r\n  }\r\n\r\n  public HtmlBuilder img(String src) {\r\n    return img().src(src).close();\r\n  }\r\n\r\n  public HtmlBuilder p() {\r\n    return open(\"p\");\r\n  }\r\n\r\n  public HtmlBuilder p(String text) {\r\n    html.append(\"\u003cp\u003e\").append(text).append(\"\u003c/p\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder small() {\r\n    return open(\"small\");\r\n  }\r\n\r\n  public HtmlBuilder small(String text) {\r\n    html.append(\"\u003csmall\u003e\").append(text).append(\"\u003c/small\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder strike() {\r\n    return open(\"strike\");\r\n  }\r\n\r\n  public HtmlBuilder strike(String text) {\r\n    html.append(\"\u003cstrike\u003e\").append(text).append(\"\u003c/strike\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder strong() {\r\n    return open(\"strong\");\r\n  }\r\n\r\n  public HtmlBuilder strong(String text) {\r\n    html.append(\"\u003cstrong\u003e\").append(text).append(\"\u003c/strong\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder sub() {\r\n    return open(\"sub\");\r\n  }\r\n\r\n  public HtmlBuilder sub(String text) {\r\n    html.append(\"\u003csub\u003e\").append(text).append(\"\u003c/sub\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder sup() {\r\n    return open(\"sup\");\r\n  }\r\n\r\n  public HtmlBuilder sup(String text) {\r\n    html.append(\"\u003csup\u003e\").append(text).append(\"\u003c/sup\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder tt() {\r\n    return open(\"tt\");\r\n  }\r\n\r\n  public HtmlBuilder tt(String text) {\r\n    html.append(\"\u003ctt\u003e\").append(text).append(\"\u003c/tt\u003e\");\r\n    return this;\r\n  }\r\n\r\n  public HtmlBuilder u() {\r\n    return open(\"u\");\r\n  }\r\n\r\n  public HtmlBuilder u(String text) {\r\n    html.append(\"\u003cu\u003e\").append(text).append(\"\u003c/u\u003e\");\r\n    return this;\r\n  }\r\n  public HtmlBuilder ul() {\r\n    return open(\"ul\");\r\n  }\r\n  public HtmlBuilder li() {\r\n    return open(\"li\");\r\n  }\r\n  public HtmlBuilder li(String text) {\r\n    html.append(\"\u003cli\u003e\").append(text).append(\"\u003c/li\u003e\");\r\n    return this;\r\n  }\r\n  public Spanned build(int flags) {\r\n    return Html.fromHtml(html.toString(), flags);\r\n  }\r\n\r\n  public Spanned build() {\r\n    //noinspection deprecation\r\n    return Html.fromHtml(html.toString());\r\n  }\r\n\r\n  @Override public String toString() {\r\n    return html.toString();\r\n  }\r\n\r\n  public static class Tag {\r\n\r\n    final HtmlBuilder builder;\r\n    final String element;\r\n    String separator \u003d \"\";\r\n\r\n    public Tag(HtmlBuilder builder, String element) {\r\n      this.builder \u003d builder;\r\n      this.element \u003d element;\r\n      open();\r\n    }\r\n\r\n    protected void open() {\r\n      builder.append(\u0027\u003c\u0027).append(element).append(\u0027 \u0027);\r\n    }\r\n\r\n    public HtmlBuilder close() {\r\n      return builder.append(\"\u003c/\").append(element).append(\u0027\u003e\u0027);\r\n    }\r\n\r\n    @Override public String toString() {\r\n      return builder.toString();\r\n    }\r\n\r\n  }\r\n\r\n  public static class Font extends Tag {\r\n\r\n    public Font() {\r\n      this(new HtmlBuilder());\r\n    }\r\n\r\n    public Font(HtmlBuilder builder) {\r\n      super(builder, \"font\");\r\n    }\r\n\r\n    public Font size(int size) {\r\n      builder.append(separator).append(\"size\u003d\\\"\").append(size).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Font size(String size) {\r\n      builder.append(separator).append(\"size\u003d\\\"\").append(size).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Font color(int color) {\r\n      return color(String.format(\"#%06X\", (0xFFFFFF \u0026 color)));\r\n    }\r\n\r\n    public Font color(String color) {\r\n      builder.append(separator).append(\"color\u003d\\\"\").append(color).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Font face(String face) {\r\n      builder.append(separator).append(\"face\u003d\\\"\").append(face).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Font text(String text) {\r\n      builder.append(\u0027\u003e\u0027).append(text);\r\n      return this;\r\n    }\r\n\r\n  }\r\n\r\n  public static class Img extends Tag {\r\n\r\n    public Img() {\r\n      this(new HtmlBuilder());\r\n    }\r\n\r\n    public Img(HtmlBuilder builder) {\r\n      super(builder, \"img\");\r\n    }\r\n\r\n    public Img src(String src) {\r\n      builder.append(separator).append(\"src\u003d\\\"\").append(src).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Img alt(String alt) {\r\n      builder.append(separator).append(\"alt\u003d\\\"\").append(alt).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Img height(String height) {\r\n      builder.append(separator).append(\"height\u003d\\\"\").append(height).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Img height(int height) {\r\n      builder.append(separator).append(\"height\u003d\\\"\").append(height).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Img width(String width) {\r\n      builder.append(separator).append(\"width\u003d\\\"\").append(width).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    public Img width(int width) {\r\n      builder.append(separator).append(\"width\u003d\\\"\").append(width).append(\u0027\\\"\u0027);\r\n      separator \u003d \" \";\r\n      return this;\r\n    }\r\n\r\n    @Override public HtmlBuilder close() {\r\n      return builder.append(\u0027\u003e\u0027);\r\n    }\r\n\r\n  }\r\n\r\n}"},{"name":"Youtube to mp3","code":"//Create :\r\n\r\nprogressDialog \u003d new ProgressDialog(MainActivity.this);\r\nprogressDialog.setMessage(\"Downloading\");\r\nprogressDialog.setCanceledOnTouchOutside(false);\r\nprogressDialog.setCancelable(false);\r\n\r\n\r\n//Add Private :\r\n\r\nprivate ProgressDialog progressDialog;\r\npublic void downloadSong(View view) {\r\n\tprogressDialog.show();\r\n\tnew YTubeMp3Service.Builder(MainActivity.this)\r\n\t\t.setDownloadUrl(\"https://youtu.be/nZDGC-tXCo0\")\r\n\t\t.setFolderPath(new java.io.File(Environment.getExternalStorageDirectory(), \"/YTMp3/Downloads\").getPath())\r\n\t\t.setOnDownloadListener(new YTubeMp3Service.Builder.DownloadListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onSuccess(String savedPath) {\r\n\t\t\t\tprogressDialog.dismiss();\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void onDownloadStarted() {\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(Exception e) {\r\n\t\t\t\tprogressDialog.dismiss();\r\n\t\t\t}\r\n\t}).build();\r\n}\r\n\r\n//Add Class :\r\n\r\npublic static class YTubeMp3Service {\r\n    private java.io.File file \u003d null;\r\n    private Builder builder;\r\n    private YTubeMp3Service(Builder mBuilder) {\r\n        builder \u003d mBuilder;\r\n        startDownload(builder.downloadUrl);\r\n    }\r\n    private void startDownload(String link) {\r\n        try {\r\n            if(!isNetworkAvailable()){\r\n                builder.downloadListener.onError(new Exception(\"No Internet Connection\"));\r\n                return;\r\n            }\r\n            String youtubeUrl \u003d \"http://www.youtubeinmp3.com/fetch/?format\u003dJSON\u0026video\u003d%s\";\r\n            okhttp3.Request request \u003d new okhttp3.Request.Builder()\r\n                    .url(String.format(youtubeUrl, link))\r\n                    .build();\r\n            new okhttp3.OkHttpClient().newCall(request).enqueue(new okhttp3.Callback() {\r\n                @Override\r\n                public void onFailure(okhttp3.Call call, java.io.IOException e) {\r\n                    builder.downloadListener.onError(e);\r\n                }\r\n                @Override\r\n                public void onResponse(okhttp3.Call call, okhttp3.Response response) throws java.io.IOException {\r\n                    String stringResponse \u003d response.body().string();\r\n                    builder.downloadListener.onDownloadStarted();\r\n                    Log.v(\"stringResp\", stringResponse);\r\n                    try {\r\n                        org.json.JSONObject jsonObject \u003d new org.json.JSONObject(stringResponse);\r\n                        String downloadLink \u003d jsonObject.getString(\"link\");\r\n                        String downloadTitle \u003d jsonObject.getString(\"title\");\r\n                        saveMp3(downloadLink, downloadTitle);\r\n                    } catch (Exception e) {\r\n                        builder.downloadListener.onError(e);\r\n                    }\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            builder.downloadListener.onError(e);\r\n        }\r\n    }\r\n    private void saveMp3(String link, final String title) {\r\n        try {\r\n            okhttp3.Request request \u003d new okhttp3.Request.Builder()\r\n                    .url(link)\r\n                    .build();\r\n            new okhttp3.OkHttpClient().newCall(request).enqueue(new okhttp3.Callback() {\r\n                @Override\r\n                public void onFailure(okhttp3.Call call, java.io.IOException e) {\r\n                    builder.downloadListener.onError(e);\r\n                }\r\n                @Override\r\n                public void onResponse(okhttp3.Call call, okhttp3.Response response) throws java.io.IOException {\r\n                    String fileName \u003d title.replaceAll(\"[^a-zA-Z]+\", \"\");\r\n                    if (!builder.folder.exists()) {\r\n                        boolean folderCreated \u003d builder.folder.mkdir();\r\n                        Log.v(\"folderCreated\", folderCreated + \"\");\r\n                    }\r\n                    file \u003d new java.io.File(builder.folder.getPath() + \"/\" + fileName + \".mp3\");\r\n                    try {\r\n                        boolean fileCreated \u003d file.createNewFile();\r\n                        Log.v(\"fileCreated\", fileCreated + \"\");\r\n                        okio.BufferedSink sink \u003d okio.Okio.buffer(okio.Okio.sink(file));\r\n                        sink.writeAll(response.body().source());\r\n                        sink.close();\r\n                        builder.downloadListener.onSuccess(file.getPath());\r\n                    } catch (Exception e) {\r\n                        builder.downloadListener.onError(e);\r\n                    }\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            builder.downloadListener.onError(e);\r\n        }\r\n    }\r\n    @SuppressWarnings(\"deprecation\")\r\n    private boolean isNetworkAvailable() {\r\n        boolean status \u003d false;\r\n        try {\r\n            android.net.ConnectivityManager cm \u003d (android.net.ConnectivityManager) builder.activity.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            android.net.NetworkInfo netInfo \u003d cm.getNetworkInfo(0);\r\n\r\n            if (netInfo !\u003d null\r\n                    \u0026\u0026 netInfo.getState() \u003d\u003d android.net.NetworkInfo.State.CONNECTED) {\r\n                status \u003d true;\r\n            } else {\r\n                netInfo \u003d cm.getNetworkInfo(1);\r\n                if (netInfo !\u003d null\r\n                        \u0026\u0026 netInfo.getState() \u003d\u003d android.net.NetworkInfo.State.CONNECTED)\r\n                    status \u003d true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n        return status;\r\n    }\r\n    public static class Builder {\r\n        DownloadListener downloadListener \u003d null;\r\n        java.io.File folder \u003d null;\r\n        String downloadUrl \u003d \"\";\r\n        Activity activity;\r\n        public Builder(Activity mActivity) {\r\n            activity \u003d mActivity;\r\n        }\r\n        public Builder setDownloadUrl(String url) {\r\n            downloadUrl \u003d url;\r\n            return this;\r\n        }\r\n        public Builder setFolderPath(String folderPath) {\r\n            folder \u003d new java.io.File(folderPath);\r\n            return this;\r\n        }\r\n        public Builder setOnDownloadListener(DownloadListener downloadListener) {\r\n            this.downloadListener \u003d downloadListener;\r\n            return this;\r\n        }\r\n        public YTubeMp3Service build() {\r\n            return new YTubeMp3Service(this);\r\n        }\r\n        public interface DownloadListener {\r\n            void onSuccess(String savedPath);\r\n            void onDownloadStarted();\r\n            void onError(Exception e);\r\n        }\r\n    }\r\n}"},{"name":"Wave Drawable ","code":"//Create Drawable :\r\n\r\nfinal WaveDrawable mWaveDrawable \u003d new WaveDrawable(MainActivity.this, R.drawable.chrome_logo);\r\nimageview1.setImageDrawable(mWaveDrawable);\r\nmWaveDrawable.setLevel(4000);\r\nmWaveDrawable.setWaveAmplitude(20);\r\nmWaveDrawable.setWaveLength(200);\r\nmWaveDrawable.setWaveSpeed(5);\r\nmWaveDrawable.setIndeterminate(false);\r\n\r\n//Add Class :\r\n\r\npublic static class WaveDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Animatable, android.animation.ValueAnimator.AnimatorUpdateListener {\r\n\r\n    private static final float WAVE_HEIGHT_FACTOR \u003d 0.2f;\r\n    private static final float WAVE_SPEED_FACTOR \u003d 0.02f;\r\n    private static final int UNDEFINED_VALUE \u003d Integer.MIN_VALUE;\r\n    private android.graphics.drawable.Drawable mDrawable;\r\n    private int mWidth, mHeight;\r\n    private int mWaveHeight \u003d UNDEFINED_VALUE;\r\n    private int mWaveLength \u003d UNDEFINED_VALUE;\r\n    private int mWaveStep \u003d UNDEFINED_VALUE;\r\n    private int mWaveOffset \u003d 0;\r\n    private int mWaveLevel \u003d 0;\r\n    private android.animation.ValueAnimator mAnimator \u003d null;\r\n    private float mProgress \u003d 0.3f;\r\n    private Paint mPaint;\r\n    private Bitmap mMask;\r\n    private Matrix mMatrix \u003d new Matrix();\r\n    private boolean mRunning \u003d false;\r\n    private boolean mIndeterminate \u003d false;\r\n\r\n    private static final PorterDuffXfermode sXfermode \u003d new PorterDuffXfermode(PorterDuff.Mode.DST_IN);\r\n    private static ColorFilter sGrayFilter \u003d new ColorMatrixColorFilter(new float[]{\r\n            0.264F, 0.472F, 0.088F, 0, 0,\r\n            0.264F, 0.472F, 0.088F, 0, 0,\r\n            0.264F, 0.472F, 0.088F, 0, 0,\r\n            0,      0,      0,      1, 0\r\n    });\r\n    private ColorFilter mCurFilter \u003d null;\r\n\r\n    private Choreographer.FrameCallback mFrameCallback \u003d new Choreographer.FrameCallback() {\r\n        @Override\r\n        public void doFrame(long l) {\r\n            invalidateSelf();\r\n            if (mRunning) {\r\n                Choreographer.getInstance().postFrameCallback(this);\r\n            }\r\n        }\r\n    };\r\n\r\n    public WaveDrawable(android.graphics.drawable.Drawable drawable) {\r\n        init(drawable);\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    public WaveDrawable(Context context, int imgRes) {\r\n        android.graphics.drawable.Drawable drawable;\r\n        if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.LOLLIPOP) {\r\n            drawable \u003d context.getDrawable(imgRes);\r\n        } else {\r\n            drawable \u003d context.getResources().getDrawable(imgRes);\r\n        }\r\n\r\n        init(drawable);\r\n    }\r\n\r\n    private void init(android.graphics.drawable.Drawable drawable) {\r\n        mDrawable \u003d drawable;\r\n        mMatrix.reset();\r\n        mPaint \u003d new Paint();\r\n        mPaint.setFilterBitmap(false);\r\n        mPaint.setColor(Color.BLACK);\r\n        mPaint.setXfermode(sXfermode);\r\n\r\n        mWidth \u003d mDrawable.getIntrinsicWidth();\r\n        mHeight \u003d mDrawable.getIntrinsicHeight();\r\n\r\n        if (mWidth \u003e 0 \u0026\u0026 mHeight \u003e 0) {\r\n            mWaveLength \u003d mWidth;\r\n            mWaveHeight \u003d Math.max(8, (int) (mHeight * WAVE_HEIGHT_FACTOR));\r\n            mWaveStep \u003d Math.max(1, (int) (mWidth * WAVE_SPEED_FACTOR));\r\n            updateMask(mWidth, mWaveLength, mWaveHeight);\r\n        }\r\n\r\n        setProgress(0);\r\n        start();\r\n    }\r\n\r\n    /**\r\n     * Set wave move distance (in pixels) in very animation frame\r\n     * @param step distance in pixels\r\n     */\r\n    public void setWaveSpeed(int step) {\r\n        mWaveStep \u003d Math.min(step, mWidth / 2);\r\n    }\r\n\r\n    /**\r\n     * Set wave amplitude (in pixels)\r\n     * @param amplitude\r\n     */\r\n    public void setWaveAmplitude(int amplitude) {\r\n        amplitude \u003d Math.max(1, Math.min(amplitude, mHeight / 2));\r\n        int height \u003d amplitude * 2;\r\n        if (mWaveHeight !\u003d height) {\r\n            mWaveHeight \u003d height;\r\n            updateMask(mWidth, mWaveLength, mWaveHeight);\r\n            invalidateSelf();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set wave length (in pixels)\r\n     * @param length\r\n     */\r\n    public void setWaveLength(int length) {\r\n        length \u003d Math.max(8, Math.min(mWidth * 2, length));\r\n        if (length !\u003d mWaveLength) {\r\n            mWaveLength \u003d length;\r\n            updateMask(mWidth, mWaveLength, mWaveHeight);\r\n            invalidateSelf();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the wave loading in indeterminate mode or not\r\n     * @param indeterminate\r\n     */\r\n    public void setIndeterminate(boolean indeterminate) {\r\n        mIndeterminate \u003d indeterminate;\r\n        if (mIndeterminate) {\r\n            if (mAnimator \u003d\u003d null) {\r\n                mAnimator \u003d getDefaultAnimator();\r\n            }\r\n            mAnimator.addUpdateListener(this);\r\n            mAnimator.start();\r\n        } else {\r\n            if (mAnimator !\u003d null) {\r\n                mAnimator.removeUpdateListener(this);\r\n                mAnimator.cancel();\r\n            }\r\n            setLevel(calculateLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set customised animator for wave loading animation\r\n     * @param animator\r\n     */\r\n    public void setIndeterminateAnimator(android.animation.ValueAnimator animator) {\r\n        if (mAnimator \u003d\u003d animator) {\r\n            return;\r\n        }\r\n\r\n        if (mAnimator !\u003d null) {\r\n            mAnimator.removeUpdateListener(this);\r\n            mAnimator.cancel();\r\n        }\r\n\r\n        mAnimator \u003d animator;\r\n        if (mAnimator !\u003d null) {\r\n            mAnimator.addUpdateListener(this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setBounds(int left, int top, int right, int bottom) {\r\n        super.setBounds(left, top, right, bottom);\r\n        mDrawable.setBounds(left, top, right, bottom);\r\n    }\r\n\r\n    @Override\r\n    protected void onBoundsChange(Rect bounds) {\r\n        super.onBoundsChange(bounds);\r\n        updateBounds(bounds);\r\n    }\r\n\r\n    private void updateBounds(Rect bounds) {\r\n        if (bounds.width() \u003c\u003d 0 || bounds.height() \u003c\u003d 0) {\r\n            return;\r\n        }\r\n\r\n        if (mWidth \u003c 0 || mHeight \u003c 0) {\r\n            mWidth \u003d bounds.width();\r\n            mHeight \u003d bounds.height();\r\n            if (mWaveHeight \u003d\u003d UNDEFINED_VALUE) {\r\n                mWaveHeight \u003d Math.max(8, (int) (mHeight * WAVE_HEIGHT_FACTOR));\r\n            }\r\n\r\n            if (mWaveLength \u003d\u003d UNDEFINED_VALUE) {\r\n                mWaveLength \u003d mWidth;\r\n            }\r\n\r\n            if (mWaveStep \u003d\u003d UNDEFINED_VALUE) {\r\n                mWaveStep \u003d Math.max(1, (int) (mWidth * WAVE_SPEED_FACTOR));\r\n            }\r\n\r\n            updateMask(mWidth, mWaveLength, mWaveHeight);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getIntrinsicHeight() {\r\n        return mHeight;\r\n    }\r\n\r\n    @Override\r\n    public int getIntrinsicWidth() {\r\n        return mWidth;\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas canvas) {\r\n\r\n        mDrawable.setColorFilter(sGrayFilter);\r\n        mDrawable.draw(canvas);\r\n        mDrawable.setColorFilter(mCurFilter);\r\n\r\n        if (mProgress \u003c\u003d 0.001f) {\r\n            return;\r\n        }\r\n\r\n        int sc \u003d canvas.saveLayer(0, 0, mWidth, mHeight, null,\r\n                Canvas.MATRIX_SAVE_FLAG |\r\n                Canvas.CLIP_SAVE_FLAG |\r\n                Canvas.HAS_ALPHA_LAYER_SAVE_FLAG |\r\n                Canvas.FULL_COLOR_LAYER_SAVE_FLAG |\r\n                Canvas.CLIP_TO_LAYER_SAVE_FLAG);\r\n\r\n        if (mWaveLevel \u003e 0) {\r\n            canvas.clipRect(0, mWaveLevel, mWidth, mHeight);\r\n        }\r\n\r\n        mDrawable.draw(canvas);\r\n\r\n        if (mProgress \u003e\u003d 0.999f) {\r\n            return;\r\n        }\r\n\r\n        mWaveOffset +\u003d mWaveStep;\r\n        if (mWaveOffset \u003e mWaveLength) {\r\n            mWaveOffset -\u003d mWaveLength;\r\n        }\r\n\r\n        if (mMask !\u003d null) {\r\n            mMatrix.setTranslate(-mWaveOffset, mWaveLevel);\r\n            canvas.drawBitmap(mMask, mMatrix, mPaint);\r\n        }\r\n\r\n        canvas.restoreToCount(sc);\r\n    }\r\n\r\n    @Override\r\n    protected boolean onLevelChange(int level) {\r\n        setProgress(level / 10000f);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void setAlpha(int i) {\r\n        mDrawable.setAlpha(i);\r\n    }\r\n\r\n    @Override\r\n    public void setColorFilter(ColorFilter colorFilter) {\r\n        mCurFilter \u003d colorFilter;\r\n        invalidateSelf();\r\n    }\r\n\r\n    @Override\r\n    public int getOpacity() {\r\n        return PixelFormat.TRANSLUCENT;\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        mRunning \u003d true;\r\n        Choreographer.getInstance().postFrameCallback(mFrameCallback);\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        mRunning \u003d false;\r\n        Choreographer.getInstance().removeFrameCallback(mFrameCallback);\r\n    }\r\n\r\n    @Override\r\n    public boolean isRunning() {\r\n        return mRunning;\r\n    }\r\n\r\n    @Override\r\n    public void onAnimationUpdate(android.animation.ValueAnimator animation) {\r\n        if (mIndeterminate) {\r\n            setProgress(animation.getAnimatedFraction());\r\n            if (!mRunning) {\r\n                invalidateSelf();\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean isIndeterminate() {\r\n        return mIndeterminate;\r\n    }\r\n\r\n    private android.animation.ValueAnimator getDefaultAnimator() {\r\n        android.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 1);\r\n        animator.setInterpolator(new android.view.animation.DecelerateInterpolator());\r\n        animator.setRepeatMode(android.animation.ValueAnimator.RESTART);\r\n        animator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\r\n        animator.setDuration(5000);\r\n        return animator;\r\n    }\r\n\r\n    private void setProgress(float progress) {\r\n        mProgress \u003d progress;\r\n        mWaveLevel \u003d mHeight - (int)((mHeight + mWaveHeight) * mProgress);\r\n        invalidateSelf();\r\n    }\r\n\r\n    private int calculateLevel() {\r\n        return (mHeight - mWaveLevel) * 10000 / (mHeight + mWaveHeight);\r\n    }\r\n\r\n    private void updateMask(int width, int length, int height) {\r\n        if (width \u003c\u003d 0 || length \u003c\u003d 0 || height \u003c\u003d 0) {\r\n            //showMessage(\"updateMask: size must \u003e 0\");\r\n            mMask \u003d null;\r\n            return;\r\n        }\r\n\r\n\r\n        final int count \u003d (int) Math.ceil((width + length) / (float)length);\r\n\r\n        Bitmap bm \u003d Bitmap.createBitmap(length * count, height, Bitmap.Config.ARGB_8888);\r\n        Canvas c \u003d new Canvas(bm);\r\n        Paint p \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\r\n\r\n        int amplitude \u003d height / 2;\r\n        Path path \u003d new Path();\r\n        path.moveTo(0, amplitude);\r\n\r\n        final float stepX \u003d length / 4f;\r\n        float x \u003d 0;\r\n        float y \u003d -amplitude;\r\n        for (int i \u003d 0; i \u003c count * 2; i++) {\r\n            x +\u003d stepX;\r\n            path.quadTo(x, y, x+stepX, amplitude);\r\n            x +\u003d stepX;\r\n            y \u003d bm.getHeight() - y;\r\n        }\r\n        path.lineTo(bm.getWidth(), height);\r\n        path.lineTo(0, height);\r\n        path.close();\r\n\r\n        c.drawPath(path, p);\r\n\r\n        mMask \u003d bm;\r\n    }\r\n}"},{"name":"Smooth Progressbar ","code":"//Create SmoothProgressBar\r\n\r\nprog \u003d new SmoothProgressBar(this, null, android.R.attr.progressBarStyleHorizontal);\r\nprog.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,  LinearLayout.LayoutParams.WRAP_CONTENT));\r\nprog.setMax(10000);\r\nlinear1.addView(prog);\r\n\r\n//Normal\r\n\r\nprog.setPercent(getIncreasePercent());\r\n\t\t\r\n//Smooth\r\n\r\nprog.setSmoothPercent(getIncreasePercent());\r\n\t\t\r\n//Smoothie\r\n\r\nprog.setSmoothPercent(getIncreasePercent(),getDuration());\r\n\t\t\r\n//Reset\r\n\r\nprog.setPercent(0);\r\n\t\r\n//Add Private :\r\n\r\nprivate SmoothProgressBar prog;\r\nprivate float getIncreasePercent() {\r\n\tfloat targetPercent \u003d prog.getPercent() + 0.1f;\r\n\treturn Math.min(1, targetPercent);\r\n}\r\nprivate int getDuration() {\r\n\treturn seekbar1.getProgress()/*10ms*/ * 100;\r\n}\r\n\r\n//Add Class :\r\n\r\npublic static class SmoothHandler extends Handler {\r\n    final java.lang.ref.WeakReference\u003cISmoothTarget\u003e targetWeakReference;\r\n    private float aimPercent;\r\n    private float minInternalPercent \u003d 0.03f; // 3%\r\n    private float smoothInternalPercent \u003d 0.01f; // 1%\r\n    private int smoothIncreaseDelayMillis \u003d 1; // 1ms\r\n    private final String TAG \u003d \"SmoothHandler\";\r\n    public static boolean NEED_LOG \u003d false;\r\n    public float getMinInternalPercent() {\r\n        return minInternalPercent;\r\n    }\r\n    public void setMinInternalPercent(float minInternalPercent) {\r\n        junit.framework.Assert.assertTrue(\"the min internal percent must more than 0\", minInternalPercent \u003e 0);\r\n        junit.framework.Assert.assertTrue(\"the min internal percent must less than 1\", minInternalPercent \u003c\u003d 1);\r\n        junit.framework.Assert.assertTrue(\"the min internal percent must more than the smooth internal percent\",\r\n                minInternalPercent \u003e this.smoothInternalPercent);\r\n        this.minInternalPercent \u003d minInternalPercent;\r\n    }\r\n    public float getSmoothInternalPercent() {\r\n        return smoothInternalPercent;\r\n    }\r\n    public void setSmoothInternalPercent(float smoothInternalPercent) {\r\n        junit.framework.Assert.assertTrue(\"the smooth internal percent must more than 0\", minInternalPercent \u003e 0);\r\n        junit.framework.Assert.assertTrue(\"the smooth internal percent must less than 0.5\", minInternalPercent \u003c 0.5);\r\n        junit.framework.Assert.assertTrue(\"the smooth internal percent must less than the min internal percent\",\r\n                smoothInternalPercent \u003c this.minInternalPercent);\r\n        this.smoothInternalPercent \u003d smoothInternalPercent;\r\n    }\r\n    public int getSmoothIncreaseDelayMillis() {\r\n        return smoothIncreaseDelayMillis;\r\n    }\r\n    public void setSmoothIncreaseDelayMillis(int smoothIncreaseDelayMillis) {\r\n        junit.framework.Assert.assertTrue(\"the delay of increase duration must more than 0\", minInternalPercent \u003e 0);\r\n        this.smoothIncreaseDelayMillis \u003d smoothIncreaseDelayMillis;\r\n    }\r\n    public SmoothHandler(java.lang.ref.WeakReference\u003cISmoothTarget\u003e targetWeakReference) {\r\n        this(targetWeakReference, Looper.getMainLooper());\r\n    }\r\n    public SmoothHandler(java.lang.ref.WeakReference\u003cISmoothTarget\u003e targetWeakReference, Looper looper) {\r\n        super(looper);\r\n        this.targetWeakReference \u003d targetWeakReference;\r\n        this.aimPercent \u003d targetWeakReference.get().getPercent();\r\n        clear();\r\n    }\r\n    @Override\r\n    public void handleMessage(Message msg) {\r\n        super.handleMessage(msg);\r\n        if (this.targetWeakReference \u003d\u003d null || this.targetWeakReference.get() \u003d\u003d null) {\r\n            return;\r\n        }\r\n        final ISmoothTarget target \u003d targetWeakReference.get();\r\n        final float currentPercent \u003d target.getPercent();\r\n        final float desiredPercentDelta \u003d calculatePercent(currentPercent);\r\n        setPercent2Target(Math.min(currentPercent + desiredPercentDelta, aimPercent));\r\n        final float realPercentDelta \u003d target.getPercent() - currentPercent;\r\n        if (target.getPercent() \u003e\u003d this.aimPercent || target.getPercent() \u003e\u003d 1 ||\r\n                (target.getPercent() \u003d\u003d 0 \u0026\u0026 this.aimPercent \u003d\u003d 0)) {\r\n            if (NEED_LOG) {\r\n                Log.d(TAG, String.format(\"finish aimPercent(%f) durationMillis(%d)\",\r\n                        this.aimPercent, this.tempDurationMillis));\r\n            }\r\n            clear();\r\n            return;\r\n        }\r\n        sendEmptyMessageDelayed(0, calculateDelay(realPercentDelta, desiredPercentDelta));\r\n    }\r\n    private void clear() {\r\n        resetTempDelay();\r\n        this.ignoreCommit \u003d false;\r\n        removeMessages(0);\r\n    }\r\n    private boolean ignoreCommit \u003d false;\r\n    public void commitPercent(float percent) {\r\n        if (this.ignoreCommit) {\r\n            this.ignoreCommit \u003d false;\r\n            return;\r\n        }\r\n        this.aimPercent \u003d percent;\r\n    }\r\n    private void setPercent2Target(final float percent) {\r\n        if (targetWeakReference \u003d\u003d null || targetWeakReference.get() \u003d\u003d null) {\r\n            return;\r\n        }\r\n        this.ignoreCommit \u003d true;\r\n        targetWeakReference.get().setPercent(percent);\r\n        this.ignoreCommit \u003d false;\r\n    }\r\n    public void loopSmooth(float percent) {\r\n        loopSmooth(percent, -1);\r\n    }\r\n    public void loopSmooth(float percent, long durationMillis) {\r\n        if (this.targetWeakReference \u003d\u003d null || this.targetWeakReference.get() \u003d\u003d null) {\r\n            return;\r\n        }\r\n        if (NEED_LOG) {\r\n            Log.d(TAG,\r\n                    String.format(\"start loopSmooth lastAimPercent(%f), aimPercent(%f)\" +\r\n                            \" durationMillis(%d)\", aimPercent, percent, durationMillis));\r\n        }\r\n        final ISmoothTarget target \u003d targetWeakReference.get();\r\n        setPercent2Target(this.aimPercent);\r\n        clear();\r\n        this.aimPercent \u003d percent;\r\n        if (this.aimPercent - target.getPercent() \u003e minInternalPercent) {\r\n            if (durationMillis \u003e\u003d 0) {\r\n                tempStartTimestamp \u003d SystemClock.uptimeMillis();\r\n                tempDurationMillis \u003d durationMillis;\r\n                tempRemainDurationMillis \u003d durationMillis;\r\n            }\r\n            sendEmptyMessage(0);\r\n        } else {\r\n            setPercent2Target(percent);\r\n        }\r\n    }\r\n    private void resetTempDelay() {\r\n        tempLastConsumeMillis \u003d smoothIncreaseDelayMillis;\r\n        tempStartTimestamp \u003d -1;\r\n        tempDurationMillis \u003d -1;\r\n        tempRemainDurationMillis \u003d -1;\r\n        tempWarnedAccuracyProblem \u003d false;\r\n    }\r\n    private float calculatePercent(final float currentPercent) {\r\n        if (tempDurationMillis \u003c 0) {\r\n            return smoothInternalPercent;\r\n        }\r\n        float internalPercent;\r\n        final long usedDuration \u003d SystemClock.uptimeMillis() - tempStartTimestamp;\r\n        final long lastRemainDurationMillis \u003d tempRemainDurationMillis;\r\n        tempRemainDurationMillis \u003d tempDurationMillis - usedDuration;\r\n        tempLastConsumeMillis \u003d Math.max(lastRemainDurationMillis - tempRemainDurationMillis, 1);\r\n        final long splitByDelay \u003d Math.max(tempRemainDurationMillis / tempLastConsumeMillis, 1);\r\n        final float percentDelta \u003d this.aimPercent - currentPercent;\r\n        internalPercent \u003d percentDelta / splitByDelay;\r\n        return internalPercent;\r\n    }\r\n    private long calculateDelay(final float realPercentDelta, final float desiredPercentDelta) {\r\n        if (tempDurationMillis \u003c 0) {\r\n            return smoothIncreaseDelayMillis;\r\n        }\r\n        if (realPercentDelta - desiredPercentDelta \u003c\u003d ALLOWED_PRECISION_ERROR) {\r\n            return smoothIncreaseDelayMillis;\r\n        }\r\n        if (!tempWarnedAccuracyProblem) {\r\n            tempWarnedAccuracyProblem \u003d true;\r\n            Log.w(TAG,\r\n                    String.format(\"Occur Accuracy Problem in %s, (real percent delta is %f, but\" +\r\n                                    \" desired percent delta is %f), so we use delay to handle the\" +\r\n                                    \" temporary duration, as result the processing will not smooth\",\r\n                            targetWeakReference.get(), realPercentDelta, desiredPercentDelta));\r\n        }\r\n        long remedyDelayMillis;\r\n        final float delta \u003d realPercentDelta - desiredPercentDelta;\r\n        remedyDelayMillis \u003d (long) ((delta / desiredPercentDelta) * tempLastConsumeMillis);\r\n        return remedyDelayMillis + smoothIncreaseDelayMillis;\r\n    }\r\n    private long tempStartTimestamp;\r\n    private long tempDurationMillis;\r\n    private long tempRemainDurationMillis;\r\n    private long tempLastConsumeMillis;\r\n    private boolean tempWarnedAccuracyProblem;\r\n    public static float ALLOWED_PRECISION_ERROR \u003d 0.00001f;\r\n}\r\n\r\npublic static interface ISmoothTarget {\r\n    float getPercent();\r\n    void setPercent(float percent);\r\n    void setSmoothPercent(float percent);\r\n    void setSmoothPercent(float percent, long durationMillis);\r\n}\r\n\r\n\r\npublic static class SmoothProgressBar extends ProgressBar implements ISmoothTarget {\r\n    public SmoothProgressBar(Context context) {\r\n        super(context);\r\n    }\r\n    public SmoothProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n    }\r\n    public SmoothProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n    }\r\n    public SmoothProgressBar(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n    }\r\n    @Override\r\n    public float getPercent() {\r\n        return getProgress() / (float) getMax();\r\n    }\r\n    @Override\r\n    public void setPercent(float percent) {\r\n        setProgress((int) Math.ceil(percent * getMax()));\r\n    }\r\n    @Override\r\n    public synchronized void setProgress(int progress) {\r\n        if (smoothHandler !\u003d null) {\r\n            smoothHandler.commitPercent(progress / (float) getMax());\r\n        }\r\n        super.setProgress(progress);\r\n    }\r\n    private SmoothHandler smoothHandler;\r\n    @Override\r\n    public void setSmoothPercent(float percent) {\r\n        getSmoothHandler().loopSmooth(percent);\r\n    }\r\n    @Override\r\n    public void setSmoothPercent(float percent, long durationMillis) {\r\n        getSmoothHandler().loopSmooth(percent, durationMillis);\r\n    }\r\n    private SmoothHandler getSmoothHandler() {\r\n        if (smoothHandler \u003d\u003d null) {\r\n            smoothHandler \u003d new SmoothHandler(new java.lang.ref.WeakReference\u003cISmoothTarget\u003e(this));\r\n        }\r\n        return smoothHandler;\r\n    }\r\n}\r\n"},{"name":"Siren Updater ","code":"//Usage :\r\n\r\nPlease view online tutorial :^)\r\n\r\n//Add Class :\r\n\r\n@SuppressWarnings({\"WeakerAccess\", \"unused\", \"PMD.GodClass\"})\r\npublic static class Siren {\r\n    protected static final Siren sirenInstance \u003d new Siren();\r\n    protected Context mApplicationContext;\r\n    private ISirenListener mSirenListener;\r\n    private java.lang.ref.WeakReference\u003cActivity\u003e mActivityRef;\r\n    private SirenAlertType versionCodeUpdateAlertType \u003d SirenAlertType.OPTION;\r\n    private SirenAlertType majorUpdateAlertType \u003d SirenAlertType.OPTION;\r\n    private SirenAlertType minorUpdateAlertType  \u003d SirenAlertType.OPTION;\r\n    private SirenAlertType patchUpdateAlertType \u003d SirenAlertType.OPTION;\r\n    private SirenAlertType revisionUpdateAlertType \u003d SirenAlertType.OPTION;\r\n    public static Siren getInstance(Context context) {\r\n        sirenInstance.mApplicationContext \u003d context;\r\n        return sirenInstance;\r\n    } \r\n    protected Siren() {\r\n    }\r\n    public void checkVersion(Activity activity, SirenVersionCheckType versionCheckType, String appDescriptionUrl) {\r\n        mActivityRef \u003d new java.lang.ref.WeakReference\u003c\u003e(activity);\r\n        if (getSirenHelper().isEmpty(appDescriptionUrl)) {\r\n            getSirenHelper().logError(getClass().getSimpleName(), \"Please make sure you set correct path to app version description document\");\r\n            return;\r\n        }\r\n        if (versionCheckType \u003d\u003d SirenVersionCheckType.IMMEDIATELY) {\r\n            performVersionCheck(appDescriptionUrl);\r\n        } else if (versionCheckType.getValue() \u003c\u003d getSirenHelper().getDaysSinceLastCheck(mApplicationContext)\r\n                ||getSirenHelper().getLastVerificationDate(mApplicationContext) \u003d\u003d 0) {\r\n            performVersionCheck(appDescriptionUrl);\r\n        }\r\n    }\r\n    public void setMajorUpdateAlertType(@SuppressWarnings(\"SameParameterValue\") SirenAlertType majorUpdateAlertType) {\r\n        this.majorUpdateAlertType \u003d majorUpdateAlertType;\r\n    }\r\n    public void setMinorUpdateAlertType(SirenAlertType minorUpdateAlertType) {\r\n        this.minorUpdateAlertType \u003d minorUpdateAlertType;\r\n    }\r\n    public void setPatchUpdateAlertType(SirenAlertType patchUpdateAlertType) {\r\n        this.patchUpdateAlertType \u003d patchUpdateAlertType;\r\n    }\r\n    public void setRevisionUpdateAlertType(SirenAlertType revisionUpdateAlertType) {\r\n        this.revisionUpdateAlertType \u003d revisionUpdateAlertType;\r\n    }\r\n    public void setSirenListener(ISirenListener sirenListener) {\r\n        this.mSirenListener \u003d sirenListener;\r\n    }\r\n    public void setVersionCodeUpdateAlertType(SirenAlertType versionCodeUpdateAlertType) {\r\n        this.versionCodeUpdateAlertType \u003d versionCodeUpdateAlertType;\r\n    }\r\n    protected void performVersionCheck(String appDescriptionUrl) {\r\n        new LoadJsonTask().execute(appDescriptionUrl);\r\n    }\r\n    protected void handleVerificationResults(String json) {\r\n        try {\r\n            org.json.JSONObject rootJson \u003d new org.json.JSONObject(json);\r\n            if (rootJson.isNull(getSirenHelper().getPackageName(mApplicationContext))) {\r\n                throw new org.json.JSONException(\"field not found\");\r\n            } else {\r\n                org.json.JSONObject appJson \u003d rootJson.getJSONObject(getSirenHelper().getPackageName(mApplicationContext));\r\n                if (checkVersionName(appJson)) {\r\n                    return;\r\n                }\r\n                checkVersionCode(appJson);\r\n            }\r\n        } catch (org.json.JSONException e) {\r\n            e.printStackTrace();\r\n            if (mSirenListener !\u003d null) {\r\n                mSirenListener.onError(e);\r\n            }\r\n        }\r\n    }\r\n    protected SirenAlertWrapper getAlertWrapper(SirenAlertType alertType, String appVersion) {\r\n        Activity activity \u003d mActivityRef.get();\r\n        return new SirenAlertWrapper(activity, mSirenListener, alertType, appVersion, getSirenHelper());\r\n    }\r\n    protected SirenHelper getSirenHelper() {\r\n        return SirenHelper.getInstance();\r\n    }\r\n    private boolean checkVersionName(org.json.JSONObject appJson) throws org.json.JSONException{\r\n        if (appJson.isNull(Constants.JSON_MIN_VERSION_NAME)) {\r\n            return false;\r\n        }\r\n        getSirenHelper().setLastVerificationDate(mApplicationContext);\r\n        Boolean versionCheckEnabled \u003d appJson.has(Constants.JSON_ENABLE_VERSION_CHECK) ? appJson.getBoolean(Constants.JSON_ENABLE_VERSION_CHECK) : true;\r\n        if (!versionCheckEnabled) {\r\n            return false;\r\n        }\r\n        Boolean forceUpdateEnabled \u003d appJson.has(Constants.JSON_FORCE_ALERT_TYPE) ? appJson.getBoolean(Constants.JSON_FORCE_ALERT_TYPE) : false;\r\n        String minVersionName \u003d appJson.getString(Constants.JSON_MIN_VERSION_NAME);\r\n        String currentVersionName \u003d getSirenHelper().getVersionName(mApplicationContext);\r\n        if (getSirenHelper().isEmpty(minVersionName) || getSirenHelper().isEmpty(currentVersionName) || getSirenHelper().isVersionSkippedByUser(mApplicationContext, minVersionName)) {\r\n            return false;\r\n        }\r\n        SirenAlertType alertType \u003d null;\r\n        String[] minVersionNumbers \u003d minVersionName.split(\"\\\\.\");\r\n        String[] currentVersionNumbers \u003d currentVersionName.split(\"\\\\.\");\r\n        if (minVersionNumbers !\u003d null \u0026\u0026 currentVersionNumbers !\u003d null\r\n                \u0026\u0026 minVersionNumbers.length \u003d\u003d currentVersionNumbers.length) {\r\n            Boolean versionUpdateDetected \u003d false;\r\n            for (Integer index \u003d 0; index \u003c Math.min(minVersionNumbers.length, currentVersionNumbers.length); index++) {\r\n                Integer compareResult \u003d checkVersionDigit(minVersionNumbers, currentVersionNumbers, index);\r\n                if (compareResult \u003d\u003d 1) {\r\n                    versionUpdateDetected \u003d true;\r\n                    if (forceUpdateEnabled) {\r\n                        alertType \u003d SirenAlertType.FORCE;\r\n                    } else {\r\n                        switch (index) {\r\n                            case 0: alertType \u003d majorUpdateAlertType; break;\r\n                            case 1: alertType \u003d minorUpdateAlertType; break;\r\n                            case 2: alertType \u003d patchUpdateAlertType; break;\r\n                            case 3: alertType \u003d revisionUpdateAlertType; break;\r\n                            default: alertType \u003d SirenAlertType.OPTION; break;\r\n                        }\r\n                    }\r\n                    break;\r\n                } else if (compareResult \u003d\u003d -1) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (versionUpdateDetected) {\r\n                showAlert(minVersionName, alertType);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    private int checkVersionDigit(String[] minVersionNumbers, String[] currentVersionNumbers, int digitIndex) {\r\n        if (minVersionNumbers.length \u003e digitIndex) {\r\n            if (getSirenHelper().isGreater(minVersionNumbers[digitIndex], currentVersionNumbers[digitIndex])) {\r\n                return 1;\r\n            } else if (getSirenHelper().isEquals(minVersionNumbers[digitIndex], currentVersionNumbers[digitIndex])) {\r\n                return 0;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    @SuppressWarnings(\"UnusedReturnValue\")\r\n    private boolean checkVersionCode(org.json.JSONObject appJson) throws org.json.JSONException{\r\n        if (!appJson.isNull(Constants.JSON_MIN_VERSION_CODE)) {\r\n            int minAppVersionCode \u003d appJson.getInt(Constants.JSON_MIN_VERSION_CODE);\r\n            Boolean versionCheckEnabled \u003d appJson.has(Constants.JSON_ENABLE_VERSION_CHECK) ? appJson.getBoolean(Constants.JSON_ENABLE_VERSION_CHECK) : true;\r\n            if (!versionCheckEnabled) {\r\n                return false;\r\n            }\r\n            Boolean forceUpdateEnabled \u003d appJson.has(Constants.JSON_FORCE_ALERT_TYPE) ? appJson.getBoolean(Constants.JSON_FORCE_ALERT_TYPE) : false;\r\n            getSirenHelper().setLastVerificationDate(mApplicationContext);\r\n            if (getSirenHelper().getVersionCode(mApplicationContext) \u003c minAppVersionCode\r\n                    \u0026\u0026 !getSirenHelper().isVersionSkippedByUser(mApplicationContext, String.valueOf(minAppVersionCode))) {\r\n                showAlert(String.valueOf(minAppVersionCode), forceUpdateEnabled ? SirenAlertType.FORCE : versionCodeUpdateAlertType);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    private void showAlert(String appVersion, SirenAlertType alertType) {\r\n        if (alertType \u003d\u003d SirenAlertType.NONE) {\r\n            if (mSirenListener !\u003d null) {\r\n                mSirenListener.onDetectNewVersionWithoutAlert(getSirenHelper().getAlertMessage(mApplicationContext, appVersion));\r\n            }\r\n        } else {\r\n            getAlertWrapper(alertType, appVersion).show();\r\n        }\r\n    }\r\n    private static class LoadJsonTask extends AsyncTask\u003cString, Void, String\u003e {\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n            java.net.HttpURLConnection connection \u003d null;\r\n            try {\r\n                TLSSocketFactory TLSSocketFactory \u003d new TLSSocketFactory();\r\n                java.net.URL url \u003d new java.net.URL(params[0]);\r\n                connection \u003d (java.net.HttpURLConnection) url.openConnection();\r\n                connection.setRequestMethod(\"GET\");\r\n                connection.setUseCaches(false);\r\n                connection.setAllowUserInteraction(false);\r\n                connection.setConnectTimeout(10000);\r\n                connection.setReadTimeout(10000);\r\n                if (\"https\".equalsIgnoreCase(url.getProtocol())) {\r\n                    ((javax.net.ssl.HttpsURLConnection)connection).setSSLSocketFactory(TLSSocketFactory);\r\n                }\r\n                connection.connect();\r\n                int status \u003d connection.getResponseCode();\r\n                switch (status) {\r\n                    case 200:\r\n                    case 201:\r\n                        java.io.BufferedReader br \u003d new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), \"UTF-8\"));\r\n                        StringBuilder sb \u003d new StringBuilder();\r\n                        String line;\r\n                        while ((line \u003d br.readLine()) !\u003d null) {\r\n                            if (isCancelled()) {\r\n                                br.close();\r\n                                connection.disconnect();\r\n                                return null;\r\n                            }\r\n                            sb.append(line).append(\u0027\\n\u0027);\r\n                        }\r\n                        br.close();\r\n                        return sb.toString();\r\n                    default: /* ignore unsuccessful results */\r\n                }\r\n            } catch (java.io.IOException ex) {\r\n                ex.printStackTrace();\r\n                if (Siren.sirenInstance.mSirenListener !\u003d null) {\r\n                    Siren.sirenInstance.mSirenListener.onError(ex);\r\n                }\r\n            } catch (Exception ex) {\r\n              ex.printStackTrace();\r\n            } finally {\r\n                if (connection !\u003d null) {\r\n                    try {\r\n                        connection.disconnect();\r\n                    } catch (Exception ex) {\r\n                        ex.printStackTrace();\r\n                        if (Siren.sirenInstance.mSirenListener !\u003d null) {\r\n                            Siren.sirenInstance.mSirenListener.onError(ex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(String result) {\r\n            if (Siren.sirenInstance.getSirenHelper().isEmpty(result)) {\r\n                if (Siren.sirenInstance.mSirenListener !\u003d null) {\r\n                    Siren.sirenInstance.mSirenListener.onError(new NullPointerException());\r\n                }\r\n            } else {\r\n                Siren.sirenInstance.handleVerificationResults(result);\r\n            }\r\n        }\r\n    }\r\n}\r\npublic enum SirenVersionCheckType {\r\n    IMMEDIATELY(0),    // Version check performed every time the app is launched\r\n    DAILY(1),          // Version check performed once a day\r\n    WEEKLY(7);         // Version check performed once a week\r\n    private final int value;\r\n    SirenVersionCheckType(int value) {\r\n        this.value \u003d value;\r\n    }\r\n    public int getValue() {\r\n        return value;\r\n    }\r\n}\r\npublic enum SirenAlertType {\r\n    FORCE,                  //Forces user to update your app (1 button alert)\r\n    OPTION,                 //DEFAULT) Presents user with option to update app now or at next launch (2 button alert)\r\n    SKIP,                   //Presents user with option to update the app now, at next launch, or to skip this version all together (3 button alert)\r\n    NONE                    //Doesn\u0027t show the alert, but instead returns a localized message for use in a custom UI within the onDetectNewVersionWithoutAlert() callback\r\n}\r\n\r\n\r\n@SuppressWarnings(\"WeakerAccess\")\r\npublic interface ISirenListener {\r\n    void onShowUpdateDialog();                       // User presented with update dialog\r\n    void onLaunchGooglePlay();                       // User did click on button that launched Google Play\r\n    void onSkipVersion();                            // User did click on button that skips version update\r\n    void onCancel();                                 // User did click on button that cancels update dialog\r\n    void onDetectNewVersionWithoutAlert(String message); // Siren performed version check and did not display alert\r\n    void onError(Exception e);\r\n}\r\nstatic final class Constants {\r\n    static final String PREFERENCES_LAST_CHECK_DATE \u003d \"last_check_date\";\r\n    static final String PREFERENCES_SKIPPED_VERSION \u003d \"skipped_version\";\r\n    static final String JSON_MIN_VERSION_CODE \u003d \"minVersionCode\";\r\n    static final String JSON_MIN_VERSION_NAME \u003d \"minVersionName\";\r\n    static final String JSON_FORCE_ALERT_TYPE \u003d \"force\";\r\n    static final String JSON_ENABLE_VERSION_CHECK \u003d \"enable\";\r\n}\r\npublic static class TLSSocketFactory extends javax.net.ssl.SSLSocketFactory {\r\n  private final javax.net.ssl.SSLSocketFactory internalSSLSocketFactory;\r\n  public TLSSocketFactory() throws java.security.KeyManagementException, java.security.NoSuchAlgorithmException {\r\n    javax.net.ssl.SSLContext context \u003d javax.net.ssl.SSLContext.getInstance(\"TLS\");\r\n    context.init(null, null, null);\r\n    internalSSLSocketFactory \u003d context.getSocketFactory();\r\n  }\r\n  @Override\r\n  public String[] getDefaultCipherSuites() {\r\n    return internalSSLSocketFactory.getDefaultCipherSuites();\r\n  }\r\n  @Override\r\n  public String[] getSupportedCipherSuites() {\r\n    return internalSSLSocketFactory.getSupportedCipherSuites();\r\n  }\r\n  @Override\r\n  public java.net.Socket createSocket(java.net.Socket s, String host, int port, boolean autoClose) throws java.io.IOException {\r\n    return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s, host, port, autoClose));\r\n  }\r\n  @Override\r\n  public java.net.Socket createSocket(String host, int port) throws java.io.IOException, java.net.UnknownHostException {\r\n    return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port));\r\n  }\r\n  @Override\r\n  public java.net.Socket createSocket(String host, int port, java.net.InetAddress localHost, int localPort) throws java.io.IOException, java.net.UnknownHostException {\r\n    return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port, localHost, localPort));\r\n  }\r\n  @Override\r\n  public java.net.Socket createSocket(java.net.InetAddress host, int port) throws java.io.IOException {\r\n    return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port));\r\n  }\r\n  @Override\r\n  public java.net.Socket createSocket(java.net.InetAddress address, int port, java.net.InetAddress localAddress, int localPort) throws java.io.IOException {\r\n    return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address, port, localAddress, localPort));\r\n  }\r\n  private java.net.Socket enableTLSOnSocket(java.net.Socket socket) {\r\n    if (socket instanceof javax.net.ssl.SSLSocket) {\r\n      if (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.JELLY_BEAN) {\r\n        ((javax.net.ssl.SSLSocket) socket).setEnabledProtocols(new String[]{\"TLSv1.1\", \"TLSv1.2\"});\r\n      } else {\r\n        ((javax.net.ssl.SSLSocket)socket).setEnabledProtocols(new String[] {\"TLSv1\"});\r\n      }\r\n    }\r\n    return socket;\r\n  }\r\n}\r\npublic static class SirenAlertWrapper {\r\n    private final java.lang.ref.WeakReference\u003cActivity\u003e mActivityRef;\r\n    private final ISirenListener mSirenListener;\r\n    private final SirenAlertType mSirenAlertType;\r\n    private final String mMinAppVersion;\r\n    private final SirenHelper mSirenHelper;\r\n    public SirenAlertWrapper(Activity activity, ISirenListener sirenListener, SirenAlertType sirenAlertType,\r\n                             String minAppVersion, SirenHelper sirenHelper) {\r\n        this.mSirenListener \u003d sirenListener;\r\n        this.mSirenAlertType \u003d sirenAlertType;\r\n        this.mMinAppVersion \u003d minAppVersion;\r\n        this.mSirenHelper \u003d sirenHelper;\r\n        this.mActivityRef \u003d new java.lang.ref.WeakReference\u003c\u003e(activity);\r\n    }\r\n    public void show() {\r\n        Activity activity \u003d mActivityRef.get();\r\n        if (activity \u003d\u003d null) {\r\n            if (mSirenListener !\u003d null) {\r\n                mSirenListener.onError(new NullPointerException(\"activity reference is null\"));\r\n            }\r\n        } else if (Build.VERSION.SDK_INT \u003e\u003d 17 \u0026\u0026 !activity.isDestroyed() || Build.VERSION.SDK_INT \u003c 17 \u0026\u0026 !activity.isFinishing()) {\r\n            AlertDialog alertDialog \u003d initDialog(activity);\r\n            setupDialog(alertDialog);\r\n            if (mSirenListener !\u003d null) {\r\n                mSirenListener.onShowUpdateDialog();\r\n            }\r\n        }\r\n    }\r\n    private AlertDialog initDialog(Activity activity) {\r\n        AlertDialog.Builder alertBuilder \u003d new AlertDialog.Builder(activity);\r\n        alertBuilder.setTitle(\"Update available\");\r\n        alertBuilder.setCancelable(false);\r\n        View dialogView \u003d LayoutInflater.from(activity).inflate(R.layout.updater, null);\r\n        alertBuilder.setView(dialogView);\r\n        AlertDialog alertDialog \u003d alertBuilder.create();\r\n        alertDialog.show();\r\n        return alertDialog;\r\n    }\r\n    private void setupDialog(final AlertDialog dialog) {\r\n    \tfinal Activity activity \u003d mActivityRef.get();\r\n        TextView message \u003d (TextView) dialog.findViewById(R.id.msg);\r\n        Button update \u003d (Button) dialog.findViewById(R.id.update);\r\n        Button nextTime \u003d (Button) dialog.findViewById(R.id.next);\r\n        final Button skip \u003d (Button) dialog.findViewById(R.id.skip);\r\n        nextTime.setVisibility(View.GONE);\r\n        skip.setVisibility(View.GONE);\r\n        update.setText(\"Update\");\r\n        nextTime.setText(\"Next time\");\r\n        skip.setText(\"Skip this version\");\r\n        //message.setText(mMinAppVersion);\r\n\t\tmessage.setText(\"A new version of \" + mMinAppVersion + \" is available. Please update to version \" + mMinAppVersion + \" now.\");\r\n        if (mSirenAlertType \u003d\u003d SirenAlertType.FORCE\r\n                || mSirenAlertType \u003d\u003d SirenAlertType.OPTION\r\n                || mSirenAlertType \u003d\u003d SirenAlertType.SKIP) {\r\n            update.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (mSirenListener !\u003d null) {\r\n                        mSirenListener.onLaunchGooglePlay();\r\n                    }\r\n                    dialog.dismiss();\r\n                    mSirenHelper.openGooglePlay(mActivityRef.get());\r\n                }\r\n            });\r\n        }\r\n        if (mSirenAlertType \u003d\u003d SirenAlertType.OPTION\r\n                || mSirenAlertType \u003d\u003d SirenAlertType.SKIP) {\r\n            nextTime.setVisibility(View.VISIBLE);\r\n            nextTime.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (mSirenListener !\u003d null) {\r\n                        mSirenListener.onCancel();\r\n                    }\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n        }\r\n        if (mSirenAlertType \u003d\u003d SirenAlertType.SKIP) {\r\n            skip.setVisibility(View.VISIBLE);\r\n            skip.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (mSirenListener !\u003d null) {\r\n                        mSirenListener.onSkipVersion();\r\n                    }\r\n\r\n                    mSirenHelper.setVersionSkippedByUser(activity, mMinAppVersion);\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\npublic static class SirenHelper {\r\n    private static final SirenHelper instance \u003d new SirenHelper();\r\n    public static SirenHelper getInstance() {\r\n        return instance;\r\n    }\r\n    @SuppressWarnings(\"WeakerAccess\")\r\n    protected SirenHelper() {\r\n    }\r\n    String getPackageName(Context context) {\r\n        return context.getPackageName();\r\n    }\r\n    int getDaysSinceLastCheck(Context context) {\r\n        long lastCheckTimestamp \u003d getLastVerificationDate(context);\r\n        if (lastCheckTimestamp \u003e 0) {\r\n            return (int) (java.util.concurrent.TimeUnit.MILLISECONDS.toDays(Calendar.getInstance().getTimeInMillis()) - java.util.concurrent.TimeUnit.MILLISECONDS.toDays(lastCheckTimestamp));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    int getVersionCode(Context context) {\r\n        try {\r\n            return context.getPackageManager().getPackageInfo(getPackageName(context), 0).versionCode;\r\n        } catch (android.content.pm.PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n    @SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\r\n    boolean isVersionSkippedByUser(Context context, String minAppVersion) {\r\n        String skippedVersion \u003d android.preference.PreferenceManager.getDefaultSharedPreferences(context).getString(Constants.PREFERENCES_SKIPPED_VERSION, \"\");\r\n        return skippedVersion.equals(minAppVersion);\r\n    }\r\n    void setLastVerificationDate(Context context) {\r\n        android.preference.PreferenceManager.getDefaultSharedPreferences(context).edit()\r\n                .putLong(Constants.PREFERENCES_LAST_CHECK_DATE, Calendar.getInstance().getTimeInMillis())\r\n                .commit();\r\n    }\r\n    long getLastVerificationDate(Context context) {\r\n        return android.preference.PreferenceManager.getDefaultSharedPreferences(context).getLong(Constants.PREFERENCES_LAST_CHECK_DATE, 0);\r\n    }\r\n    String getAlertMessage(Context context, String minAppVersion) {\r\n        try {\r\n            if (context.getApplicationInfo().labelRes \u003d\u003d 0) {\r\n                return \"A new version of \" + minAppVersion + \" is available. Please update to version \" + minAppVersion + \" now.\";\r\n            } else {\r\n                return \"A new version of \" + minAppVersion + \" is available. Please update to version \" + minAppVersion + \" now.\";\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return \"A new version of \" + minAppVersion + \" is available. Please update to version \" + minAppVersion + \" now.\";\r\n        }\r\n    }\r\n    void openGooglePlay(Activity activity) {\r\n        if (activity \u003d\u003d null) {\r\n            return;\r\n        }\r\n        final String appPackageName \u003d getPackageName(activity);\r\n        try {\r\n            activity.startActivity(new Intent(Intent.ACTION_VIEW, android.net.Uri.parse(\"market://details?id\u003d\" + appPackageName)));\r\n        } catch (android.content.ActivityNotFoundException e) {\r\n            activity.startActivity(new Intent(Intent.ACTION_VIEW, android.net.Uri.parse(\"https://play.google.com/store/apps/details?id\u003d\" + appPackageName)));\r\n        }\r\n    }\r\n    void setVersionSkippedByUser(Context context, String skippedVersion) {\r\n        android.preference.PreferenceManager.getDefaultSharedPreferences(context).edit()\r\n                .putString(Constants.PREFERENCES_SKIPPED_VERSION, skippedVersion)\r\n                .commit();\r\n    }\r\n    String getVersionName(Context context) {\r\n        try {\r\n            return context.getPackageManager().getPackageInfo(getPackageName(context), 0).versionName;\r\n        } catch (android.content.pm.PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n            return \"\";\r\n        }\r\n    }\r\n    boolean isGreater(String first, String second) {\r\n        return TextUtils.isDigitsOnly(first) \u0026\u0026 TextUtils.isDigitsOnly(second) \u0026\u0026 Integer.parseInt(first) \u003e Integer.parseInt(second);\r\n    }\r\n    boolean isEquals(String first, String second) {\r\n        return TextUtils.isDigitsOnly(first) \u0026\u0026 TextUtils.isDigitsOnly(second) \u0026\u0026 Integer.parseInt(first) \u003d\u003d Integer.parseInt(second);\r\n    }\r\n    boolean isEmpty(String appDescriptionUrl) {\r\n        return TextUtils.isEmpty(appDescriptionUrl);\r\n    }\r\n    public void logError(String tag, String message) {\r\n        Log.d(tag, message);\r\n    }\r\n}\r\n\r\n"},{"name":"Psb Loading","code":"//Create Psd LoadingView :\r\n\r\nPsdLoadingView psd \u003d new PsdLoadingView(this);\r\npsd.setHint(\"Input Password\");\r\nLinearLayout.LayoutParams lp \u003d new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,\r\nLinearLayout.LayoutParams.WRAP_CONTENT);\r\npsd.setLayoutParams(lp);\r\npsd.init(new TranslationXAnimate());\r\nlinear1.addView(psd);\r\n\r\n//Start :\r\n\r\npsd.startLoading();\r\n\r\n//Attributes :\r\n\r\npsd.EatAnimate();;\r\npsd.TranslationX2Animate();\r\npsd.TranslationXAnimate();\r\npsd.stopLoading();\r\npsd.setDuration(int);\r\n\r\n//Add Class :\r\n\r\npublic static class PsdLoadingView extends EditText {\r\n    private IAnimate mIAnimate \u003d new TranslationX2Animate();\r\n    public PsdLoadingView(Context context) {\r\n        super(context);\r\n        init(mIAnimate);\r\n    }\r\n    public PsdLoadingView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(mIAnimate);\r\n    }\r\n    public PsdLoadingView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(mIAnimate);\r\n    }\r\n    public void init(IAnimate mIAnimate) {\r\n        if (this.mIAnimate.isLoading()) {\r\n            return;\r\n        }\r\n        this.mIAnimate \u003d mIAnimate;\r\n        this.mIAnimate.init(this);\r\n    }\r\n    public void startLoading() {\r\n        if (this.mIAnimate.isLoading()) {\r\n            return;\r\n        }\r\n        mIAnimate.startLoading();\r\n    }\r\n    public void stopLoading() {\r\n        mIAnimate.stopLoading();\r\n    }\r\n    public void setDuration(int duration) {\r\n        mIAnimate.setDuration(duration);\r\n    }\r\n    public Editable getTextDuringLoading() {\r\n        BaseAnimate baseAnimate \u003d (BaseAnimate) mIAnimate;\r\n        if (baseAnimate.isLoading) {\r\n            return baseAnimate.text;\r\n        }\r\n        else {\r\n            return super.getText();\r\n        }\r\n    }\r\n    @Override protected void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        mIAnimate.onDraw(canvas);\r\n    }\r\n    @Override\r\n    protected void onVisibilityChanged(View changedView, int visibility) {\r\n        super.onVisibilityChanged(changedView, visibility);\r\n        if (visibility \u003d\u003d GONE || visibility \u003d\u003d INVISIBLE) {\r\n            mIAnimate.onVisibilityChanged(false);\r\n        } else {\r\n            mIAnimate.onVisibilityChanged(true);\r\n        }\r\n    }\r\n}\r\npublic static class EatAnimate extends BaseAnimate {\r\n    private Paint mEyePaint;\r\n    private float eyeProgress;\r\n    private boolean isBegining \u003d false;\r\n    private boolean isLeftTurn \u003d true;\r\n    private boolean isShowamaze \u003d false;\r\n    private int amazeTimes \u003d 0;\r\n    float radius, left, right, top, bottom, centerX, centerY, eyeX, eyeY;\r\n    float startAngle, sweepAngle;\r\n    private Handler mHandler;\r\n    @Override public void init(PsdLoadingView mPsdLoadingView) {\r\n        super.init(mPsdLoadingView);\r\n        mEyePaint \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\r\n        mEyePaint.setColor(Color.WHITE);\r\n        mEyePaint.setStyle(Paint.Style.FILL);\r\n        setDuration(duration * 6);\r\n        final PsdLoadingView psdLoadingView \u003d mPsdLoadingView;\r\n        mHandler \u003d new Handler() {\r\n            @Override public void handleMessage(Message msg) {\r\n                super.handleMessage(msg);\r\n                amazeTimes++;\r\n                if (amazeTimes % 2 \u003d\u003d 0) {\r\n                    isShowamaze \u003d true;\r\n                }\r\n                else {\r\n                    isShowamaze \u003d false;\r\n                }\r\n                psdLoadingView.invalidate();\r\n                if (amazeTimes \u003e\u003d 5) {\r\n                    amazeTimes \u003d 0;\r\n                    valueAnimator.resume();\r\n                }\r\n                else {\r\n                    if (amazeTimes \u003d\u003d 4) {\r\n                        mHandler.sendEmptyMessageDelayed(0, 300);\r\n                    }\r\n                    else {\r\n                        mHandler.sendEmptyMessageDelayed(0, 100);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    @Override public void startLoading() {\r\n        isLeftTurn \u003d true;\r\n        super.startLoading();\r\n        isBegining \u003d true;\r\n        radius \u003d mPsdLoadingView.getHeight() / 8.0f;\r\n        centerY \u003d (mPsdLoadingView.getHeight()) / 2.0f;\r\n        top \u003d centerY - radius;\r\n        bottom \u003d centerY + radius;\r\n        valueAnimator.addListener(new Animator.AnimatorListener() {\r\n            @Override public void onAnimationStart(Animator animation) {}\r\n            @Override public void onAnimationEnd(Animator animation) {}\r\n            @Override public void onAnimationCancel(Animator animation) {}\r\n            @Override public void onAnimationRepeat(Animator animation) {\r\n                isLeftTurn \u003d !isLeftTurn;\r\n            }\r\n        });\r\n        ValueAnimator eyeAnimator \u003d ValueAnimator.ofFloat(0, 1)\r\n                                                 .setDuration(100L);\r\n        eyeAnimator.setInterpolator(new AccelerateInterpolator());\r\n        eyeAnimator.setRepeatCount(Animation.INFINITE);\r\n        eyeAnimator.setRepeatMode(ValueAnimator.REVERSE);\r\n        eyeAnimator.addUpdateListener(\r\n                new ValueAnimator.AnimatorUpdateListener() {\r\n                    @Override\r\n                    public void onAnimationUpdate(ValueAnimator animation) {\r\n                        eyeProgress \u003d (float) animation.getAnimatedValue();\r\n                    }\r\n                });\r\n        eyeAnimator.start();\r\n    }\r\n    @Override public void stopLoading() {\r\n        super.stopLoading();\r\n    }\r\n    @Override public void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        if (!isStop) {\r\n            drawEater(canvas);\r\n            if (distance * 2 \u003e\u003d centerX \u0026\u0026 isBegining) {\r\n                isBegining \u003d false;\r\n                valueAnimator.pause();\r\n                isShowamaze \u003d true;\r\n                mHandler.sendEmptyMessageDelayed(0, 100);\r\n            }\r\n            if (isShowamaze) {\r\n                drawAmazed(canvas);\r\n            }\r\n            if (isBegining) {\r\n                for (int i \u003d 0; i \u003c textLength; i++) {\r\n                    float moveX \u003d (i + 0.5f) * distance;\r\n                    if (moveX \u003c centerX) {\r\n                        canvas.drawText(String.valueOf(DOT), 0, 1, moveX,\r\n                                startY, mPaint);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                float moveX;\r\n                if (isLeftTurn) {\r\n                    moveX \u003d centerX - radius - distance * 1.0f;\r\n                }\r\n                else {\r\n                    moveX \u003d centerX + radius;\r\n                }\r\n                canvas.drawText(String.valueOf(DOT), 0, 1, moveX, startY,\r\n                        mPaint);\r\n            }\r\n        }\r\n    }\r\n    private void drawEater(Canvas canvas) {\r\n        centerX \u003d (mPsdLoadingView.getWidth() * 1.4f * (1.0f - progress)) -\r\n                mPsdLoadingView.getWidth() * 0.2f;\r\n        left \u003d centerX - radius;\r\n        right \u003d centerX + radius;\r\n        RectF oval2 \u003d new RectF(left, top, right, bottom);\r\n        startAngle \u003d 225f - eyeProgress * 30.0f;\r\n        sweepAngle \u003d 270f + eyeProgress * 60.0f;\r\n        eyeX \u003d centerX + radius / 2.0f;\r\n        eyeY \u003d centerY - radius / 2.0f;\r\n        if (!isLeftTurn) {\r\n            startAngle \u003d 225f - 180f - eyeProgress * 25.0f;\r\n            eyeX \u003d centerX - radius / 2.0f;\r\n        }\r\n        canvas.drawArc(oval2, startAngle, sweepAngle, true, mPaint);\r\n        canvas.drawCircle(eyeX, eyeY, radius / 5.0f, mEyePaint);\r\n    }\r\n    private void drawAmazed(Canvas canvas) {\r\n        float amazedX \u003d centerX - radius - distance * 0.75f;\r\n        canvas.drawCircle(amazedX, centerY - radius, radius / 7.0f, mPaint);\r\n        canvas.drawCircle(amazedX + radius / 2.0f, centerY - radius / 2.0f,\r\n                radius / 7.0f, mPaint);\r\n        canvas.drawCircle(amazedX - radius / 2.0f, centerY - radius / 2.0f,\r\n                radius / 7.0f, mPaint);\r\n    }\r\n    @Override protected boolean whenStop() {\r\n        return (!isLoading \u0026\u0026 (progress \u003c\u003d 0.001f || progress \u003e\u003d 0.999f));\r\n    }\r\n}\r\npublic static class TranslationX2Animate extends BaseAnimate {\r\n    ArrayList\u003cFloat\u003e movexArray;\r\n    boolean isBegining;\r\n    boolean isEnding;\r\n    @Override public void init(PsdLoadingView mPsdLoadingView) {\r\n        super.init(mPsdLoadingView);\r\n    }\r\n    @Override public void startLoading() {\r\n        super.startLoading();\r\n        isBegining \u003d true;\r\n        isEnding \u003d false;\r\n    }\r\n    @Override public void stopLoading() {\r\n        super.stopLoading();\r\n        movexArray.clear();\r\n        isBegining \u003d false;\r\n        isEnding \u003d true;\r\n    }\r\n    @Override public void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        if (!isStop) {\r\n            if (progress \u003e 0.999f) {\r\n                isBegining \u003d false;\r\n            }\r\n            if (movexArray \u003d\u003d null || movexArray.size() \u003c textLength) {\r\n                movexArray \u003d new ArrayList\u003cFloat\u003e(textLength);\r\n                for (int i \u003d 0; i \u003c textLength; i++) {\r\n                    movexArray.add(0.0f);\r\n                }\r\n            }\r\n            for (int i \u003d 0; i \u003c textLength; i++) {\r\n                if (isEnding || isBegining ||\r\n                        ((float) i \u003c progress * (float) textLength \u0026\u0026\r\n                                progress * (float) textLength \u003c\r\n                                        ((float) i + 1f))) {\r\n                    float temp \u003d progress * (mPsdLoadingView.getWidth() -\r\n                            (textLength + 2) * distance);\r\n                    float maxtemp \u003d ((i + 1) / (float) textLength) *\r\n                            (mPsdLoadingView.getWidth() -\r\n                                    (textLength + 2) * distance);\r\n                    movexArray.set(i, Math.min(temp, maxtemp));\r\n                }\r\n                canvas.drawText(String.valueOf(DOT), 0, 1,\r\n                        movexArray.get(i) + (i + 1) * distance, startY, mPaint);\r\n            }\r\n        }\r\n    }\r\n}\r\npublic static class TranslationXAnimate extends BaseAnimate {\r\n    @Override public void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        if (!isStop) {\r\n            for (int i \u003d 0; i \u003c textLength; i++) {\r\n                canvas.drawText(String.valueOf(DOT), 0, 1, progress *\r\n                        (mPsdLoadingView.getWidth() -\r\n                                (textLength + 2) * distance) +\r\n                        (i + 1) * distance, startY, mPaint);\r\n            }\r\n        }\r\n    }\r\n}\r\npublic static interface IAnimate {\r\n    void init(PsdLoadingView mPsdLoadingView);\r\n    void startLoading();\r\n    void stopLoading();\r\n    void setDuration(int duration);\r\n    void onDraw(Canvas canvas);\r\n    void onVisibilityChanged(boolean isVisibiable);\r\n    boolean isLoading();\r\n}\r\npublic static class BaseAnimate implements IAnimate {\r\n    protected static char DOT \u003d \u0027\\u2022\u0027;\r\n    protected PsdLoadingView mPsdLoadingView;\r\n    protected Paint mPaint;\r\n    protected int textLength;\r\n    protected int startY \u003d 0;\r\n    protected float distance \u003d 0;\r\n    protected float progress;\r\n    public Editable text;\r\n    protected CharSequence hint;\r\n    public boolean isLoading;\r\n    protected boolean isStop \u003d true;\r\n    protected int duration \u003d 500;\r\n    ValueAnimator valueAnimator;\r\n    @Override public void setDuration(int duration) {\r\n        this.duration \u003d duration;\r\n    }\r\n    @Override public boolean isLoading() {\r\n        return isLoading;\r\n    }\r\n    @Override public void init(PsdLoadingView mPsdLoadingView) {\r\n        this.mPsdLoadingView \u003d mPsdLoadingView;\r\n        mPaint \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\r\n        mPaint.setColor(mPsdLoadingView.getCurrentTextColor());\r\n        mPaint.setStyle(Paint.Style.FILL);\r\n        mPsdLoadingView.setInputType(InputType.TYPE_CLASS_TEXT |\r\n                InputType.TYPE_TEXT_VARIATION_PASSWORD);\r\n    }\r\n    @Override public void startLoading() {\r\n        textLength \u003d mPsdLoadingView.getText().length();\r\n        startY \u003d mPsdLoadingView.getBaseline();\r\n        if (TextUtils.isEmpty(mPsdLoadingView.getText().toString())) {\r\n            return;\r\n        }\r\n        isLoading \u003d true;\r\n        isStop \u003d false;\r\n        distance \u003d mPsdLoadingView.getPaint()\r\n                                  .measureText(\r\n                                          mPsdLoadingView.getText().charAt(0) +\r\n                                                  \"\");\r\n        mPaint.setTextSize(mPsdLoadingView.getTextSize());\r\n        text \u003d mPsdLoadingView.getText();\r\n        hint \u003d mPsdLoadingView.getHint();\r\n        mPsdLoadingView.setMinWidth(mPsdLoadingView.getWidth());\r\n        mPsdLoadingView.setText(\"\");\r\n        mPsdLoadingView.setHint(\"\");\r\n        mPsdLoadingView.setCursorVisible(false);\r\n        valueAnimator \u003d ValueAnimator.ofFloat(0, 1).setDuration(duration);\r\n        valueAnimator.setInterpolator(new AccelerateDecelerateInterpolator());\r\n        valueAnimator.setRepeatCount(Animation.INFINITE);\r\n        valueAnimator.setRepeatMode(ValueAnimator.REVERSE);\r\n        valueAnimator.addUpdateListener(\r\n                new ValueAnimator.AnimatorUpdateListener() {\r\n                    @Override\r\n                    public void onAnimationUpdate(ValueAnimator animation) {\r\n                        progress \u003d (float) animation.getAnimatedValue();\r\n                        mPsdLoadingView.invalidate();\r\n                        if (whenStop()) {\r\n                            valueAnimator.cancel();\r\n                            isStop \u003d true;\r\n                            mPsdLoadingView.setHint(hint);\r\n                            mPsdLoadingView.setText(text);\r\n                            mPsdLoadingView.setCursorVisible(true);\r\n                            mPsdLoadingView.setSelection(\r\n                                    mPsdLoadingView.getText().length());\r\n                        }\r\n                    }\r\n                });\r\n        valueAnimator.start();\r\n    }\r\n    @Override public void stopLoading() {\r\n        isLoading \u003d false;\r\n    }\r\n    @Override public void onDraw(Canvas canvas) {}\r\n    @Override public void onVisibilityChanged(boolean isVisibiable) {\r\n        if (!isLoading) {\r\n            return;\r\n        }\r\n        if (isVisibiable) {\r\n            valueAnimator.resume();\r\n        }\r\n        else {\r\n            valueAnimator.pause();\r\n        }\r\n    }\r\n    protected boolean whenStop() {\r\n        return (!isLoading \u0026\u0026 progress \u003c\u003d 0.001f);\r\n    }\r\n}"},{"name":"ProtractorView","code":"//Create ProtractorView :\r\n\r\nProtractorView pr \u003d new ProtractorView(this);\r\npr.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\nlinear1.addView(pr);\r\n\r\n//Attributes :\r\n\r\npr.getProgressColor();\r\npr.setProgressColor(int);\r\npr.getArcColor();\r\npr.setArcColor(int);\r\npr.getArcProgressWidth();\r\npr.setArcProgressWidth(int);\r\npr.getArcWidth();\r\npr.setArcWidth(int);\r\npr.isRoundedEdges();\r\npr.setRoundedEdges(boolean);\r\npr.getThumb();\r\npr.setThumb(Drawable);\r\npr.getAngleTextSize();\r\npr.setAngleTextSize(int);\r\npr.getTickOffset();\r\npr.setTickOffset(int);\r\npr.getTickLength();\r\npr.setTickLength(int);\r\npr.getTickIntervals();\r\npr.setTickIntervals(int);\r\n\r\nprotractorView.setOnProtractorViewChangeListener(new ProtractorView.OnProtractorViewChangeListener() {\r\n\t@Override\r\n\tpublic void onProgressChanged(ProtractorView pv, int progress, boolean b) {\r\n\t}\r\n\t@Override\r\n\tpublic void onStartTrackingTouch(ProtractorView pv) {\r\n\t}\r\n\t@Override\r\n\tpublic void onStopTrackingTouch(ProtractorView pv) {\r\n\t}\r\n});\r\n\r\n\r\n//Add Class :\r\n\r\npublic static class ProtractorView extends View {\r\n    private static final int MAX \u003d 180;\r\n    private final float DENSITY \u003d getContext().getResources().getDisplayMetrics().density;\r\n    private RectF mArcRect \u003d new RectF();\r\n    private Paint mArcPaint;\r\n    private Paint mArcProgressPaint;\r\n    private Paint mTickPaint;\r\n    private Paint mTickProgressPaint;\r\n    private Paint mTickTextPaint;\r\n    private Paint mTickTextColoredPaint;\r\n    private int mArcRadius \u003d 0;\r\n    private int mArcWidth \u003d 2;\r\n    private int mArcProgressWidth \u003d 2;\r\n    private boolean mRoundedEdges \u003d true;\r\n    private android.graphics.drawable.Drawable mThumb;\r\n    private int mTranslateX;\r\n    private int mTranslateY;\r\n    private int mThumbXPos;\r\n    private int mThumbYPos;\r\n    private int mAngleTextSize \u003d 12;\r\n    private int mTickOffset \u003d 12;\r\n    private int mTickLength \u003d 10;\r\n    private int mTickWidth \u003d 2;\r\n    private int mTickProgressWidth \u003d 2;\r\n    private int mAngle \u003d 0;\r\n    private boolean mTouchInside \u003d true;\r\n    private boolean mEnabled \u003d true;\r\n    private TicksBetweenLabel mTicksBetweenLabel \u003d TicksBetweenLabel.TWO;\r\n    private int mTickIntervals \u003d 15;\r\n    private double mTouchAngle \u003d 0;\r\n    private float mTouchIgnoreRadius;\r\n    private OnProtractorViewChangeListener mOnProtractorViewChangeListener \u003d null;\r\n    public interface OnProtractorViewChangeListener {\r\n        void onProgressChanged(ProtractorView protractorView, int progress, boolean fromUser);\r\n        void onStartTrackingTouch(ProtractorView protractorView);\r\n        void onStopTrackingTouch(ProtractorView protractorView);\r\n    }\r\n    public enum TicksBetweenLabel {\r\n        ZERO, ONE, TWO, THREE\r\n    }\r\n    public ProtractorView(Context context) {\r\n        super(context);\r\n        init(context, null, 0);\r\n    }\r\n    public ProtractorView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(context, attrs, 0);\r\n    }\r\n    public ProtractorView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(context, attrs, defStyleAttr);\r\n    }\r\n    private void init(Context context, AttributeSet attrs, int defStyle) {\r\n        final android.content.res.Resources res \u003d getResources();\r\n        int arcColor \u003d 0xFFD8D8D8; //res.getColor(R.color.progress_gray);\r\n        int arcProgressColor \u003d 0xFF33b5e5; //res.getColor(R.color.default_blue_light);\r\n        int textColor \u003d 0xFFD8D8D8; //res.getColor(R.color.progress_gray);\r\n        int textProgressColor \u003d 0xFF33b5e5;//res.getColor(R.color.default_blue_light);\r\n        int tickColor \u003d 0xFFD8D8D8; //res.getColor(R.color.progress_gray);\r\n        int tickProgressColor \u003d 0xFF33b5e5;//res.getColor(R.color.default_blue_light);\r\n        int thumbHalfHeight \u003d 0;\r\n        int thumbHalfWidth \u003d 0;\r\n        mThumb \u003d res.getDrawable(R.drawable.selector);\r\n\r\n        mArcWidth \u003d (int) (mArcWidth * DENSITY);\r\n        mArcProgressWidth \u003d (int) (mArcProgressWidth * DENSITY);\r\n        mAngleTextSize \u003d (int) (mAngleTextSize * DENSITY);\r\n        mTickOffset \u003d (int) (mTickOffset * DENSITY);\r\n        mTickLength \u003d (int) (mTickLength * DENSITY);\r\n        mTickWidth \u003d (int) (mTickWidth * DENSITY);\r\n        mTickProgressWidth \u003d (int) (mTickProgressWidth * DENSITY);\r\n        if (attrs !\u003d null) {\r\n            //final TypedArray array \u003d context.obtainStyledAttributes(attrs, R.styleable.ProtractorView, defStyle, 0);\r\n            android.graphics.drawable.Drawable thumb \u003d null; //array.getDrawable(R.styleable.ProtractorView_thumb);\r\n            if (thumb !\u003d null) {\r\n                mThumb \u003d thumb;\r\n            }\r\n            thumbHalfHeight \u003d mThumb.getIntrinsicHeight() / 2;\r\n            thumbHalfWidth \u003d mThumb.getIntrinsicWidth() / 2;\r\n            mThumb.setBounds(-thumbHalfWidth, -thumbHalfHeight, thumbHalfWidth, thumbHalfHeight);\r\n            mAngleTextSize \u003d (int)mAngleTextSize;\r\n            mArcProgressWidth \u003d (int)mArcProgressWidth;\r\n            mTickOffset \u003d (int)mTickOffset;\r\n            mTickLength \u003d (int)mTickLength;\r\n            mArcWidth \u003d (int)mArcWidth;\r\n            mAngle \u003d mAngle;\r\n            mTickIntervals \u003d mTickIntervals;\r\n            arcColor \u003d arcColor;\r\n            arcProgressColor \u003d arcProgressColor;\r\n            textColor \u003d textColor;\r\n            textProgressColor \u003d textProgressColor;\r\n            tickColor \u003d tickColor;\r\n            tickProgressColor \u003d tickProgressColor;\r\n            //Boolean\r\n            mRoundedEdges \u003d mRoundedEdges;\r\n            mEnabled \u003d mEnabled;\r\n            mTouchInside \u003d mTouchInside;\r\n            int ordinal \u003d mTicksBetweenLabel.ordinal();\r\n            mTicksBetweenLabel \u003d TicksBetweenLabel.values()[ordinal];\r\n\r\n        }\r\n        mAngle \u003d (mAngle \u003e MAX) ? MAX : ((mAngle \u003c 0) ? 0 : mAngle);\r\n        mArcPaint \u003d new Paint();\r\n        mArcPaint.setColor(arcColor);\r\n        mArcPaint.setAntiAlias(true);\r\n        mArcPaint.setStyle(Paint.Style.STROKE);\r\n        mArcPaint.setStrokeWidth(mArcWidth);\r\n        mArcProgressPaint \u003d new Paint();\r\n        mArcProgressPaint.setColor(arcProgressColor);\r\n        mArcProgressPaint.setAntiAlias(true);\r\n        mArcProgressPaint.setStyle(Paint.Style.STROKE);\r\n        mArcProgressPaint.setStrokeWidth(mArcProgressWidth);\r\n        if (mRoundedEdges) {\r\n            mArcPaint.setStrokeCap(Paint.Cap.ROUND);\r\n            mArcProgressPaint.setStrokeCap(Paint.Cap.ROUND);\r\n        }\r\n        mTickPaint \u003d new Paint();\r\n        mTickPaint.setColor(tickColor);\r\n        mTickPaint.setAntiAlias(true);\r\n        mTickPaint.setStyle(Paint.Style.STROKE);\r\n        mTickPaint.setStrokeWidth(mTickWidth);\r\n        mTickProgressPaint \u003d new Paint();\r\n        mTickProgressPaint.setColor(tickProgressColor);\r\n        mTickProgressPaint.setAntiAlias(true);\r\n        mTickProgressPaint.setStyle(Paint.Style.STROKE);\r\n        mTickProgressPaint.setStrokeWidth(mTickProgressWidth);\r\n        mTickTextPaint \u003d new Paint();\r\n        mTickTextPaint.setColor(textColor);\r\n        mTickTextPaint.setAntiAlias(true);\r\n        mTickTextPaint.setStyle(Paint.Style.FILL);\r\n        mTickTextPaint.setTextSize(mAngleTextSize);\r\n        mTickTextPaint.setTextAlign(Paint.Align.CENTER);\r\n        mTickTextColoredPaint \u003d new Paint();\r\n        mTickTextColoredPaint.setColor(textProgressColor);\r\n        mTickTextColoredPaint.setAntiAlias(true);\r\n        mTickTextColoredPaint.setStyle(Paint.Style.FILL);\r\n        mTickTextColoredPaint.setTextSize(mAngleTextSize);\r\n        mTickTextColoredPaint.setTextAlign(Paint.Align.CENTER);\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int height \u003d getDefaultSize(getSuggestedMinimumHeight(),\r\n                heightMeasureSpec);\r\n        int width \u003d getDefaultSize(getSuggestedMinimumWidth(),\r\n                widthMeasureSpec);\r\n        int min \u003d Math.min(width, height);\r\n        //width \u003d min;\r\n        height \u003d min / 2;\r\n        float top \u003d 0;\r\n        float left \u003d 0;\r\n        int arcDiameter \u003d 0;\r\n        int tickEndToArc \u003d (mTickOffset + mTickLength);\r\n        arcDiameter \u003d min - 2 * tickEndToArc;\r\n        arcDiameter \u003d (int) (arcDiameter - 2 * 20 * DENSITY);\r\n        mArcRadius \u003d arcDiameter / 2;\r\n        top \u003d height - (mArcRadius);\r\n        left \u003d width / 2 - mArcRadius;\r\n        mArcRect.set(left, top, left + arcDiameter, top + arcDiameter);\r\n        mTranslateX \u003d (int) mArcRect.centerX();\r\n        mTranslateY \u003d (int) mArcRect.centerY();\r\n        int thumbAngle \u003d mAngle;\r\n        mThumbXPos \u003d (int) (mArcRadius * Math.cos(Math.toRadians(thumbAngle)));\r\n        mThumbYPos \u003d (int) (mArcRadius * Math.sin(Math.toRadians(thumbAngle)));\r\n        setTouchInside(mTouchInside);\r\n        setMeasuredDimension(width, height + tickEndToArc);\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        canvas.save();\r\n        canvas.scale(1, -1, mArcRect.centerX(), mArcRect.centerY());\r\n        canvas.drawArc(mArcRect, 0, MAX, false, mArcPaint);\r\n        canvas.drawArc(mArcRect, 0, mAngle, false, mArcProgressPaint);\r\n        canvas.restore();\r\n        double slope, startTickX, startTickY, endTickX, endTickY, midTickX, midTickY, thetaInRadians;\r\n        double radiusOffset \u003d mArcRadius + mTickOffset;\r\n\r\n        int count \u003d mTicksBetweenLabel.ordinal();\r\n        for (int i \u003d 360; i \u003e\u003d 180; i -\u003d mTickIntervals) {\r\n            canvas.save();\r\n            if (count \u003d\u003d mTicksBetweenLabel.ordinal()) {\r\n                //for text\r\n                canvas.translate(mArcRect.centerX(), mArcRect.centerY());\r\n                thetaInRadians \u003d Math.toRadians(i);\r\n                slope \u003d Math.tan(thetaInRadians);\r\n                startTickX \u003d (radiusOffset * Math.cos(thetaInRadians));\r\n                midTickX \u003d startTickX + (((mTickLength / 2)) * Math.cos(thetaInRadians));\r\n                midTickY \u003d slope * midTickX;\r\n                canvas.drawText(\"\" + (360 - i), (float) midTickX, (float) midTickY, (mAngle \u003c\u003d 359 - i) ? mTickTextPaint : mTickTextColoredPaint);\r\n                count \u003d 0;\r\n            } else {\r\n                //for tick\r\n                canvas.scale(-1, 1, mArcRect.centerX(), mArcRect.centerY());\r\n                canvas.translate(mArcRect.centerX(), mArcRect.centerY());\r\n                canvas.rotate(180);\r\n                thetaInRadians \u003d Math.toRadians(360 - i);\r\n                slope \u003d Math.tan(thetaInRadians);\r\n                startTickX \u003d (radiusOffset * Math.cos(thetaInRadians));\r\n                startTickY \u003d slope * startTickX;\r\n                endTickX \u003d startTickX + ((mTickLength) * Math.cos(thetaInRadians));\r\n                endTickY \u003d slope * endTickX;\r\n                canvas.drawLine((float) startTickX, (float) startTickY, (float) endTickX, (float) endTickY, (mAngle \u003c\u003d 359 - i) ? mTickPaint : mTickProgressPaint);\r\n                count++;\r\n            }\r\n            canvas.restore();\r\n        }\r\n        if (mEnabled) {\r\n            canvas.save();\r\n            canvas.scale(-1, 1, mArcRect.centerX(), mArcRect.centerY());\r\n            canvas.translate(mTranslateX - mThumbXPos, mTranslateY - mThumbYPos);\r\n            mThumb.draw(canvas);\r\n            canvas.restore();\r\n        }\r\n    }\r\n    @Override\r\n    protected void drawableStateChanged() {\r\n        super.drawableStateChanged();\r\n        if (mThumb !\u003d null \u0026\u0026 mThumb.isStateful()) {\r\n            int[] state \u003d getDrawableState();\r\n            mThumb.setState(state);\r\n        }\r\n        invalidate();\r\n    }\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        if (mEnabled) {\r\n            this.getParent().requestDisallowInterceptTouchEvent(true);\r\n            switch (event.getAction()) {\r\n                case MotionEvent.ACTION_DOWN:\r\n                    if (ignoreTouch(event.getX(), event.getY())) {\r\n                        return false;\r\n                    }\r\n                    onStartTrackingTouch();\r\n                    updateOnTouch(event);\r\n                    break;\r\n                case MotionEvent.ACTION_MOVE:\r\n                    updateOnTouch(event);\r\n                    break;\r\n                case MotionEvent.ACTION_UP:\r\n                    onStopTrackingTouch();\r\n                    setPressed(false);\r\n                    this.getParent().requestDisallowInterceptTouchEvent(false);\r\n                    break;\r\n                case MotionEvent.ACTION_CANCEL:\r\n                    onStopTrackingTouch();\r\n                    setPressed(false);\r\n                    this.getParent().requestDisallowInterceptTouchEvent(false);\r\n                    break;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    private void onStartTrackingTouch() {\r\n        if (mOnProtractorViewChangeListener !\u003d null) {\r\n            mOnProtractorViewChangeListener.onStartTrackingTouch(this);\r\n        }\r\n    }\r\n    private void onStopTrackingTouch() {\r\n        if (mOnProtractorViewChangeListener !\u003d null) {\r\n            mOnProtractorViewChangeListener.onStopTrackingTouch(this);\r\n        }\r\n    }\r\n    private boolean ignoreTouch(float xPos, float yPos) {\r\n        boolean ignore \u003d false;\r\n        float x \u003d xPos - mTranslateX;\r\n        float y \u003d yPos - mTranslateY;\r\n        float touchRadius \u003d (float) Math.sqrt(((x * x) + (y * y)));\r\n        if (touchRadius \u003c mTouchIgnoreRadius || touchRadius \u003e (mArcRadius + mTickLength + mTickOffset)) {\r\n            ignore \u003d true;\r\n        }\r\n        return ignore;\r\n    }\r\n    private void updateOnTouch(MotionEvent event) {\r\n        boolean ignoreTouch \u003d ignoreTouch(event.getX(), event.getY());\r\n        if (ignoreTouch) {\r\n            return;\r\n        }\r\n        setPressed(true);\r\n        mTouchAngle \u003d getTouchDegrees(event.getX(), event.getY());\r\n        onProgressRefresh((int) mTouchAngle, true);\r\n    }\r\n    private double getTouchDegrees(float xPos, float yPos) {\r\n        float x \u003d xPos - mTranslateX;\r\n        float y \u003d yPos - mTranslateY;\r\n        x \u003d -x;\r\n        double angle \u003d Math.toDegrees(Math.atan2(y, x) + (Math.PI));\r\n        if (angle \u003e 270)\r\n            angle \u003d 0;\r\n        else if (angle \u003e 180)\r\n            angle \u003d 180;\r\n        return angle;\r\n    }\r\n    private void onProgressRefresh(int angle, boolean fromUser) {\r\n        updateAngle(angle, fromUser);\r\n    }\r\n    private void updateAngle(int angle, boolean fromUser) {\r\n        mAngle \u003d (angle \u003e MAX) ? MAX : (angle \u003c 0) ? 0 : angle;\r\n        if (mOnProtractorViewChangeListener !\u003d null) {\r\n            mOnProtractorViewChangeListener.onProgressChanged(this, mAngle, fromUser);\r\n        }\r\n        updateThumbPosition();\r\n        invalidate();\r\n    }\r\n    private void updateThumbPosition() {\r\n        int thumbAngle \u003d mAngle;\r\n        mThumbXPos \u003d (int) (mArcRadius * Math.cos(Math.toRadians(thumbAngle)));\r\n        mThumbYPos \u003d (int) (mArcRadius * Math.sin(Math.toRadians(thumbAngle)));\r\n    }\r\n    public boolean getTouchInside() {\r\n        return mTouchInside;\r\n    }\r\n    public void setTouchInside(boolean isEnabled) {\r\n        int thumbHalfheight \u003d (int) mThumb.getIntrinsicHeight() / 2;\r\n        int thumbHalfWidth \u003d (int) mThumb.getIntrinsicWidth() / 2;\r\n        mTouchInside \u003d isEnabled;\r\n        if (mTouchInside) {\r\n            mTouchIgnoreRadius \u003d (float) (mArcRadius / 1.5);\r\n        } else {\r\n            mTouchIgnoreRadius \u003d mArcRadius - Math.min(thumbHalfWidth, thumbHalfheight);\r\n        }\r\n    }\r\n    public void setOnProtractorViewChangeListener(OnProtractorViewChangeListener l) {\r\n        mOnProtractorViewChangeListener \u003d l;\r\n    }\r\n    public OnProtractorViewChangeListener getOnProtractorViewChangeListener() {\r\n        return mOnProtractorViewChangeListener;\r\n    }\r\n    public int getAngle() {\r\n        return mAngle;\r\n    }\r\n    public void setAngle(int angle) {\r\n        this.mAngle \u003d angle;\r\n        onProgressRefresh(mAngle, false);\r\n    }\r\n    public boolean isEnabled() {\r\n        return mEnabled;\r\n    }\r\n    public void setEnabled(boolean enabled) {\r\n        this.mEnabled \u003d enabled;\r\n        invalidate();\r\n    }\r\n    public int getProgressColor() {\r\n        return mArcProgressPaint.getColor();\r\n    }\r\n    public void setProgressColor(int color) {\r\n        mArcProgressPaint.setColor(color);\r\n        invalidate();\r\n    }\r\n    public int getArcColor() {\r\n        return mArcPaint.getColor();\r\n    }\r\n    public void setArcColor(int color) {\r\n        mArcPaint.setColor(color);\r\n        invalidate();\r\n    }\r\n    public int getArcProgressWidth() {\r\n        return mArcProgressWidth;\r\n    }\r\n    public void setArcProgressWidth(int arcProgressWidth) {\r\n        this.mArcProgressWidth \u003d arcProgressWidth;\r\n        mArcProgressPaint.setStrokeWidth(arcProgressWidth);\r\n        invalidate();\r\n    }\r\n    public int getArcWidth() {\r\n        return mArcWidth;\r\n    }\r\n    public void setArcWidth(int arcWidth) {\r\n        this.mArcWidth \u003d arcWidth;\r\n        mArcPaint.setStrokeWidth(arcWidth);\r\n        invalidate();\r\n    }\r\n    public boolean isRoundedEdges() {\r\n        return mRoundedEdges;\r\n    }\r\n    public void setRoundedEdges(boolean roundedEdges) {\r\n        this.mRoundedEdges \u003d roundedEdges;\r\n        if (roundedEdges) {\r\n            mArcPaint.setStrokeCap(Paint.Cap.ROUND);\r\n            mArcProgressPaint.setStrokeCap(Paint.Cap.ROUND);\r\n        } else {\r\n            mArcPaint.setStrokeCap(Paint.Cap.SQUARE);\r\n            mArcPaint.setStrokeCap(Paint.Cap.SQUARE);\r\n        }\r\n        invalidate();\r\n    }\r\n    public android.graphics.drawable.Drawable getThumb() {\r\n        return mThumb;\r\n    }\r\n    public void setThumb(android.graphics.drawable.Drawable thumb) {\r\n        this.mThumb \u003d thumb;\r\n        invalidate();\r\n    }\r\n    public int getAngleTextSize() {\r\n        return mAngleTextSize;\r\n    }\r\n    public void setAngleTextSize(int angleTextSize) {\r\n        this.mAngleTextSize \u003d angleTextSize;\r\n        invalidate();\r\n    }\r\n    public int getTickOffset() {\r\n        return mTickOffset;\r\n    }\r\n    public void setTickOffset(int tickOffset) {\r\n        this.mTickOffset \u003d tickOffset;\r\n    }\r\n    public int getTickLength() {\r\n        return mTickLength;\r\n    }\r\n    public void setTickLength(int tickLength) {\r\n        this.mTickLength \u003d tickLength;\r\n    }\r\n    public TicksBetweenLabel getTicksBetweenLabel() {\r\n        return mTicksBetweenLabel;\r\n    }\r\n    public void setTicksBetweenLabel(TicksBetweenLabel ticksBetweenLabel) {\r\n        this.mTicksBetweenLabel \u003d mTicksBetweenLabel;\r\n        invalidate();\r\n    }\r\n    public int getTickIntervals() {\r\n        return mTickIntervals;\r\n    }\r\n    public void setTickIntervals(int tickIntervals) {\r\n        this.mTickIntervals \u003d tickIntervals;\r\n        invalidate();\r\n    }\r\n}"},{"name":"Nogut BootView","code":"//Create NougatBoot View :\r\n\r\nandroid.graphics.drawable.Drawable nougatBoot \u003d new NougatBoot();\r\nprogressbar1.setIndeterminateDrawable(nougatBoot);\r\n\r\n//Add Class :\r\n\r\npublic static class NougatBoot extends SpriteContainer {\r\n    @Override\r\n    public Sprite[] onCreateChild() {\r\n        return new Sprite[]{\r\n                new Circle(Color.parseColor(\"#DB4437\"), 0, 360),\r\n                new Circle(Color.parseColor(\"#F4B400\"), 72, -288),\r\n                new Circle(Color.parseColor(\"#4285F4\"), -144, 216),\r\n                new Circle(Color.parseColor(\"#0F9D58\"), 216, -144)\r\n        };\r\n    }\r\n    @Override\r\n    public void setColor(int color) {\r\n    }\r\n    class Circle extends ShapeSprite {\r\n        private int startAngle, endAngle;\r\n        private float[] p0, p1, p2, p3, c0, c1, c2, c3, c4, c5, c6, c7;\r\n        private Path path;\r\n        private int strokeWidth;\r\n        public Circle(int color, int startAngle, int endAngle) {\r\n            setColor(color);\r\n            this.startAngle \u003d startAngle;\r\n            this.endAngle \u003d endAngle;\r\n        }\r\n        @Override\r\n        protected void onBoundsChange(Rect bounds) {\r\n            super.onBoundsChange(bounds);\r\n            setDrawBounds(clipSquare(bounds));\r\n            int w \u003d getDrawBounds().width();\r\n            int h \u003d getDrawBounds().height();\r\n            p0 \u003d new float[]{0, h / 2};\r\n            p1 \u003d new float[]{w / 2, 0};\r\n            p2 \u003d new float[]{w, h / 2};\r\n            p3 \u003d new float[]{w / 2, h};\r\n            c0 \u003d new float[]{0, h * 3 / 4};\r\n            c1 \u003d new float[]{0, h / 9};\r\n            c2 \u003d new float[]{w / 4, 0};\r\n            c3 \u003d new float[]{w * 3 / 4, 0};\r\n            c4 \u003d new float[]{w, h / 9};\r\n            c5 \u003d new float[]{w, h * 3 / 4};\r\n            c6 \u003d new float[]{w * 3 / 4, h};\r\n            c7 \u003d new float[]{w / 8, h};\r\n            path \u003d new Path();\r\n            path.moveTo(p0[0], p0[1]);\r\n            cubicTo(path, c1, c2, p1);\r\n            cubicTo(path, c3, c4, p2);\r\n            cubicTo(path, c5, c6, p3);\r\n            cubicTo(path, c7, c0, p0);\r\n            strokeWidth \u003d getDrawBounds().width() / 18;\r\n        }\r\n        @Override\r\n        public void drawShape(Canvas canvas, Paint paint) {\r\n            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SCREEN));\r\n            paint.setStrokeWidth(strokeWidth);\r\n            paint.setStyle(Paint.Style.STROKE);\r\n            canvas.translate(getDrawBounds().left, getDrawBounds().top);\r\n            canvas.drawPath(path, paint);\r\n        }\r\n        private void cubicTo(Path path, float[] c0, float[] c1, float[] p) {\r\n            path.cubicTo(\r\n                    c0[0], c0[1],\r\n                    c1[0], c1[1],\r\n                    p[0], p[1]\r\n            );\r\n        }\r\n        @Override\r\n        public ValueAnimator onCreateAnimation() {\r\n            float[] fractions \u003d new float[]{0, 1};\r\n            return new SpriteAnimatorBuilder(this).\r\n                    rotate(fractions, startAngle, endAngle).\r\n                    duration(5500).\r\n                    build();\r\n        }\r\n    }\r\n}"},{"name":"Image to Ascii","code":"//Create Image To Ascii\r\nBitmap image \u003d BitmapFactory.decodeResource(getResources(), R.drawable.image);\r\n\r\n//Get Image Frim File Path\r\nBitmap image \u003d BitmapFactory.decodeFile(\"/sdcard/codify.png\");\r\n\r\nnew Img2Ascii()\r\n.bitmap(image)\r\n.quality(3)\r\n.color(true)\r\n .convert(new Img2Ascii.Listener() {\r\n      @Override\r\n      public void onProgress(int percentage) {\r\ntextView.setText(String.valueOf(percentage) + \" %\");\r\n}\r\n@Override\r\npublic void onResponse(Spannable text) {\r\ntextView.setText(text);\r\n}\r\n});\r\n\r\n//Add Class :\r\n\r\npublic static class Img2Ascii {\r\n    private String[] chars \u003d {\"@\", \"#\", \"+\", \"\\\\\", \";\", \":\", \",\", \".\", \"`\", \" \"};\r\n    private Bitmap rgbImage;\r\n    private Boolean color \u003d false;\r\n    private int quality \u003d 3;\r\n    private int qualityColor \u003d 6;\r\n    private Spannable response;\r\n    private Listener listener;\r\n    public Img2Ascii(){\r\n    }\r\n    public Img2Ascii bitmap(Bitmap rgbImage){\r\n        this.rgbImage \u003d rgbImage;\r\n        return this;\r\n    }\r\n    public Img2Ascii quality(int quality){\r\n        this.quality \u003d quality;\r\n        return this;\r\n    }\r\n    public Img2Ascii color(Boolean color){\r\n        this.color \u003d color;\r\n        return this;\r\n    }\r\n    public void convert(Listener listener) {\r\n        this.listener \u003d listener;\r\n        new InstaApi().execute();\r\n    }\r\n    private class InstaApi extends AsyncTask\u003cString, Integer, Void\u003e {\r\n        private InstaApi(){\r\n        }\r\n        @Override\r\n        protected void onPreExecute() {\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected Void doInBackground(String... arg0) {\r\n            if(color) {\r\n                quality \u003d quality + qualityColor;\r\n                if (quality \u003e 5 + qualityColor || quality \u003c 1 + qualityColor)\r\n                    quality \u003d 3 + qualityColor;\r\n            }else{\r\n                if (quality \u003e 5 || quality \u003c 1)\r\n                    quality \u003d 3;\r\n            }\r\n            String tx;\r\n            SpannableStringBuilder span \u003d new SpannableStringBuilder();\r\n            int width \u003d rgbImage.getWidth();\r\n            int height \u003d rgbImage.getHeight();\r\n            int i \u003d 0;\r\n            for (int y \u003d 0; y \u003c height; y \u003d y + quality) {\r\n                for (int x \u003d 0; x \u003c width; x \u003d x + quality) {\r\n                    int pixel \u003d rgbImage.getPixel(x, y);\r\n                    int red \u003d Color.red(pixel);\r\n                    int green \u003d Color.green(pixel);\r\n                    int blue \u003d Color.blue(pixel);\r\n                    if(color) {\r\n                        tx \u003d \"#\";\r\n                        span.append(tx);\r\n                        span.setSpan(new android.text.style.ForegroundColorSpan(Color.rgb(red, green, blue)), i, i + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n                    }else {\r\n                        int brightness \u003d red + green + blue;\r\n                        brightness \u003d java.lang.Math.round(brightness / (765 / (chars.length - 1)));\r\n                        tx \u003d chars[brightness];\r\n                        span.append(tx);\r\n                    }\r\n                    i++;\r\n                }\r\n                tx \u003d \"\r\n\";\r\n                span.append(tx);\r\n                publishProgress(y, height);\r\n                i++;\r\n                if(isCancelled()) break;\r\n            }\r\n            response \u003d span;\r\n\r\n            return null;\r\n        }\r\n        protected void onProgressUpdate(Integer... progress) {\r\n            int current \u003d progress[0];\r\n            int total \u003d progress[1];\r\n            int percentage \u003d 100 * current / total;\r\n            listener.onProgress(percentage);\r\n        }\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n            super.onPostExecute(result);\r\n            listener.onResponse(response);\r\n        }\r\n\r\n    }\r\n    public interface Listener {\r\n        void onProgress(int percentage);\r\n        void onResponse(Spannable response);\r\n    }\r\n}"},{"name":"HiveProgress","code":"//Create Hive ProgressView :\r\n\r\nHiveProgressView progressView \u003d new HiveProgressView(this);\r\nlinear1.addView(progressView);\r\nprogressView.setRainbow(false);\r\nprogressView.setColor(0x000000);\r\n\r\n//Attributes :\r\n\r\nprogressView.getColor();\r\nprogressView.getAnimationTime();\r\nprogressView.isRainbow();\r\nprogressView.setAnimationTime(int);\r\nprogressView.setShrink(boolean);\r\nprogressView.isShrink();\r\nprogressView.setMaxAlpha(int);\r\nprogressView.getMaxAlpha();\r\nprogressView.setCornerRadius(int);\r\nprogressView.getCornerRadius();\r\n\r\n//Add Class :\r\n\r\npublic static class HiveProgressView extends View {\r\n    private static final int[] rainbowColor \u003d {\r\n        0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, 0x0000FF, 0x4B0082, 0x9400D3\r\n    };\r\n    private static final int MAX_PROGRESS_VALUE \u003d 1450;\r\n    private static final int PROGRESS_TIME \u003d 2000;\r\n    private static final int MAX_ALPHA \u003d 70;\r\n    private Paint paint \u003d new Paint();\r\n    private int hexHeight;\r\n    private int hexWidth;\r\n    private int hexPadding \u003d 0;\r\n    private float actualProgress \u003d 0;\r\n    private int maxAlpha \u003d MAX_ALPHA;\r\n    private int animationTime \u003d PROGRESS_TIME;\r\n    private int color;\r\n    private boolean rainbow;\r\n    private int cornerRadius;\r\n    private boolean shrink;\r\n    private AnimatorSet indeterminateAnimator;\r\n    public HiveProgressView(Context context) {\r\n        super(context);\r\n    }\r\n    public HiveProgressView(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n    public HiveProgressView(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        initAttributes(attrs, defStyle);\r\n        initPaint();\r\n    }\r\n    private void initAttributes(AttributeSet attrs, int defStyle) {\r\n        animationTime \u003d PROGRESS_TIME;\r\n        maxAlpha \u003d MAX_ALPHA;\r\n        color \u003d Color.BLACK;\r\n        rainbow \u003d false;\r\n        shrink \u003d false;\r\n        cornerRadius \u003d 0;\r\n    }\r\n    public int getMaxAlpha() {\r\n        return maxAlpha;\r\n    }\r\n    public void setMaxAlpha(int maxAlpha) {\r\n        this.maxAlpha \u003d maxAlpha;\r\n    }\r\n    public int getAnimationTime() {\r\n        return animationTime;\r\n    }\r\n    public void setAnimationTime(int animationTime) {\r\n        this.animationTime \u003d animationTime;\r\n    }\r\n    public int getColor() {\r\n        return color;\r\n    }\r\n    public void setColor(int color) {\r\n        this.color \u003d color;\r\n    }\r\n    public boolean isRainbow() {\r\n        return rainbow;\r\n    }\r\n    public void setRainbow(boolean rainbow) {\r\n        this.rainbow \u003d rainbow;\r\n    }\r\n    public int getCornerRadius() {\r\n        return cornerRadius;\r\n    }\r\n    public void setCornerRadius(int cornerRadius) {\r\n        this.cornerRadius \u003d cornerRadius;\r\n    }\r\n    public boolean isShrink() {\r\n        return shrink;\r\n    }\r\n    public void setShrink(boolean shrink) {\r\n        this.shrink \u003d shrink;\r\n    }\r\n    private void initPaint() {\r\n        paint.setAlpha(0);\r\n        paint.setPathEffect(new CornerPathEffect(cornerRadius));\r\n        paint.setColor(color);\r\n        paint.setStyle(Paint.Style.FILL);\r\n        paint.setAntiAlias(true);\r\n    }\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        startAnimation();\r\n    }\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        stopAnimation();\r\n    }\r\n    @Override\r\n    public void setVisibility(int visibility) {\r\n        int currentVisibility \u003d getVisibility();\r\n        super.setVisibility(visibility);\r\n        if (visibility !\u003d currentVisibility) {\r\n            if (visibility \u003d\u003d View.VISIBLE) {\r\n                resetAnimator();\r\n            } else if (visibility \u003d\u003d View.GONE || visibility \u003d\u003d View.INVISIBLE) {\r\n                stopAnimation();\r\n            }\r\n        }\r\n    }\r\n    private void startAnimation() {\r\n        resetAnimator();\r\n    }\r\n    private void stopAnimation() {\r\n        actualProgress \u003d 0;\r\n        if (indeterminateAnimator !\u003d null) {\r\n            indeterminateAnimator.cancel();\r\n            indeterminateAnimator \u003d null;\r\n        }\r\n    }\r\n    private void resetAnimator() {\r\n        if (indeterminateAnimator !\u003d null \u0026\u0026 indeterminateAnimator.isRunning()) {\r\n            indeterminateAnimator.cancel();\r\n        }\r\n        ValueAnimator progressAnimator \u003d ValueAnimator.ofFloat(0, MAX_PROGRESS_VALUE);\r\n        progressAnimator.setDuration(animationTime);\r\n        progressAnimator.setInterpolator(new LinearInterpolator());\r\n        progressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                actualProgress \u003d (Float) animation.getAnimatedValue();\r\n                invalidate();\r\n            }\r\n        });\r\n        indeterminateAnimator \u003d new AnimatorSet();\r\n        indeterminateAnimator.play(progressAnimator);\r\n        indeterminateAnimator.addListener(new AnimatorListenerAdapter() {\r\n            boolean wasCancelled \u003d false;\r\n            @Override\r\n            public void onAnimationCancel(Animator animation) {\r\n                wasCancelled \u003d true;\r\n            }\r\n            @Override\r\n            public void onAnimationEnd(Animator animation) {\r\n                if (!wasCancelled) {\r\n                    resetAnimator();\r\n                }\r\n            }\r\n        });\r\n        indeterminateAnimator.start();\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int viewWidth \u003d MeasureSpec.getSize(widthMeasureSpec);\r\n        int viewHeight \u003d viewWidth;\r\n        hexWidth \u003d viewWidth / 3;\r\n        hexHeight \u003d viewHeight * 2 / 5;\r\n        hexPadding \u003d viewHeight / 23;\r\n        setMeasuredDimension(viewWidth, viewHeight);\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        int alpha \u003d getAlpha(1, actualProgress);\r\n        paint.setColor(getHexagonColor(1));\r\n        paint.setAlpha(alpha);\r\n        Path hexPath \u003d hiveRect(hexWidth / 2, hexPadding, hexWidth * 3 / 2, hexHeight + hexPadding,\r\n                                (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(2, actualProgress);\r\n        paint.setColor(getHexagonColor(2));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 3 / 2, hexPadding, hexWidth * 5 / 2, hexHeight + hexPadding,\r\n                           (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(6, actualProgress);\r\n        paint.setColor(getHexagonColor(6));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(0, hexHeight * 3 / 4 + hexPadding, hexWidth,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(7, actualProgress);\r\n        paint.setColor(getHexagonColor(7));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth, hexHeight * 3 / 4 + hexPadding, hexWidth * 2,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(3, actualProgress);\r\n        paint.setColor(getHexagonColor(3));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 2, hexHeight * 3 / 4 + hexPadding, hexWidth * 3,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(5, actualProgress);\r\n        paint.setColor(getHexagonColor(5));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth / 2, hexHeight * 6 / 4 + hexPadding, hexWidth * 3 / 2,\r\n                           hexHeight * 10 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(4, actualProgress);\r\n        paint.setColor(getHexagonColor(4));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 3 / 2, hexHeight * 6 / 4 + hexPadding, hexWidth * 5 / 2,\r\n                           hexHeight * 10 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n    }\r\n    private int getHexagonColor(int position) {\r\n        if (rainbow \u0026\u0026 position \u003c\u003d rainbowColor.length) {\r\n            return rainbowColor[position - 1];\r\n        } else {\r\n            return color;\r\n        }\r\n    }\r\n    private int getAlpha(int num, float progress) {\r\n        float alpha;\r\n        if (progress \u003e num * 100) {\r\n            alpha \u003d maxAlpha;\r\n        } else {\r\n            int min \u003d (num - 1) * 100;\r\n            alpha \u003d (progress - min) \u003e 0 ? progress - min : 0;\r\n            alpha \u003d alpha * maxAlpha / 100;\r\n        }\r\n        if (progress \u003e 700) {\r\n            float fadeProgress \u003d progress - 700;\r\n            if (fadeProgress \u003e num * 100) {\r\n                alpha \u003d 0;\r\n            } else {\r\n                int min \u003d (num - 1) * 100;\r\n                alpha \u003d (fadeProgress - min) \u003e 0 ? fadeProgress - min : 0;\r\n                alpha \u003d maxAlpha - alpha * maxAlpha / 100;\r\n            }\r\n        }\r\n        if (progress \u003e 1400) {\r\n            alpha \u003d 0;\r\n        }\r\n        return (int) alpha;\r\n    }\r\n    private Path hiveRect(int left, int top, int right, int bottom, float percentage) {\r\n        Path path \u003d new Path();\r\n        int height \u003d Math.abs(bottom - top);\r\n        int width \u003d Math.abs(right - left);\r\n        int r \u003d width \u003e height ? height : width;\r\n        r \u003d r / 2;\r\n        int y \u003d top;\r\n        if (shrink) {\r\n            y \u003d top + (int) (r - percentage * r);\r\n            r \u003d (int) (percentage * r);\r\n        }\r\n        int x \u003d (right - left) / 2 + left;\r\n        int edge \u003d (int) (r * Math.sqrt(3) / 2);\r\n        path.moveTo(x, y);\r\n        x \u003d x + edge;\r\n        y \u003d y + r / 2;\r\n        path.lineTo(x, y);\r\n        y \u003d y + r;\r\n        path.lineTo(x, y);\r\n        x \u003d x - edge;\r\n        y \u003d y + r / 2;\r\n        path.lineTo(x, y);\r\n        x \u003d x - edge;\r\n        y \u003d y - r / 2;\r\n        path.lineTo(x, y);\r\n        y \u003d y - r;\r\n        path.lineTo(x, y);\r\n        path.close();\r\n        return path;\r\n    }\r\n}"},{"name":"Flat Button ","code":"//Create Flat Button :\r\n\r\nFButton fb \u003d new FButton(this);\r\nLinearLayout.LayoutParams lp \u003d new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\r\nfb.setLayoutParams(lp);\r\nfb.setText(\"Button\");\r\nfb.setButtonColor(0x3eadeb);\r\nfb.setShadowEnabled(true);\r\nfb.setShadowColor(0xff3493c8);\r\nfb.setCornerRadius(8);\r\nlinear1.addView(fb);\r\n\r\n//Attributes :\r\n\r\nfb.setShadowEnabled(boolean);\r\nfb.setButtonColor(int);\r\nfb.setShadowColor(int);\r\nfb.setShadowHeight(int);\r\nfb.setCornerRadius(int);\r\nfb.setFButtonPadding(int left, int top, int right, int bottom);\r\nfb.setEnabled(boolean);\r\nfb.isShadowEnabled();\r\nfb.getButtonColor();\r\nfb.getShadowColor();\r\nfb.getShadowHeight();\r\nfb.getCornerRadius();\r\nfb.setCompoundDrawablesWithIntrinsicBounds(R.drawable.icon, 0, 0, 0);\r\n\r\n//Add Class :\r\n\r\npublic static class FButton extends Button implements View.OnTouchListener {\r\n    private boolean isShadowEnabled \u003d true;\r\n    private int mButtonColor;\r\n    private int mShadowColor;\r\n    private int mShadowHeight;\r\n    private int mCornerRadius;\r\n    private int mPaddingLeft;\r\n    private int mPaddingRight;\r\n    private int mPaddingTop;\r\n    private int mPaddingBottom;\r\n    private android.graphics.drawable.Drawable pressedDrawable;\r\n    private android.graphics.drawable.Drawable unpressedDrawable;\r\n    boolean isShadowColorDefined \u003d false;\r\n    public FButton(Context context) {\r\n        super(context);\r\n        init();\r\n        this.setOnTouchListener(this);\r\n    }\r\n    public FButton(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n        parseAttrs(context, attrs);\r\n        this.setOnTouchListener(this);\r\n    }\r\n    public FButton(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        init();\r\n        parseAttrs(context, attrs);\r\n        this.setOnTouchListener(this);\r\n    }\r\n    @Override\r\n    protected void onFinishInflate() {\r\n        super.onFinishInflate();\r\n        refresh();\r\n    }\r\n    @Override\r\n    public boolean onTouch(View view, MotionEvent motionEvent) {\r\n        switch (motionEvent.getAction()) {\r\n            case MotionEvent.ACTION_DOWN:\r\n                updateBackground(pressedDrawable);\r\n                this.setPadding(mPaddingLeft, mPaddingTop + mShadowHeight, mPaddingRight, mPaddingBottom);\r\n                break;\r\n            case MotionEvent.ACTION_MOVE:\r\n                Rect r \u003d new Rect();\r\n                view.getLocalVisibleRect(r);\r\n                if (!r.contains((int) motionEvent.getX(), (int) motionEvent.getY() + 3 * mShadowHeight) \u0026\u0026\r\n                        !r.contains((int) motionEvent.getX(), (int) motionEvent.getY() - 3 * mShadowHeight)) {\r\n                    updateBackground(unpressedDrawable);\r\n                    this.setPadding(mPaddingLeft, mPaddingTop + mShadowHeight, mPaddingRight, mPaddingBottom + mShadowHeight);\r\n                }\r\n                break;\r\n            case MotionEvent.ACTION_OUTSIDE:\r\n            case MotionEvent.ACTION_CANCEL:\r\n            case MotionEvent.ACTION_UP:\r\n                updateBackground(unpressedDrawable);\r\n                this.setPadding(mPaddingLeft, mPaddingTop + mShadowHeight, mPaddingRight, mPaddingBottom + mShadowHeight);\r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n    private void init() {\r\n        isShadowEnabled \u003d true;\r\n        mButtonColor \u003d 0x3eadeb; \r\n        mShadowColor \u003d 0xff3493c8; \r\n        mShadowHeight \u003d 4;\r\n        mCornerRadius \u003d 8;\r\n    }\r\n\r\n    private void parseAttrs(Context context, AttributeSet attrs) {\r\n         isShadowEnabled \u003d true;\r\n         mButtonColor \u003d 0x3eadeb;\r\n         mShadowColor \u003d 0xff3493c8;\r\n         isShadowColorDefined \u003d true;\r\n         mShadowHeight \u003d 4;\r\n         mCornerRadius \u003d 8;\r\n        int[] attrsArray \u003d new int[]{\r\n                android.R.attr.paddingLeft,  \r\n                android.R.attr.paddingRight,\r\n        };\r\n        android.content.res.TypedArray ta \u003d context.obtainStyledAttributes(attrs, attrsArray);\r\n        if (ta \u003d\u003d null) return;\r\n        mPaddingLeft \u003d ta.getDimensionPixelSize(0, 0);\r\n        mPaddingRight \u003d ta.getDimensionPixelSize(1, 0);\r\n        ta.recycle();\r\n        int[] attrsArray2 \u003d new int[]{\r\n                android.R.attr.paddingTop,  \r\n                android.R.attr.paddingBottom,\r\n        };\r\n        android.content.res.TypedArray ta1 \u003d context.obtainStyledAttributes(attrs, attrsArray2);\r\n        if (ta1 \u003d\u003d null) return;\r\n        mPaddingTop \u003d ta1.getDimensionPixelSize(0, 0);\r\n        mPaddingBottom \u003d ta1.getDimensionPixelSize(1, 0);\r\n        ta1.recycle();\r\n    }\r\n    public void refresh() {\r\n        int alpha \u003d Color.alpha(mButtonColor);\r\n        float[] hsv \u003d new float[3];\r\n        Color.colorToHSV(mButtonColor, hsv);\r\n        hsv[2] *\u003d 0.8f;\r\n        if (!isShadowColorDefined) {\r\n            mShadowColor \u003d Color.HSVToColor(alpha, hsv);\r\n        }\r\n        if (this.isEnabled()) {\r\n            if (isShadowEnabled) {\r\n                pressedDrawable \u003d createDrawable(mCornerRadius, Color.TRANSPARENT, mButtonColor);\r\n                unpressedDrawable \u003d createDrawable(mCornerRadius, mButtonColor, mShadowColor);\r\n            } else {\r\n                mShadowHeight \u003d 0;\r\n                pressedDrawable \u003d createDrawable(mCornerRadius, mShadowColor, Color.TRANSPARENT);\r\n                unpressedDrawable \u003d createDrawable(mCornerRadius, mButtonColor, Color.TRANSPARENT);\r\n            }\r\n        } else {\r\n            Color.colorToHSV(mButtonColor, hsv);\r\n            hsv[1] *\u003d 0.25f;\r\n            int disabledColor \u003d mShadowColor \u003d Color.HSVToColor(alpha, hsv);\r\n            pressedDrawable \u003d createDrawable(mCornerRadius, disabledColor, Color.TRANSPARENT);\r\n            unpressedDrawable \u003d createDrawable(mCornerRadius, disabledColor, Color.TRANSPARENT);\r\n        }\r\n        updateBackground(unpressedDrawable);\r\n        this.setPadding(mPaddingLeft, mPaddingTop + mShadowHeight, mPaddingRight, mPaddingBottom + mShadowHeight);\r\n    }    \r\n\t@SuppressWarnings(\"deprecation\")\r\n    private void updateBackground(android.graphics.drawable.Drawable background) {\r\n        if (background \u003d\u003d null) return;\r\n        if (Build.VERSION.SDK_INT \u003e\u003d 16) {\r\n            this.setBackground(background);\r\n        } else {\r\n            this.setBackgroundDrawable(background);\r\n        }\r\n    }\r\n    private android.graphics.drawable.LayerDrawable createDrawable(int radius, int topColor, int bottomColor) {\r\n        float[] outerRadius \u003d new float[]{radius, radius, radius, radius, radius, radius, radius, radius};\r\n        android.graphics.drawable.shapes.RoundRectShape topRoundRect \u003d new android.graphics.drawable.shapes.RoundRectShape(outerRadius, null, null);\r\n        android.graphics.drawable.ShapeDrawable topShapeDrawable \u003d new android.graphics.drawable.ShapeDrawable(topRoundRect);\r\n        topShapeDrawable.getPaint().setColor(topColor);\r\n        android.graphics.drawable.shapes.RoundRectShape roundRectShape \u003d new android.graphics.drawable.shapes.RoundRectShape(outerRadius, null, null);\r\n        android.graphics.drawable.ShapeDrawable bottomShapeDrawable \u003d new android.graphics.drawable.ShapeDrawable(roundRectShape);\r\n        bottomShapeDrawable.getPaint().setColor(bottomColor);\r\n        android.graphics.drawable.Drawable[] drawArray \u003d {bottomShapeDrawable, topShapeDrawable};\r\n        android.graphics.drawable.LayerDrawable layerDrawable \u003d new android.graphics.drawable.LayerDrawable(drawArray);\r\n        if (isShadowEnabled \u0026\u0026 topColor !\u003d Color.TRANSPARENT) {\r\n            layerDrawable.setLayerInset(0, 0, 0, 0, 0); \r\n        } else {\r\n            layerDrawable.setLayerInset(0, 0, mShadowHeight, 0, 0);  \r\n        }\r\n        layerDrawable.setLayerInset(1, 0, 0, 0, mShadowHeight); \r\n        return layerDrawable;\r\n    }\r\n    public void setShadowEnabled(boolean isShadowEnabled) {\r\n        this.isShadowEnabled \u003d isShadowEnabled;\r\n        setShadowHeight(0);\r\n        refresh();\r\n    }\r\n    public void setButtonColor(int buttonColor) {\r\n        this.mButtonColor \u003d buttonColor;\r\n        refresh();\r\n    }\r\n    public void setShadowColor(int shadowColor) {\r\n        this.mShadowColor \u003d shadowColor;\r\n        isShadowColorDefined \u003d true;\r\n        refresh();\r\n    }\r\n    public void setShadowHeight(int shadowHeight) {\r\n        this.mShadowHeight \u003d shadowHeight;\r\n        refresh();\r\n    }\r\n    public void setCornerRadius(int cornerRadius) {\r\n        this.mCornerRadius \u003d cornerRadius;\r\n        refresh();\r\n    }\r\n    public void setFButtonPadding(int left, int top, int right, int bottom) {\r\n        mPaddingLeft \u003d left;\r\n        mPaddingRight \u003d right;\r\n        mPaddingTop \u003d top;\r\n        mPaddingBottom \u003d bottom;\r\n        refresh();\r\n    }\r\n    @Override\r\n    public void setEnabled(boolean enabled) {\r\n        super.setEnabled(enabled);\r\n        refresh();\r\n    }\r\n    public boolean isShadowEnabled() {\r\n        return isShadowEnabled;\r\n    }\r\n    public int getButtonColor() {\r\n        return mButtonColor;\r\n    }\r\n    public int getShadowColor() {\r\n        return mShadowColor;\r\n    }\r\n    public int getShadowHeight() {\r\n        return mShadowHeight;\r\n    }\r\n    public int getCornerRadius() {\r\n        return mCornerRadius;\r\n    }\r\n}"},{"name":"Croller","code":"//Create Croller :\r\n\r\nfinal Croller croller \u003d new Croller(this);\r\ncroller.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\r\n\r\ncroller.setIndicatorWidth(10);\r\ncroller.setBackCircleColor(Color.parseColor(\"#EDEDED\"));\r\ncroller.setMainCircleColor(Color.WHITE);\r\ncroller.setMax(50);\r\ncroller.setStartOffset(45);\r\ncroller.setIsContinuous(false);\r\ncroller.setLabelColor(Color.BLACK);\r\ncroller.setProgressPrimaryColor(Color.parseColor(\"#0B3C49\"));\r\ncroller.setIndicatorColor(Color.parseColor(\"#0B3C49\"));\r\ncroller.setProgressSecondaryColor(Color.parseColor(\"#EEEEEE\"));\r\n\r\ncroller.setOnProgressChangedListener(new Croller.onProgressChangedListener() {\r\n\t@Override\r\n\tpublic void onProgressChanged(int progress) {\r\n\t}\r\n});\r\n\r\nCroller croller.setOnCrollerChangeListener(new OnCrollerChangeListener() {\r\n@Override\r\n\tpublic void onProgressChanged(Croller croller, int progress) {\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onStartTrackingTouch(Croller croller) {\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onStopTrackingTouch(Croller croller) {\r\n\t\t\r\n\t}\r\n});\r\nlinear.addView(croller);\r\n\r\n\r\n// Attributes :\r\n\r\ncroller.setAntiClockwise(boolean anticlockwise) ;\r\ncroller.setProgress(int progress) \r\ncroller.setLabel(String str) \r\ncroller.setLabelSize(int size);\r\ncroller.setLabelColor(int color);\r\ncroller.setIsContinuous(boolean bool);\r\ncroller.setMax(int max);\r\ncroller.setMin(int min);\r\ncroller.setStartOffset(int offset);\r\ncroller.setSweepAngle(int angle);\r\ncroller.setProgressPrimaryStrokeWidth(float width);\r\ncroller.setProgressSecondaryStrokeWidth(float width);\r\ncroller.setProgressPrimaryCircleSize(float size);\r\ncroller.setProgressSecondaryCircleSize(float size);\r\ncroller.setIndicatorWidth(float width);\r\ncroller.setIndicatorColor(int color);\r\ncroller.setProgressPrimaryColor(int color);\r\ncroller.setProgressSecondaryColor(int color);\r\ncroller.setProgressRadius(float radius);\r\ncroller.setMainCircleRadius(float radius);\r\ncroller.setBackCircleRadius(float radius);\r\ncroller.setMainCircleColor(int color);\r\ncroller.setBackCircleColor(int color);\r\n\r\n\r\n//Add Class :\r\n\r\npublic static interface OnCrollerChangeListener {\r\n    void onProgressChanged(Croller croller, int progress);\r\n    void onStartTrackingTouch(Croller croller);\r\n    void onStopTrackingTouch(Croller croller);\r\n}\r\npublic static class Utils {\r\n    public static float getDistance(float x1, float y1, float x2, float y2) {\r\n        return (float) Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n    }\r\n    public static float convertDpToPixel(float dp, Context context) {\r\n        android.content.res.Resources resources \u003d context.getResources();\r\n        DisplayMetrics metrics \u003d resources.getDisplayMetrics();\r\n        return dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\r\n    }\r\n    public static float convertPixelsToDp(float px, Context context) {\r\n        android.content.res.Resources resources \u003d context.getResources();\r\n        DisplayMetrics metrics \u003d resources.getDisplayMetrics();\r\n        return px / ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\r\n    }\r\n}\r\n\r\n\r\n\r\npublic static class Croller extends View {\r\n    private float midx, midy;\r\n    private Paint textPaint, circlePaint, circlePaint2, linePaint;\r\n    private float currdeg \u003d 0, deg \u003d 3, downdeg \u003d 0;\r\n    private boolean isContinuous \u003d false;\r\n    private int backCircleColor \u003d Color.parseColor(\"#222222\");\r\n    private int mainCircleColor \u003d Color.parseColor(\"#000000\");\r\n    private int indicatorColor \u003d Color.parseColor(\"#FFA036\");\r\n    private int progressPrimaryColor \u003d Color.parseColor(\"#FFA036\");\r\n    private int progressSecondaryColor \u003d Color.parseColor(\"#111111\");\r\n    private int backCircleDisabledColor \u003d Color.parseColor(\"#82222222\");\r\n    private int mainCircleDisabledColor \u003d Color.parseColor(\"#82000000\");\r\n    private int indicatorDisabledColor \u003d Color.parseColor(\"#82FFA036\");\r\n    private int progressPrimaryDisabledColor \u003d Color.parseColor(\"#82FFA036\");\r\n    private int progressSecondaryDisabledColor \u003d Color.parseColor(\"#82111111\");\r\n    private float progressPrimaryCircleSize \u003d -1;\r\n    private float progressSecondaryCircleSize \u003d -1;\r\n    private float progressPrimaryStrokeWidth \u003d 25;\r\n    private float progressSecondaryStrokeWidth \u003d 10;\r\n    private float mainCircleRadius \u003d -1;\r\n    private float backCircleRadius \u003d -1;\r\n    private float progressRadius \u003d -1;\r\n    private int max \u003d 25;\r\n    private int min \u003d 1;\r\n    private float indicatorWidth \u003d 7;\r\n    private String label \u003d \"Label\";\r\n    private String labelFont;\r\n    private int labelStyle \u003d 0;\r\n    private float labelSize \u003d 14;\r\n    private int labelColor \u003d Color.WHITE;\r\n    private int labelDisabledColor \u003d Color.BLACK;\r\n    private int startOffset \u003d 30;\r\n    private int startOffset2 \u003d 0;\r\n    private int sweepAngle \u003d -1;\r\n    private boolean isEnabled \u003d true;\r\n    private boolean isAntiClockwise \u003d false;\r\n    private boolean startEventSent \u003d false;\r\n    RectF oval;\r\n    private onProgressChangedListener mProgressChangeListener;\r\n    private OnCrollerChangeListener mCrollerChangeListener;\r\n    public interface onProgressChangedListener {\r\n        void onProgressChanged(int progress);\r\n    }\r\n    public void setOnProgressChangedListener(onProgressChangedListener mProgressChangeListener) {\r\n        this.mProgressChangeListener \u003d mProgressChangeListener;\r\n    }\r\n    public void setOnCrollerChangeListener(OnCrollerChangeListener mCrollerChangeListener) {\r\n        this.mCrollerChangeListener \u003d mCrollerChangeListener;\r\n    }\r\n    public Croller(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n    public Croller(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initXMLAttrs(context, attrs);\r\n        init();\r\n    }\r\n    public Croller(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initXMLAttrs(context, attrs);\r\n        init();\r\n    }\r\n    private void init() {\r\n        textPaint \u003d new Paint();\r\n        textPaint.setAntiAlias(true);\r\n        textPaint.setStyle(Paint.Style.FILL);\r\n        textPaint.setFakeBoldText(true);\r\n        textPaint.setTextAlign(Paint.Align.CENTER);\r\n        textPaint.setTextSize(labelSize);\r\n        generateTypeface();\r\n        circlePaint \u003d new Paint();\r\n        circlePaint.setAntiAlias(true);\r\n        circlePaint.setStrokeWidth(progressSecondaryStrokeWidth);\r\n        circlePaint.setStyle(Paint.Style.FILL);\r\n        circlePaint2 \u003d new Paint();\r\n        circlePaint2.setAntiAlias(true);\r\n        circlePaint2.setStrokeWidth(progressPrimaryStrokeWidth);\r\n        circlePaint2.setStyle(Paint.Style.FILL);\r\n        linePaint \u003d new Paint();\r\n        linePaint.setAntiAlias(true);\r\n        linePaint.setStrokeWidth(indicatorWidth);\r\n        if (isEnabled) {\r\n            circlePaint2.setColor(progressPrimaryColor);\r\n            circlePaint.setColor(progressSecondaryColor);\r\n            linePaint.setColor(indicatorColor);\r\n            textPaint.setColor(labelColor);\r\n        } else {\r\n            circlePaint2.setColor(progressPrimaryDisabledColor);\r\n            circlePaint.setColor(progressSecondaryDisabledColor);\r\n            linePaint.setColor(indicatorDisabledColor);\r\n            textPaint.setColor(labelDisabledColor);\r\n        }\r\n        oval \u003d new RectF();\r\n    }\r\n    private void generateTypeface() {\r\n        Typeface plainLabel \u003d Typeface.DEFAULT;\r\n        if (getLabelFont() !\u003d null \u0026\u0026 !getLabelFont().isEmpty()) {\r\n            android.content.res.AssetManager assetMgr \u003d getContext().getAssets();\r\n            plainLabel \u003d Typeface.createFromAsset(assetMgr, getLabelFont());\r\n        }\r\n        switch (getLabelStyle()) {\r\n            case 0:\r\n                textPaint.setTypeface(plainLabel);\r\n                break;\r\n            case 1:\r\n                textPaint.setTypeface(Typeface.create(plainLabel, Typeface.BOLD));\r\n                break;\r\n            case 2:\r\n                textPaint.setTypeface(Typeface.create(plainLabel, Typeface.ITALIC));\r\n                break;\r\n            case 3:\r\n                textPaint.setTypeface(Typeface.create(plainLabel, Typeface.BOLD_ITALIC));\r\n                break;\r\n        }\r\n    }\r\n    private void initXMLAttrs(Context context, AttributeSet attrs) {\r\n        setEnabled(true);\r\n        setProgress(1);\r\n        setLabel(label);\r\n        setBackCircleColor(backCircleColor);\r\n        setMainCircleColor(mainCircleColor);\r\n        setIndicatorColor(indicatorColor);\r\n        setProgressPrimaryColor(progressPrimaryColor);\r\n        setProgressSecondaryColor(progressSecondaryColor);\r\n        setBackCircleDisabledColor(backCircleDisabledColor);\r\n        setMainCircleDisabledColor(mainCircleDisabledColor);\r\n        setIndicatorDisabledColor(indicatorDisabledColor);\r\n        setProgressPrimaryDisabledColor(progressPrimaryDisabledColor);\r\n        setProgressSecondaryDisabledColor(progressSecondaryDisabledColor);\r\n        setLabelSize((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,\r\n                labelSize, getResources().getDisplayMetrics()));\r\n        setLabelColor(labelColor);\r\n        setlabelDisabledColor(labelDisabledColor);\r\n        setLabelFont(labelFont);\r\n        setLabelStyle(0);\r\n        setIndicatorWidth(7);\r\n        setIsContinuous(false);\r\n        setProgressPrimaryCircleSize(-1);\r\n        setProgressSecondaryCircleSize(-1);\r\n        setProgressPrimaryStrokeWidth(25);\r\n        setProgressSecondaryStrokeWidth(10);\r\n        setSweepAngle(-1);\r\n        setStartOffset(30);\r\n        setMax(25);\r\n        setMin(1);\r\n        deg \u003d min + 2;\r\n        setBackCircleRadius(-1);\r\n        setProgressRadius(-1);\r\n        setAntiClockwise(false);\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n        int minWidth \u003d (int) Utils.convertDpToPixel(160, getContext());\r\n        int minHeight \u003d (int) Utils.convertDpToPixel(160, getContext());\r\n        int widthMode \u003d MeasureSpec.getMode(widthMeasureSpec);\r\n        int widthSize \u003d MeasureSpec.getSize(widthMeasureSpec);\r\n        int heightMode \u003d MeasureSpec.getMode(heightMeasureSpec);\r\n        int heightSize \u003d MeasureSpec.getSize(heightMeasureSpec);\r\n        int width;\r\n        int height;\r\n        if (widthMode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            width \u003d widthSize;\r\n        } else if (widthMode \u003d\u003d MeasureSpec.AT_MOST) {\r\n            width \u003d Math.min(minWidth, widthSize);\r\n        } else {\r\n            // only in case of ScrollViews, otherwise MeasureSpec.UNSPECIFIED is never triggered\r\n            // If width is wrap_content i.e. MeasureSpec.UNSPECIFIED, then make width equal to height\r\n            width \u003d heightSize;\r\n        }\r\n        if (heightMode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            height \u003d heightSize;\r\n        } else if (heightMode \u003d\u003d MeasureSpec.AT_MOST) {\r\n            height \u003d Math.min(minHeight, heightSize);\r\n        } else {\r\n            // only in case of ScrollViews, otherwise MeasureSpec.UNSPECIFIED is never triggered\r\n            // If height is wrap_content i.e. MeasureSpec.UNSPECIFIED, then make height equal to width\r\n            height \u003d widthSize;\r\n        }\r\n        if (widthMode \u003d\u003d MeasureSpec.UNSPECIFIED \u0026\u0026 heightMode \u003d\u003d MeasureSpec.UNSPECIFIED) {\r\n            width \u003d minWidth;\r\n            height \u003d minHeight;\r\n        }\r\n        setMeasuredDimension(width, height);\r\n    }\r\n    @Override\r\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\r\n        super.onLayout(changed, left, top, right, bottom);\r\n        midx \u003d getWidth() / 2;\r\n        midy \u003d getHeight() / 2;\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        if (mProgressChangeListener !\u003d null)\r\n            mProgressChangeListener.onProgressChanged((int) (deg - 2));\r\n        if (mCrollerChangeListener !\u003d null)\r\n            mCrollerChangeListener.onProgressChanged(this, (int) (deg - 2));\r\n        if (isEnabled) {\r\n            circlePaint2.setColor(progressPrimaryColor);\r\n            circlePaint.setColor(progressSecondaryColor);\r\n            linePaint.setColor(indicatorColor);\r\n            textPaint.setColor(labelColor);\r\n        } else {\r\n            circlePaint2.setColor(progressPrimaryDisabledColor);\r\n            circlePaint.setColor(progressSecondaryDisabledColor);\r\n            linePaint.setColor(indicatorDisabledColor);\r\n            textPaint.setColor(labelDisabledColor);\r\n        }\r\n        if (!isContinuous) {\r\n            startOffset2 \u003d startOffset - 15;\r\n            linePaint.setStrokeWidth(indicatorWidth);\r\n            textPaint.setTextSize(labelSize);\r\n            int radius \u003d (int) (Math.min(midx, midy) * ((float) 14.5 / 16));\r\n            if (sweepAngle \u003d\u003d -1) {\r\n                sweepAngle \u003d 360 - (2 * startOffset2);\r\n            }\r\n            if (mainCircleRadius \u003d\u003d -1) {\r\n                mainCircleRadius \u003d radius * ((float) 11 / 15);\r\n            }\r\n            if (backCircleRadius \u003d\u003d -1) {\r\n                backCircleRadius \u003d radius * ((float) 13 / 15);\r\n            }\r\n            if (progressRadius \u003d\u003d -1) {\r\n                progressRadius \u003d radius;\r\n            }\r\n            float x, y;\r\n            float deg2 \u003d Math.max(3, deg);\r\n            float deg3 \u003d Math.min(deg, max + 2);\r\n            for (int i \u003d (int) (deg2); i \u003c max + 3; i++) {\r\n                float tmp \u003d ((float) startOffset2 / 360) + ((float) sweepAngle / 360) * (float) i / (max + 5);\r\n                if (isAntiClockwise) {\r\n                    tmp \u003d 1.0f - tmp;\r\n                }\r\n                x \u003d midx + (float) (progressRadius * Math.sin(2 * Math.PI * (1.0 - tmp)));\r\n                y \u003d midy + (float) (progressRadius * Math.cos(2 * Math.PI * (1.0 - tmp)));\r\n                if (progressSecondaryCircleSize \u003d\u003d -1)\r\n                    canvas.drawCircle(x, y, ((float) radius / 30 * ((float) 20 / max) * ((float) sweepAngle / 270)), circlePaint);\r\n                else\r\n                    canvas.drawCircle(x, y, progressSecondaryCircleSize, circlePaint);\r\n            }\r\n            for (int i \u003d 3; i \u003c\u003d deg3; i++) {\r\n                float tmp \u003d ((float) startOffset2 / 360) + ((float) sweepAngle / 360) * (float) i / (max + 5);\r\n\r\n                if (isAntiClockwise) {\r\n                    tmp \u003d 1.0f - tmp;\r\n                }\r\n                x \u003d midx + (float) (progressRadius * Math.sin(2 * Math.PI * (1.0 - tmp)));\r\n                y \u003d midy + (float) (progressRadius * Math.cos(2 * Math.PI * (1.0 - tmp)));\r\n                if (progressPrimaryCircleSize \u003d\u003d -1)\r\n                    canvas.drawCircle(x, y, (progressRadius / 15 * ((float) 20 / max) * ((float) sweepAngle / 270)), circlePaint2);\r\n                else\r\n                    canvas.drawCircle(x, y, progressPrimaryCircleSize, circlePaint2);\r\n            }\r\n            float tmp2 \u003d ((float) startOffset2 / 360) + ((float) sweepAngle / 360) * deg / (max + 5);\r\n            if (isAntiClockwise) {\r\n                tmp2 \u003d 1.0f - tmp2;\r\n            }\r\n            float x1 \u003d midx + (float) (radius * ((float) 2 / 5) * Math.sin(2 * Math.PI * (1.0 - tmp2)));\r\n            float y1 \u003d midy + (float) (radius * ((float) 2 / 5) * Math.cos(2 * Math.PI * (1.0 - tmp2)));\r\n            float x2 \u003d midx + (float) (radius * ((float) 3 / 5) * Math.sin(2 * Math.PI * (1.0 - tmp2)));\r\n            float y2 \u003d midy + (float) (radius * ((float) 3 / 5) * Math.cos(2 * Math.PI * (1.0 - tmp2)));\r\n            if (isEnabled)\r\n                circlePaint.setColor(backCircleColor);\r\n            else\r\n                circlePaint.setColor(backCircleDisabledColor);\r\n            canvas.drawCircle(midx, midy, backCircleRadius, circlePaint);\r\n            if (isEnabled)\r\n                circlePaint.setColor(mainCircleColor);\r\n            else\r\n                circlePaint.setColor(mainCircleDisabledColor);\r\n            canvas.drawCircle(midx, midy, mainCircleRadius, circlePaint);\r\n            canvas.drawText(label, midx, midy + (float) (radius * 1.1)-textPaint.getFontMetrics().descent, textPaint);\r\n            canvas.drawLine(x1, y1, x2, y2, linePaint);\r\n        } else {\r\n            int radius \u003d (int) (Math.min(midx, midy) * ((float) 14.5 / 16));\r\n            if (sweepAngle \u003d\u003d -1) {\r\n                sweepAngle \u003d 360 - (2 * startOffset);\r\n            }\r\n            if (mainCircleRadius \u003d\u003d -1) {\r\n                mainCircleRadius \u003d radius * ((float) 11 / 15);\r\n            }\r\n            if (backCircleRadius \u003d\u003d -1) {\r\n                backCircleRadius \u003d radius * ((float) 13 / 15);\r\n            }\r\n            if (progressRadius \u003d\u003d -1) {\r\n                progressRadius \u003d radius;\r\n            }\r\n            circlePaint.setStrokeWidth(progressSecondaryStrokeWidth);\r\n            circlePaint.setStyle(Paint.Style.STROKE);\r\n            circlePaint2.setStrokeWidth(progressPrimaryStrokeWidth);\r\n            circlePaint2.setStyle(Paint.Style.STROKE);\r\n            linePaint.setStrokeWidth(indicatorWidth);\r\n            textPaint.setTextSize(labelSize);\r\n            float deg3 \u003d Math.min(deg, max + 2);\r\n            oval.set(midx - progressRadius, midy - progressRadius, midx + progressRadius, midy + progressRadius);\r\n            canvas.drawArc(oval, (float) 90 + startOffset, (float) sweepAngle, false, circlePaint);\r\n            if (isAntiClockwise) {\r\n                canvas.drawArc(oval, (float) 90 - startOffset, -1 * ((deg3 - 2) * ((float) sweepAngle / max)), false, circlePaint2);\r\n            } else {\r\n                canvas.drawArc(oval, (float) 90 + startOffset, ((deg3 - 2) * ((float) sweepAngle / max)), false, circlePaint2);\r\n            }\r\n            float tmp2 \u003d ((float) startOffset / 360) + (((float) sweepAngle / 360) * ((deg - 2) / (max)));\r\n            if (isAntiClockwise) {\r\n                tmp2 \u003d 1.0f - tmp2;\r\n            }\r\n            float x1 \u003d midx + (float) (radius * ((float) 2 / 5) * Math.sin(2 * Math.PI * (1.0 - tmp2)));\r\n            float y1 \u003d midy + (float) (radius * ((float) 2 / 5) * Math.cos(2 * Math.PI * (1.0 - tmp2)));\r\n            float x2 \u003d midx + (float) (radius * ((float) 3 / 5) * Math.sin(2 * Math.PI * (1.0 - tmp2)));\r\n            float y2 \u003d midy + (float) (radius * ((float) 3 / 5) * Math.cos(2 * Math.PI * (1.0 - tmp2)));\r\n            circlePaint.setStyle(Paint.Style.FILL);\r\n            if (isEnabled)\r\n                circlePaint.setColor(backCircleColor);\r\n            else\r\n                circlePaint.setColor(backCircleDisabledColor);\r\n            canvas.drawCircle(midx, midy, backCircleRadius, circlePaint);\r\n            if (isEnabled)\r\n                circlePaint.setColor(mainCircleColor);\r\n            else\r\n                circlePaint.setColor(mainCircleDisabledColor);\r\n            canvas.drawCircle(midx, midy, mainCircleRadius, circlePaint);\r\n            canvas.drawText(label, midx, midy + (float) (radius * 1.1)-textPaint.getFontMetrics().descent, textPaint);\r\n            canvas.drawLine(x1, y1, x2, y2, linePaint);\r\n        }\r\n    }\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent e) {\r\n        if (!isEnabled)\r\n            return false;\r\n        if (Utils.getDistance(e.getX(), e.getY(), midx, midy) \u003e Math.max(mainCircleRadius, Math.max(backCircleRadius, progressRadius))) {\r\n            if (startEventSent \u0026\u0026 mCrollerChangeListener !\u003d null) {\r\n                mCrollerChangeListener.onStopTrackingTouch(this);\r\n                startEventSent \u003d false;\r\n            }\r\n            return super.onTouchEvent(e);\r\n        }\r\n        if (e.getAction() \u003d\u003d MotionEvent.ACTION_DOWN) {\r\n            float dx \u003d e.getX() - midx;\r\n            float dy \u003d e.getY() - midy;\r\n            downdeg \u003d (float) ((Math.atan2(dy, dx) * 180) / Math.PI);\r\n            downdeg -\u003d 90;\r\n            if (downdeg \u003c 0) {\r\n                downdeg +\u003d 360;\r\n            }\r\n            downdeg \u003d (float) Math.floor((downdeg / 360) * (max + 5));\r\n            if (mCrollerChangeListener !\u003d null) {\r\n                mCrollerChangeListener.onStartTrackingTouch(this);\r\n                startEventSent \u003d true;\r\n            }\r\n            return true;\r\n        }\r\n        if (e.getAction() \u003d\u003d MotionEvent.ACTION_MOVE) {\r\n            float dx \u003d e.getX() - midx;\r\n            float dy \u003d e.getY() - midy;\r\n            currdeg \u003d (float) ((Math.atan2(dy, dx) * 180) / Math.PI);\r\n            currdeg -\u003d 90;\r\n            if (currdeg \u003c 0) {\r\n                currdeg +\u003d 360;\r\n            }\r\n            currdeg \u003d (float) Math.floor((currdeg / 360) * (max + 5));\r\n            if ((currdeg / (max + 4)) \u003e 0.75f \u0026\u0026 ((downdeg - 0) / (max + 4)) \u003c 0.25f) {\r\n                if (isAntiClockwise) {\r\n                    deg++;\r\n                    if (deg \u003e max + 2) {\r\n                        deg \u003d max + 2;\r\n                    }\r\n                } else {\r\n                    deg--;\r\n                    if (deg \u003c (min + 2)) {\r\n                        deg \u003d (min + 2);\r\n                    }\r\n                }\r\n            } else if ((downdeg / (max + 4)) \u003e 0.75f \u0026\u0026 ((currdeg - 0) / (max + 4)) \u003c 0.25f) {\r\n                if (isAntiClockwise) {\r\n                    deg--;\r\n                    if (deg \u003c (min + 2)) {\r\n                        deg \u003d (min + 2);\r\n                    }\r\n                } else {\r\n                    deg++;\r\n                    if (deg \u003e max + 2) {\r\n                        deg \u003d max + 2;\r\n                    }\r\n                }\r\n            } else {\r\n                if (isAntiClockwise) {\r\n                    deg -\u003d (currdeg - downdeg);\r\n                } else {\r\n                    deg +\u003d (currdeg - downdeg);\r\n                }\r\n                if (deg \u003e max + 2) {\r\n                    deg \u003d max + 2;\r\n                }\r\n                if (deg \u003c (min + 2)) {\r\n                    deg \u003d (min + 2);\r\n                }\r\n            }\r\n            downdeg \u003d currdeg;\r\n            invalidate();\r\n            return true;\r\n\r\n        }\r\n        if (e.getAction() \u003d\u003d MotionEvent.ACTION_UP) {\r\n            if (mCrollerChangeListener !\u003d null) {\r\n                mCrollerChangeListener.onStopTrackingTouch(this);\r\n                startEventSent \u003d false;\r\n            }\r\n            return true;\r\n        }\r\n        return super.onTouchEvent(e);\r\n    }\r\n    @Override\r\n    public boolean dispatchTouchEvent(MotionEvent event) {\r\n        if (getParent() !\u003d null \u0026\u0026 event.getAction() \u003d\u003d MotionEvent.ACTION_DOWN) {\r\n            getParent().requestDisallowInterceptTouchEvent(true);\r\n        }\r\n        return super.dispatchTouchEvent(event);\r\n    }\r\n    public boolean isEnabled() {\r\n        return isEnabled;\r\n    }\r\n    public void setEnabled(boolean enabled) {\r\n        this.isEnabled \u003d enabled;\r\n        invalidate();\r\n    }\r\n    public int getProgress() {\r\n        return (int) (deg - 2);\r\n    }\r\n    public void setProgress(int x) {\r\n        deg \u003d x + 2;\r\n        invalidate();\r\n    }\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n    public void setLabel(String txt) {\r\n        label \u003d txt;\r\n        invalidate();\r\n    }\r\n    public int getBackCircleColor() {\r\n        return backCircleColor;\r\n    }\r\n    public void setBackCircleColor(int backCircleColor) {\r\n        this.backCircleColor \u003d backCircleColor;\r\n        invalidate();\r\n    }\r\n    public int getMainCircleColor() {\r\n        return mainCircleColor;\r\n    }\r\n    public void setMainCircleColor(int mainCircleColor) {\r\n        this.mainCircleColor \u003d mainCircleColor;\r\n        invalidate();\r\n    }\r\n    public int getIndicatorColor() {\r\n        return indicatorColor;\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        invalidate();\r\n    }\r\n    public int getProgressPrimaryColor() {\r\n        return progressPrimaryColor;\r\n    }\r\n    public void setProgressPrimaryColor(int progressPrimaryColor) {\r\n        this.progressPrimaryColor \u003d progressPrimaryColor;\r\n        invalidate();\r\n    }\r\n    public int getProgressSecondaryColor() {\r\n        return progressSecondaryColor;\r\n    }\r\n    public void setProgressSecondaryColor(int progressSecondaryColor) {\r\n        this.progressSecondaryColor \u003d progressSecondaryColor;\r\n        invalidate();\r\n    }\r\n    public int getBackCircleDisabledColor() {\r\n        return backCircleDisabledColor;\r\n    }\r\n    public void setBackCircleDisabledColor(int backCircleDisabledColor) {\r\n        this.backCircleDisabledColor \u003d backCircleDisabledColor;\r\n        invalidate();\r\n    }\r\n    public int getMainCircleDisabledColor() {\r\n        return mainCircleDisabledColor;\r\n    }\r\n    public void setMainCircleDisabledColor(int mainCircleDisabledColor) {\r\n        this.mainCircleDisabledColor \u003d mainCircleDisabledColor;\r\n        invalidate();\r\n    }\r\n    public int getIndicatorDisabledColor() {\r\n        return indicatorDisabledColor;\r\n    }\r\n    public void setIndicatorDisabledColor(int indicatorDisabledColor) {\r\n        this.indicatorDisabledColor \u003d indicatorDisabledColor;\r\n        invalidate();\r\n    }\r\n    public int getProgressPrimaryDisabledColor() {\r\n        return progressPrimaryDisabledColor;\r\n    }\r\n    public void setProgressPrimaryDisabledColor(int progressPrimaryDisabledColor) {\r\n        this.progressPrimaryDisabledColor \u003d progressPrimaryDisabledColor;\r\n        invalidate();\r\n    }\r\n    public int getProgressSecondaryDisabledColor() {\r\n        return progressSecondaryDisabledColor;\r\n    }\r\n    public void setProgressSecondaryDisabledColor(int progressSecondaryDisabledColor) {\r\n        this.progressSecondaryDisabledColor \u003d progressSecondaryDisabledColor;\r\n        invalidate();\r\n    }\r\n    public float getLabelSize() {\r\n        return labelSize;\r\n    }\r\n    public void setLabelSize(float labelSize) {\r\n        this.labelSize \u003d labelSize;\r\n        invalidate();\r\n    }\r\n    public int getLabelColor() {\r\n        return labelColor;\r\n    }\r\n    public void setLabelColor(int labelColor) {\r\n        this.labelColor \u003d labelColor;\r\n        invalidate();\r\n    }\r\n    public int getlabelDisabledColor() {\r\n        return labelDisabledColor;\r\n    }\r\n    public void setlabelDisabledColor(int labelDisabledColor) {\r\n        this.labelDisabledColor \u003d labelDisabledColor;\r\n        invalidate();\r\n    }\r\n    public String getLabelFont() {\r\n        return labelFont;\r\n    }\r\n    public void setLabelFont(String labelFont) {\r\n        this.labelFont \u003d labelFont;\r\n        if (textPaint !\u003d null)\r\n            generateTypeface();\r\n        invalidate();\r\n    }\r\n    public int getLabelStyle() {\r\n        return labelStyle;\r\n    }\r\n    public void setLabelStyle(int labelStyle) {\r\n        this.labelStyle \u003d labelStyle;\r\n        invalidate();\r\n    }\r\n    public float getIndicatorWidth() {\r\n        return indicatorWidth;\r\n    }\r\n    public void setIndicatorWidth(float indicatorWidth) {\r\n        this.indicatorWidth \u003d indicatorWidth;\r\n        invalidate();\r\n    }\r\n    public boolean isContinuous() {\r\n        return isContinuous;\r\n    }\r\n    public void setIsContinuous(boolean isContinuous) {\r\n        this.isContinuous \u003d isContinuous;\r\n        invalidate();\r\n    }\r\n    public float getProgressPrimaryCircleSize() {\r\n        return progressPrimaryCircleSize;\r\n    }\r\n    public void setProgressPrimaryCircleSize(float progressPrimaryCircleSize) {\r\n        this.progressPrimaryCircleSize \u003d progressPrimaryCircleSize;\r\n        invalidate();\r\n    }\r\n    public float getProgressSecondaryCircleSize() {\r\n        return progressSecondaryCircleSize;\r\n    }\r\n    public void setProgressSecondaryCircleSize(float progressSecondaryCircleSize) {\r\n        this.progressSecondaryCircleSize \u003d progressSecondaryCircleSize;\r\n        invalidate();\r\n    }\r\n    public float getProgressPrimaryStrokeWidth() {\r\n        return progressPrimaryStrokeWidth;\r\n    }\r\n    public void setProgressPrimaryStrokeWidth(float progressPrimaryStrokeWidth) {\r\n        this.progressPrimaryStrokeWidth \u003d progressPrimaryStrokeWidth;\r\n        invalidate();\r\n    }\r\n    public float getProgressSecondaryStrokeWidth() {\r\n        return progressSecondaryStrokeWidth;\r\n    }\r\n    public void setProgressSecondaryStrokeWidth(float progressSecondaryStrokeWidth) {\r\n        this.progressSecondaryStrokeWidth \u003d progressSecondaryStrokeWidth;\r\n        invalidate();\r\n    }\r\n    public int getSweepAngle() {\r\n        return sweepAngle;\r\n    }\r\n    public void setSweepAngle(int sweepAngle) {\r\n        this.sweepAngle \u003d sweepAngle;\r\n        invalidate();\r\n    }\r\n    public int getStartOffset() {\r\n        return startOffset;\r\n    }\r\n    public void setStartOffset(int startOffset) {\r\n        this.startOffset \u003d startOffset;\r\n        invalidate();\r\n    }\r\n    public int getMax() {\r\n        return max;\r\n    }\r\n    public void setMax(int max) {\r\n        if (max \u003c min) {\r\n            this.max \u003d min;\r\n        } else {\r\n            this.max \u003d max;\r\n        }\r\n        invalidate();\r\n    }\r\n    public int getMin() {\r\n        return min;\r\n    }\r\n    public void setMin(int min) {\r\n        if (min \u003c 0) {\r\n            this.min \u003d 0;\r\n        } else if (min \u003e max) {\r\n            this.min \u003d max;\r\n        } else {\r\n            this.min \u003d min;\r\n        }\r\n        invalidate();\r\n    }\r\n    public float getMainCircleRadius() {\r\n        return mainCircleRadius;\r\n    }\r\n    public void setMainCircleRadius(float mainCircleRadius) {\r\n        this.mainCircleRadius \u003d mainCircleRadius;\r\n        invalidate();\r\n    }\r\n    public float getBackCircleRadius() {\r\n        return backCircleRadius;\r\n    }\r\n    public void setBackCircleRadius(float backCircleRadius) {\r\n        this.backCircleRadius \u003d backCircleRadius;\r\n        invalidate();\r\n    }\r\n    public float getProgressRadius() {\r\n        return progressRadius;\r\n    }\r\n    public void setProgressRadius(float progressRadius) {\r\n        this.progressRadius \u003d progressRadius;\r\n        invalidate();\r\n    }\r\n    public boolean isAntiClockwise() {\r\n        return isAntiClockwise;\r\n    }\r\n    public void setAntiClockwise(boolean antiClockwise) {\r\n        isAntiClockwise \u003d antiClockwise;\r\n        invalidate();\r\n    }\r\n}\r\n"},{"name":"AutoLink","code":"//Usages :\r\n\r\nAutoLinkTextView active \u003d new AutoLinkTextView(this);\r\nactive.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\nactive.setTextSize(15);\r\nactive.setTextColor(0xFF000000);\r\nlinear1.addView(active);\r\n\r\nfinal String str \u003d \"visit here : https://www.google.com\";\r\n\r\nactive.addAutoLinkMode(\r\n\tAutoLinkMode.MODE_HASHTAG,\r\n\tAutoLinkMode.MODE_PHONE,\r\n\tAutoLinkMode.MODE_URL,\r\n\tAutoLinkMode.MODE_EMAIL,\r\n\tAutoLinkMode.MODE_MENTION);\r\n\r\nactive.setCustomRegex(\"\\\\sAllo\\\\b\");\r\nactive.enableUnderLine();\r\nactive.setHashtagModeColor(0x1DA1F2);\r\nactive.setPhoneModeColor(0xffa000);\r\nactive.setCustomModeColor(0x9C27B0);\r\nactive.setMentionModeColor(0x64dd17);\r\nactive.setText(str);\r\n\r\n\r\nactive.setAutoLinkOnClickListener(new AutoLinkOnClickListener() {\r\n\t@Override\r\n\tpublic void onAutoLinkTextClick(AutoLinkMode autoLinkMode, String matchedText) {\r\n\t\tshowDialog(autoLinkMode.toString(), matchedText);\r\n\t}\r\n});\r\n\r\n\r\n//Add Private :\r\n\r\nprivate void showDialog(String title, String message) {\r\n\tfinal AlertDialog.Builder builder \u003d new AlertDialog.Builder(this);\r\n\tbuilder.setMessage(message)\r\n\t\t.setTitle(title)\r\n\t\t.setCancelable(false)\r\n\t\t.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n\t\t\tpublic void onClick(DialogInterface dialog, int id) {\r\n\t\t\t\tdialog.dismiss();\r\n\t\t\t}\r\n\t\t});\r\n\tfinal AlertDialog alert \u003d builder.create();\r\n\talert.show();\r\n}\r\n\r\n//Add Class :\r\n\r\npublic static class AutoLinkTextView extends TextView {\r\n    private static final int MIN_PHONE_NUMBER_LENGTH \u003d 8;\r\n    private static final int DEFAULT_COLOR \u003d Color.RED;\r\n    private AutoLinkOnClickListener autoLinkOnClickListener;\r\n    private AutoLinkMode[] autoLinkModes;\r\n    private List\u003cAutoLinkMode\u003e mBoldAutoLinkModes;\r\n    private String customRegex;\r\n    private boolean isUnderLineEnabled \u003d false;\r\n    private int mentionModeColor \u003d DEFAULT_COLOR;\r\n    private int hashtagModeColor \u003d DEFAULT_COLOR;\r\n    private int urlModeColor \u003d DEFAULT_COLOR;\r\n    private int phoneModeColor \u003d DEFAULT_COLOR;\r\n    private int emailModeColor \u003d DEFAULT_COLOR;\r\n    private int customModeColor \u003d DEFAULT_COLOR;\r\n    private int defaultSelectedColor \u003d Color.LTGRAY;\r\n    public AutoLinkTextView(Context context) {\r\n        super(context);\r\n    }\r\n    public AutoLinkTextView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n    }\r\n    @Override\r\n    public void setHighlightColor(int color) {\r\n        super.setHighlightColor(Color.TRANSPARENT);\r\n    }\r\n    @Override\r\n    public void setText(CharSequence text, BufferType type) {\r\n        if (TextUtils.isEmpty(text)) {\r\n            super.setText(text, type);\r\n            return;\r\n        }\r\n        SpannableString spannableString \u003d makeSpannableString(text);\r\n        setMovementMethod(new LinkTouchMovementMethod());\r\n        super.setText(spannableString, type);\r\n    }\r\n    private SpannableString makeSpannableString(CharSequence text) {\r\n        final SpannableString spannableString \u003d new SpannableString(text);\r\n        List\u003cAutoLinkItem\u003e autoLinkItems \u003d matchedRanges(text);\r\n        for (final AutoLinkItem autoLinkItem : autoLinkItems) {\r\n            int currentColor \u003d getColorByMode(autoLinkItem.getAutoLinkMode());\r\n            TouchableSpan clickableSpan \u003d new TouchableSpan(currentColor, defaultSelectedColor, isUnderLineEnabled) {\r\n                @Override\r\n                public void onClick(View widget) {\r\n                    if (autoLinkOnClickListener !\u003d null)\r\n                        autoLinkOnClickListener.onAutoLinkTextClick(\r\n                                autoLinkItem.getAutoLinkMode(),\r\n                                autoLinkItem.getMatchedText());\r\n                }\r\n            };\r\n            spannableString.setSpan(\r\n                    clickableSpan,\r\n                    autoLinkItem.getStartPoint(),\r\n                    autoLinkItem.getEndPoint(),\r\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            if(mBoldAutoLinkModes !\u003d null \u0026\u0026 mBoldAutoLinkModes.contains(autoLinkItem.getAutoLinkMode())){\r\n                spannableString.setSpan(\r\n                        new android.text.style.StyleSpan(Typeface.BOLD),\r\n                        autoLinkItem.getStartPoint(),\r\n                        autoLinkItem.getEndPoint(),\r\n                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            }\r\n        }\r\n        return spannableString;\r\n    }\r\n    private List\u003cAutoLinkItem\u003e matchedRanges(CharSequence text) {\r\n        List\u003cAutoLinkItem\u003e autoLinkItems \u003d new LinkedList\u003c\u003e();\r\n        if (autoLinkModes \u003d\u003d null) {\r\n            throw new NullPointerException(\"Please add at least one mode\");\r\n        }\r\n        for (AutoLinkMode anAutoLinkMode : autoLinkModes) {\r\n            String regex \u003d Utils.getRegexByAutoLinkMode(anAutoLinkMode, customRegex);\r\n            java.util.regex.Pattern pattern \u003d java.util.regex.Pattern.compile(regex);\r\n            java.util.regex.Matcher matcher \u003d pattern.matcher(text);\r\n            if (anAutoLinkMode \u003d\u003d AutoLinkMode.MODE_PHONE) {\r\n                while (matcher.find()) {\r\n                    if (matcher.group().length() \u003e MIN_PHONE_NUMBER_LENGTH)\r\n                        autoLinkItems.add(new AutoLinkItem(\r\n                                matcher.start(),\r\n                                matcher.end(),\r\n                                matcher.group(),\r\n                                anAutoLinkMode));\r\n                }\r\n            } else {\r\n                while (matcher.find()) {\r\n                    autoLinkItems.add(new AutoLinkItem(\r\n                            matcher.start(),\r\n                            matcher.end(),\r\n                            matcher.group(),\r\n                            anAutoLinkMode));\r\n                }\r\n            }\r\n        }\r\n        return autoLinkItems;\r\n    }\r\n    private int getColorByMode(AutoLinkMode autoLinkMode) {\r\n        switch (autoLinkMode) {\r\n            case MODE_HASHTAG:\r\n                return hashtagModeColor;\r\n            case MODE_MENTION:\r\n                return mentionModeColor;\r\n            case MODE_URL:\r\n                return urlModeColor;\r\n            case MODE_PHONE:\r\n                return phoneModeColor;\r\n            case MODE_EMAIL:\r\n                return emailModeColor;\r\n            case MODE_CUSTOM:\r\n                return customModeColor;\r\n            default:\r\n                return DEFAULT_COLOR;\r\n        }\r\n    }\r\n    public void setMentionModeColor(int mentionModeColor) {\r\n        this.mentionModeColor \u003d mentionModeColor;\r\n    }\r\n    public void setHashtagModeColor(int hashtagModeColor) {\r\n        this.hashtagModeColor \u003d hashtagModeColor;\r\n    }\r\n    public void setUrlModeColor(int urlModeColor) {\r\n        this.urlModeColor \u003d urlModeColor;\r\n    }\r\n    public void setPhoneModeColor(int phoneModeColor) {\r\n        this.phoneModeColor \u003d phoneModeColor;\r\n    }\r\n    public void setEmailModeColor(int emailModeColor) {\r\n        this.emailModeColor \u003d emailModeColor;\r\n    }\r\n    public void setCustomModeColor(int customModeColor) {\r\n        this.customModeColor \u003d customModeColor;\r\n    }\r\n    public void setSelectedStateColor(int defaultSelectedColor) {\r\n        this.defaultSelectedColor \u003d defaultSelectedColor;\r\n    }\r\n    public void addAutoLinkMode(AutoLinkMode... autoLinkModes) {\r\n        this.autoLinkModes \u003d autoLinkModes;\r\n    }\r\n    public void setBoldAutoLinkModes(AutoLinkMode... autoLinkModes) {\r\n        mBoldAutoLinkModes \u003d new ArrayList\u003c\u003e();\r\n        mBoldAutoLinkModes.addAll(Arrays.asList(autoLinkModes));\r\n    }\r\n    public void setCustomRegex(String regex) {\r\n        this.customRegex \u003d regex;\r\n    }\r\n    public void setAutoLinkOnClickListener(AutoLinkOnClickListener autoLinkOnClickListener) {\r\n        this.autoLinkOnClickListener \u003d autoLinkOnClickListener;\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        if (Build.VERSION.SDK_INT \u003e\u003d 16) {\r\n            StaticLayout layout \u003d null;\r\n            java.lang.reflect.Field field \u003d null;\r\n            try {\r\n                java.lang.reflect.Field staticField \u003d DynamicLayout.class.getDeclaredField(\"sStaticLayout\");\r\n                staticField.setAccessible(true);\r\n                layout \u003d (StaticLayout) staticField.get(DynamicLayout.class);\r\n            } catch (NoSuchFieldException e) {\r\n                e.printStackTrace();\r\n            } catch (IllegalAccessException e) {\r\n                e.printStackTrace();\r\n            }\r\n            if (layout !\u003d null) {\r\n                try {\r\n                    field \u003d StaticLayout.class.getDeclaredField(\"mMaximumVisibleLineCount\");\r\n                    field.setAccessible(true);\r\n                    field.setInt(layout, getMaxLines());\r\n                } catch (NoSuchFieldException e) {\r\n                    e.printStackTrace();\r\n                } catch (IllegalAccessException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n            if (layout !\u003d null \u0026\u0026 field !\u003d null) {\r\n                try {\r\n                    field.setInt(layout, Integer.MAX_VALUE);\r\n                } catch (IllegalAccessException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        } else {\r\n            super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n        }\r\n    }\r\n    public void enableUnderLine() {\r\n        isUnderLineEnabled \u003d true;\r\n    }\r\n}\r\n\r\nstatic class AutoLinkItem {\r\n    private AutoLinkMode autoLinkMode;\r\n    private String matchedText;\r\n    private int startPoint,endPoint;\r\n    AutoLinkItem(int startPoint, int endPoint, String matchedText, AutoLinkMode autoLinkMode) {\r\n        this.startPoint \u003d startPoint;\r\n        this.endPoint \u003d endPoint;\r\n        this.matchedText \u003d matchedText;\r\n        this.autoLinkMode \u003d autoLinkMode;\r\n    }\r\n    AutoLinkMode getAutoLinkMode() {\r\n        return autoLinkMode;\r\n    }\r\n    String getMatchedText() {\r\n        return matchedText;\r\n    }\r\n    int getStartPoint() {\r\n        return startPoint;\r\n    }\r\n    int getEndPoint() {\r\n        return endPoint;\r\n    }\r\n}\r\n\r\n\r\npublic static enum AutoLinkMode {\r\n    MODE_HASHTAG(\"Hashtag\"),\r\n    MODE_MENTION(\"Mention\"),\r\n    MODE_URL(\"Url\"),\r\n    MODE_PHONE(\"Phone\"),\r\n    MODE_EMAIL(\"Email\"),\r\n    MODE_CUSTOM(\"Custom\");\r\n    private String name;\r\n    AutoLinkMode(String name) {\r\n        this.name \u003d name;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic static interface AutoLinkOnClickListener {\r\n    void onAutoLinkTextClick(AutoLinkMode autoLinkMode,String matchedText);\r\n}\r\n\r\nstatic class Utils {\r\n    private static boolean isValidRegex(String regex){\r\n        return regex !\u003d null \u0026\u0026 !regex.isEmpty() \u0026\u0026 regex.length() \u003e 2;\r\n    }\r\n    static String getRegexByAutoLinkMode(AutoLinkMode anAutoLinkMode,String customRegex) {\r\n        switch (anAutoLinkMode) {\r\n            case MODE_HASHTAG:\r\n                return RegexParser.HASHTAG_PATTERN;\r\n            case MODE_MENTION:\r\n                return RegexParser.MENTION_PATTERN;\r\n            case MODE_URL:\r\n                return RegexParser.URL_PATTERN;\r\n            case MODE_PHONE:\r\n                return RegexParser.PHONE_PATTERN;\r\n            case MODE_EMAIL:\r\n                return RegexParser.EMAIL_PATTERN;\r\n            case MODE_CUSTOM:\r\n                if (!Utils.isValidRegex(customRegex)) {\r\n                    return RegexParser.URL_PATTERN;\r\n                } else {\r\n                    return customRegex;\r\n                }\r\n            default:\r\n                return RegexParser.URL_PATTERN;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nstatic abstract class TouchableSpan extends android.text.style.ClickableSpan {\r\n    private boolean isPressed;\r\n    private int normalTextColor;\r\n    private int pressedTextColor;\r\n    private boolean isUnderLineEnabled;\r\n    TouchableSpan(int normalTextColor, int pressedTextColor, boolean isUnderLineEnabled) {\r\n        this.normalTextColor \u003d normalTextColor;\r\n        this.pressedTextColor \u003d pressedTextColor;\r\n        this.isUnderLineEnabled \u003d isUnderLineEnabled;\r\n    }\r\n    void setPressed(boolean isSelected) {\r\n        isPressed \u003d isSelected;\r\n    }\r\n    @Override\r\n    public void updateDrawState(TextPaint textPaint) {\r\n        super.updateDrawState(textPaint);\r\n        int textColor \u003d isPressed ? pressedTextColor : normalTextColor;\r\n        textPaint.setColor(textColor);\r\n        textPaint.bgColor \u003d Color.TRANSPARENT;\r\n        textPaint.setUnderlineText(isUnderLineEnabled);\r\n    }\r\n}\r\n\r\nstatic class RegexParser {\r\n    static final String PHONE_PATTERN \u003d android.util.Patterns.PHONE.pattern();\r\n    static final String EMAIL_PATTERN \u003d android.util.Patterns.EMAIL_ADDRESS.pattern();\r\n    static final String HASHTAG_PATTERN \u003d \"(?:^|\\\\s|$)#[\\\\p{L}0-9_]*\";\r\n    static final String MENTION_PATTERN \u003d \"(?:^|\\\\s|$|[.])@[\\\\p{L}0-9_]*\";\r\n    static final String URL_PATTERN \u003d \"(^|[\\\\s.:;?\\\\-\\\\]\u003c\\\\(])\" +\r\n            \"((https?://|www\\\\.|pic\\\\.)[-\\\\w;/?:@\u0026\u003d+$\\\\|\\\\_.!~*\\\\|\u0027()\\\\[\\\\]%#,?]+[\\\\w/#](\\\\(\\\\))?)\" +\r\n            \"(?\u003d$|[\\\\s\u0027,\\\\|\\\\(\\\\).:;?\\\\-\\\\[\\\\]\u003e\\\\)])\";\r\n}\r\n\r\n\r\nstatic class LinkTouchMovementMethod extends android.text.method.LinkMovementMethod {\r\n    private TouchableSpan pressedSpan;\r\n    @Override\r\n    public boolean onTouchEvent(TextView textView, final Spannable spannable, MotionEvent event) {\r\n        int action  \u003d event.getAction();\r\n        if (action \u003d\u003d MotionEvent.ACTION_DOWN) {\r\n            pressedSpan \u003d getPressedSpan(textView, spannable, event);\r\n            if (pressedSpan !\u003d null) {\r\n                pressedSpan.setPressed(true);\r\n                Selection.setSelection(spannable, spannable.getSpanStart(pressedSpan),\r\n                        spannable.getSpanEnd(pressedSpan));\r\n            }\r\n        } else if (action \u003d\u003d MotionEvent.ACTION_MOVE) {\r\n            TouchableSpan touchedSpan \u003d getPressedSpan(textView, spannable, event);\r\n            if (pressedSpan !\u003d null \u0026\u0026 touchedSpan !\u003d pressedSpan) {\r\n                pressedSpan.setPressed(false);\r\n                pressedSpan \u003d null;\r\n                Selection.removeSelection(spannable);\r\n            }\r\n        } else {\r\n            if (pressedSpan !\u003d null) {\r\n                pressedSpan.setPressed(false);\r\n                super.onTouchEvent(textView, spannable, event);\r\n            }\r\n            pressedSpan \u003d null;\r\n            Selection.removeSelection(spannable);\r\n        }\r\n        return true;\r\n    }\r\n    private TouchableSpan getPressedSpan(TextView textView, Spannable spannable, MotionEvent event) {\r\n        int x \u003d (int) event.getX();\r\n        int y \u003d (int) event.getY();\r\n        x -\u003d textView.getTotalPaddingLeft();\r\n        y -\u003d textView.getTotalPaddingTop();\r\n        x +\u003d textView.getScrollX();\r\n        y +\u003d textView.getScrollY();\r\n        Layout layout \u003d textView.getLayout();\r\n        int verticalLine \u003d layout.getLineForVertical(y);\r\n        int horizontalOffset \u003d layout.getOffsetForHorizontal(verticalLine, x);\r\n        TouchableSpan[] link \u003d spannable.getSpans(horizontalOffset, horizontalOffset, TouchableSpan.class);\r\n        TouchableSpan touchedSpan \u003d null;\r\n        if (link.length \u003e 0) {\r\n            touchedSpan \u003d link[0];\r\n        }\r\n        return touchedSpan;\r\n    }\r\n}\r\n"},{"name":"Box Loader","code":"//Create Loader :\r\n\r\nfinal BoxLoaderView b \u003d new BoxLoaderView(MainActivity.this);\r\nb.setLayoutParams(new LinearLayout.LayoutParams(200,200));\r\nlinear1.addView(b);\r\nb.setSpeed(5);\r\nb.setStrokeColor(Color.parseColor(\"#995876\"));\r\nb.setLoaderColor(Color.parseColor(\"#C67890\"));\r\nb.setStrokeWidth(20);\r\n\r\n//Add Class :\r\n\r\npublic static class BoxLoaderView extends View {\r\n\r\n    private static final int FRAME_RATE \u003d 2;\r\n    private static final int DEFAULT_SPEED \u003d 10;\r\n    private static final int DEFAULT_STROKE_WIDTH \u003d 20;\r\n    private static final int DEFAULT_STROKE_COLOR \u003d Color.WHITE;\r\n    private static final int DEFAULT_LOADER_COLOR \u003d Color.BLUE;\r\n\r\n    private int speed;\r\n    private int strokeWidth;\r\n    private int strokeColor, loaderColor;\r\n    private boolean dirChange \u003d false;\r\n    private Box box, outBox;\r\n    private Handler handler;\r\n\r\n\r\n    public BoxLoaderView(Context context) {\r\n        super(context);\r\n        init(context, null);\r\n    }\r\n\r\n    public BoxLoaderView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(context, attrs);\r\n    }\r\n\r\n    private void init(Context context, AttributeSet attrs){\r\n        handler \u003d new Handler();\r\n\r\n        if(attrs !\u003d null) {\r\n            strokeColor \u003d DEFAULT_STROKE_COLOR;\r\n            loaderColor \u003d DEFAULT_LOADER_COLOR;\r\n            strokeWidth \u003d DEFAULT_STROKE_WIDTH;\r\n            speed \u003d DEFAULT_SPEED;\r\n        } else {\r\n            strokeColor \u003d DEFAULT_STROKE_COLOR;\r\n            loaderColor \u003d DEFAULT_LOADER_COLOR;\r\n            strokeWidth \u003d DEFAULT_STROKE_WIDTH;\r\n            speed \u003d DEFAULT_SPEED;\r\n        }\r\n    }\r\n\r\n    public void setSpeed(int speed){\r\n        this.speed \u003d speed;\r\n    }\r\n\r\n    public void setStrokeWidth(int strokeWidth){\r\n        this.strokeWidth \u003d strokeWidth;\r\n    }\r\n\r\n    public void setStrokeColor(int color){\r\n        strokeColor \u003d color;\r\n    }\r\n\r\n    public void setLoaderColor(int color){\r\n        loaderColor \u003d color;\r\n    }\r\n\r\n    @Override\r\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\r\n        super.onLayout(changed, left, top, right, bottom);\r\n        if(outBox \u003d\u003d null){\r\n            outBox \u003d new Box(left, top, right, bottom, strokeColor, 10);\r\n            outBox.getPaint().setStrokeWidth(strokeWidth);\r\n        }\r\n        if(box \u003d\u003d null){\r\n            box \u003d new Box(left + strokeWidth, top + strokeWidth, right/2 - strokeWidth, bottom/2 - strokeWidth, loaderColor, 10);\r\n            box.setDx(speed);\r\n            box.setDy(speed);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        canvas.drawRect(outBox.getLeft(), outBox.getTop(), outBox.getRight(), outBox.getBottom(), outBox.getPaint());\r\n        dirChange \u003d box.bounce(canvas, strokeWidth);\r\n        rectifyBoundaries(canvas, box);\r\n        canvas.drawRect(box.getLeft(), box.getTop(), box.getRight(), box.getBottom(), box.getPaint());\r\n        handler.postDelayed(r, dirChange ? FRAME_RATE * 20 : FRAME_RATE);\r\n    }\r\n\r\n    private void rectifyBoundaries(Canvas canvas, Box box) {\r\n        if(box.getLeft() \u003c strokeWidth){\r\n            box.getrect().left \u003d strokeWidth;\r\n        }\r\n        if(box.getTop() \u003c strokeWidth){\r\n            box.getrect().top \u003d strokeWidth;\r\n        }\r\n        if(box.getRight() \u003e canvas.getWidth() - strokeWidth){\r\n            box.getrect().right \u003d canvas.getWidth() - strokeWidth;\r\n        }\r\n        if(box.getBottom() \u003e canvas.getHeight() - strokeWidth){\r\n            box.getrect().bottom \u003d canvas.getHeight() - strokeWidth;\r\n        }\r\n    }\r\n\r\n    private Runnable r \u003d new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    private static class Box{\r\n        private int c,r,dx,dy, dir;\r\n        private Rect rect;\r\n        private Paint paint;\r\n\r\n        //dir : 0 : right, 1 : down, 2 : left, 3 : up\r\n\r\n        public Box(int left, int top, int right, int bottom, int color, int radius){\r\n            rect \u003d new Rect(left, top, right, bottom);\r\n            c \u003d color;\r\n            r \u003d radius;\r\n            paint \u003d new Paint();\r\n            paint.setColor(c);\r\n            dx \u003d 0;\r\n            dy \u003d 0;\r\n            dir \u003d 0;\r\n        }\r\n\r\n        public void setColor(int col){\r\n            c \u003d col;\r\n        }\r\n\r\n        public void goTo(int l, int t, int r, int b){\r\n            rect.left \u003d l;\r\n            rect.top \u003d t;\r\n            rect.right \u003d r;\r\n            rect.bottom \u003d b;\r\n        }\r\n\r\n        public void setDx(int speed){\r\n            dx \u003d speed;\r\n        }\r\n\r\n        public void setDy(int speed){\r\n            dy \u003d speed;\r\n        }\r\n\r\n        public int getLeft(){\r\n            return rect.left;\r\n        }\r\n\r\n        public int getTop(){\r\n            return rect.top;\r\n        }\r\n\r\n        public int getRight(){\r\n            return rect.right;\r\n        }\r\n\r\n        public int getBottom(){\r\n            return rect.bottom;\r\n        }\r\n\r\n        public int getRadius(){\r\n            return r;\r\n        }\r\n\r\n        public Paint getPaint(){\r\n            return paint;\r\n        }\r\n\r\n        public void increaseRight(){\r\n            rect.right +\u003d dx;\r\n        }\r\n\r\n        public void decreaseRight(){\r\n            rect.right -\u003d dx;\r\n        }\r\n\r\n        public void increaseLeft(){\r\n            rect.left +\u003d dx;\r\n        }\r\n\r\n        public void decreaseLeft(){\r\n            rect.left -\u003d dx;\r\n        }\r\n\r\n        public void increaseTop(){\r\n            rect.top +\u003d dy;\r\n        }\r\n\r\n        public void decreaseTop(){\r\n            rect.top -\u003d dy;\r\n        }\r\n\r\n        public void increaseBottom(){\r\n            rect.bottom +\u003d dy;\r\n        }\r\n\r\n        public void decreaseBottom(){\r\n            rect.bottom -\u003d dy;\r\n        }\r\n\r\n        public Rect getrect(){\r\n            return rect;\r\n        }\r\n\r\n        //Bounce of edge\r\n        public boolean bounce(Canvas canvas, int strokeWidth){\r\n            switch (dir){\r\n                case 0:\r\n                    if(rect.right \u003c canvas.getWidth() - strokeWidth){\r\n                        increaseRight();\r\n                    } else {\r\n                        increaseLeft();\r\n                        if(rect.left \u003e canvas.getWidth()/2){\r\n                            dir++;\r\n                            return true;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if(rect.bottom \u003c canvas.getHeight() - strokeWidth){\r\n                        increaseBottom();\r\n                    } else {\r\n                        increaseTop();\r\n                        if(rect.top \u003e canvas.getHeight()/2){\r\n                            dir++;\r\n                            return true;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    if(rect.left \u003e strokeWidth){\r\n                        decreaseLeft();\r\n                    } else {\r\n                        decreaseRight();\r\n                        if(rect.right \u003c canvas.getWidth()/2){\r\n                            dir++;\r\n                            return true;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    if(rect.top \u003e strokeWidth){\r\n                        decreaseTop();\r\n                    } else {\r\n                        decreaseBottom();\r\n                        if(rect.bottom \u003c canvas.getHeight()/2){\r\n                            dir \u003d 0;\r\n                            return true;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n}"},{"name":"Shimmer ","code":"//Create Shimmer TextView :\r\n\r\nfinal ShimmerTextView b \u003d new ShimmerTextView(this);\r\n\r\nb.setText(\"Shimer View\");\r\nb.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\r\nb.setTextSize(30);\r\nb.setTextColor(Color.RED);\r\nlinear2.addView(b);\r\n\r\nfinal Shimmer shimmer \u003d new Shimmer();\r\nshimmer.start(b);\r\n\r\n\r\n//Create ShimmerButton :\r\n\r\nfinal ShimmerButton bb \u003d new ShimmerButton(this);\r\n\r\nbb.setText(\"Shimer View\");\r\nbb.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\r\nbb.setTextSize(30);\r\nbb.setTextColor(Color.RED);\r\nlinear2.addView(bb);\r\n\r\nfinal Shimmer shimmerbut \u003d new Shimmer();\r\nshimmerbut.start(bb);\r\n\r\n\r\n\r\n//For Toggle\r\n\r\nfinal Shimmer shimmer \u003d new Shimmer();\r\nfinal Shimmer shimmer2 \u003d new Shimmer();\r\nbutton1.setOnClickListener(new View.OnClickListener() {\r\npublic void onClick(View v) {\r\nif (shimmer !\u003d null \u0026\u0026 shimmer.isAnimating()) {\r\n    shimmer.cancel();\r\n} else {\r\n    shimmer.start(b);\r\n}\r\nif (shimmer2 !\u003d null \u0026\u0026 shimmer2.isAnimating()) {\r\n    shimmer2.cancel();\r\n} else {\r\n    shimmer2.start(bb);\r\n}\r\n}\r\n});\r\n\r\n\r\n//Not Need :^)\r\n\r\nshimmer.setRepeatCount(0)\r\n    .setDuration(500)\r\n    .setStartDelay(300)\r\n    .setDirection(Shimmer.ANIMATION_DIRECTION_RTL)\r\n    .setAnimatorListener(new Animator.AnimatorListener(){});\r\n\r\n//Add Class :\r\n\r\npublic interface ShimmerViewBase {\r\n\r\n    public float getGradientX();\r\n    public void setGradientX(float gradientX);\r\n    public boolean isShimmering();\r\n    public void setShimmering(boolean isShimmering);\r\n    public boolean isSetUp();\r\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback);\r\n    public int getPrimaryColor();\r\n    public void setPrimaryColor(int primaryColor);\r\n    public int getReflectionColor();\r\n    public void setReflectionColor(int reflectionColor);\r\n}\r\n\r\n\r\n\r\npublic static class ShimmerViewHelper {\r\n\r\n    public interface AnimationSetupCallback {\r\n        void onSetupAnimation(View target);\r\n    }\r\n\r\n    private static final int DEFAULT_REFLECTION_COLOR \u003d 0xFFFFFFFF;\r\n\r\n    private View view;\r\n    private Paint paint;\r\n\r\n    // center position of the gradient\r\n    private float gradientX;\r\n\r\n    // shader applied on the text view\r\n    // only null until the first global layout\r\n    private LinearGradient linearGradient;\r\n\r\n    // shader\u0027s local matrix\r\n    // never null\r\n    private Matrix linearGradientMatrix;\r\n\r\n    private int primaryColor;\r\n\r\n    // shimmer reflection color\r\n    private int reflectionColor;\r\n\r\n    // true when animating\r\n    private boolean isShimmering;\r\n\r\n    // true after first global layout\r\n    private boolean isSetUp;\r\n\r\n    // callback called after first global layout\r\n    private AnimationSetupCallback callback;\r\n\r\n    public ShimmerViewHelper(View view, Paint paint, AttributeSet attributeSet) {\r\n        this.view \u003d view;\r\n        this.paint \u003d paint;\r\n        init(attributeSet);\r\n    }\r\n\r\n    public float getGradientX() {\r\n        return gradientX;\r\n    }\r\n\r\n    public void setGradientX(float gradientX) {\r\n        this.gradientX \u003d gradientX;\r\n        view.invalidate();\r\n    }\r\n\r\n    public boolean isShimmering() {\r\n        return isShimmering;\r\n    }\r\n\r\n    public void setShimmering(boolean isShimmering) {\r\n        this.isShimmering \u003d isShimmering;\r\n    }\r\n\r\n    public boolean isSetUp() {\r\n        return isSetUp;\r\n    }\r\n\r\n    public void setAnimationSetupCallback(AnimationSetupCallback callback) {\r\n        this.callback \u003d callback;\r\n    }\r\n\r\n    public int getPrimaryColor() {\r\n        return primaryColor;\r\n    }\r\n\r\n    public void setPrimaryColor(int primaryColor) {\r\n        this.primaryColor \u003d primaryColor;\r\n        if (isSetUp) {\r\n            resetLinearGradient();\r\n        }\r\n    }\r\n\r\n    public int getReflectionColor() {\r\n        return reflectionColor;\r\n    }\r\n\r\n    public void setReflectionColor(int reflectionColor) {\r\n        this.reflectionColor \u003d reflectionColor;\r\n        if (isSetUp) {\r\n            resetLinearGradient();\r\n        }\r\n    }\r\n\r\n    private void init(AttributeSet attributeSet) {\r\n\r\n        reflectionColor \u003d DEFAULT_REFLECTION_COLOR;\r\n\r\n        if (attributeSet !\u003d null) {\r\n      \r\n            reflectionColor \u003d DEFAULT_REFLECTION_COLOR;\r\n        }\r\n\r\n        linearGradientMatrix \u003d new Matrix();\r\n    }\r\n\r\n    private void resetLinearGradient() {\r\n        linearGradient \u003d new LinearGradient(-view.getWidth(), 0, 0, 0,\r\n                new int[]{\r\n                        primaryColor,\r\n                        reflectionColor,\r\n                        primaryColor,\r\n                },\r\n                new float[]{\r\n                        0,\r\n                        0.5f,\r\n                        1\r\n                },\r\n                Shader.TileMode.CLAMP\r\n        );\r\n\r\n        paint.setShader(linearGradient);\r\n    }\r\n\r\n    protected void onSizeChanged() {\r\n\r\n        resetLinearGradient();\r\n\r\n        if (!isSetUp) {\r\n            isSetUp \u003d true;\r\n\r\n            if (callback !\u003d null) {\r\n                callback.onSetupAnimation(view);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void onDraw() {\r\n\r\n        if (isShimmering) {\r\n\r\n          \r\n            if (paint.getShader() \u003d\u003d null) {\r\n                paint.setShader(linearGradient);\r\n            }\r\n\r\n            linearGradientMatrix.setTranslate(2 * gradientX, 0);\r\n\r\n            linearGradient.setLocalMatrix(linearGradientMatrix);\r\n\r\n        } else {\r\n            paint.setShader(null);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\npublic class ShimmerTextView extends TextView implements ShimmerViewBase {\r\n\r\n    private ShimmerViewHelper shimmerViewHelper;\r\n\r\n    public ShimmerTextView(Context context) {\r\n        super(context);\r\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), null);\r\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n    }\r\n\r\n    public ShimmerTextView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\r\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n    }\r\n\r\n    public ShimmerTextView(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\r\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n    }\r\n\r\n    @Override\r\n    public float getGradientX() {\r\n        return shimmerViewHelper.getGradientX();\r\n    }\r\n\r\n    @Override\r\n    public void setGradientX(float gradientX) {\r\n        shimmerViewHelper.setGradientX(gradientX);\r\n    }\r\n\r\n    @Override\r\n    public boolean isShimmering() {\r\n        return shimmerViewHelper.isShimmering();\r\n    }\r\n\r\n    @Override\r\n    public void setShimmering(boolean isShimmering) {\r\n        shimmerViewHelper.setShimmering(isShimmering);\r\n    }\r\n\r\n    @Override\r\n    public boolean isSetUp() {\r\n        return shimmerViewHelper.isSetUp();\r\n    }\r\n\r\n    @Override\r\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback) {\r\n        shimmerViewHelper.setAnimationSetupCallback(callback);\r\n    }\r\n\r\n    @Override\r\n    public int getPrimaryColor() {\r\n        return shimmerViewHelper.getPrimaryColor();\r\n    }\r\n\r\n    @Override\r\n    public void setPrimaryColor(int primaryColor) {\r\n        shimmerViewHelper.setPrimaryColor(primaryColor);\r\n    }\r\n\r\n    @Override\r\n    public int getReflectionColor() {\r\n        return shimmerViewHelper.getReflectionColor();\r\n    }\r\n\r\n    @Override\r\n    public void setReflectionColor(int reflectionColor) {\r\n        shimmerViewHelper.setReflectionColor(reflectionColor);\r\n    }\r\n\r\n    @Override\r\n    public void setTextColor(int color) {\r\n        super.setTextColor(color);\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setTextColor(android.content.res.ColorStateList colors) {\r\n        super.setTextColor(colors);\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n        super.onSizeChanged(w, h, oldw, oldh);\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.onSizeChanged();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDraw(Canvas canvas) {\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.onDraw();\r\n        }\r\n        super.onDraw(canvas);\r\n    }\r\n}\r\n\r\n\r\npublic class ShimmerButton extends Button implements ShimmerViewBase {\r\n\r\n    private ShimmerViewHelper shimmerViewHelper;\r\n\r\n    public ShimmerButton(Context context) {\r\n        super(context);\r\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), null);\r\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n    }\r\n\r\n    public ShimmerButton(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\r\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n    }\r\n\r\n    public ShimmerButton(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\r\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n    }\r\n\r\n    @Override\r\n    public float getGradientX() {\r\n        return shimmerViewHelper.getGradientX();\r\n    }\r\n\r\n    @Override\r\n    public void setGradientX(float gradientX) {\r\n        shimmerViewHelper.setGradientX(gradientX);\r\n    }\r\n\r\n    @Override\r\n    public boolean isShimmering() {\r\n        return shimmerViewHelper.isShimmering();\r\n    }\r\n\r\n    @Override\r\n    public void setShimmering(boolean isShimmering) {\r\n        shimmerViewHelper.setShimmering(isShimmering);\r\n    }\r\n\r\n    @Override\r\n    public boolean isSetUp() {\r\n        return shimmerViewHelper.isSetUp();\r\n    }\r\n\r\n    @Override\r\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback) {\r\n        shimmerViewHelper.setAnimationSetupCallback(callback);\r\n    }\r\n\r\n    @Override\r\n    public int getPrimaryColor() {\r\n        return shimmerViewHelper.getPrimaryColor();\r\n    }\r\n\r\n    @Override\r\n    public void setPrimaryColor(int primaryColor) {\r\n        shimmerViewHelper.setPrimaryColor(primaryColor);\r\n    }\r\n\r\n    @Override\r\n    public int getReflectionColor() {\r\n        return shimmerViewHelper.getReflectionColor();\r\n    }\r\n\r\n    @Override\r\n    public void setReflectionColor(int reflectionColor) {\r\n        shimmerViewHelper.setReflectionColor(reflectionColor);\r\n    }\r\n\r\n    @Override\r\n    public void setTextColor(int color) {\r\n        super.setTextColor(color);\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setTextColor(android.content.res.ColorStateList colors) {\r\n        super.setTextColor(colors);\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n        super.onSizeChanged(w, h, oldw, oldh);\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.onSizeChanged();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDraw(Canvas canvas) {\r\n        if (shimmerViewHelper !\u003d null) {\r\n            shimmerViewHelper.onDraw();\r\n        }\r\n        super.onDraw(canvas);\r\n    }\r\n}\r\n\r\npublic class Shimmer {\r\n\r\n    public static final int ANIMATION_DIRECTION_LTR \u003d 0;\r\n    public static final int ANIMATION_DIRECTION_RTL \u003d 1;\r\n\r\n    private static final int DEFAULT_REPEAT_COUNT \u003d android.animation.ValueAnimator.INFINITE;\r\n    private static final long DEFAULT_DURATION \u003d 1000;\r\n    private static final long DEFAULT_START_DELAY \u003d 0;\r\n    private static final int DEFAULT_DIRECTION \u003d ANIMATION_DIRECTION_LTR;\r\n\r\n    private int repeatCount;\r\n    private long duration;\r\n    private long startDelay;\r\n    private int direction;\r\n    private android.animation.Animator.AnimatorListener animatorListener;\r\n\r\n    private android.animation.ObjectAnimator animator;\r\n\r\n    public Shimmer() {\r\n        repeatCount \u003d DEFAULT_REPEAT_COUNT;\r\n        duration \u003d DEFAULT_DURATION;\r\n        startDelay \u003d DEFAULT_START_DELAY;\r\n        direction \u003d DEFAULT_DIRECTION;\r\n    }\r\n\r\n    public int getRepeatCount() {\r\n        return repeatCount;\r\n    }\r\n\r\n    public Shimmer setRepeatCount(int repeatCount) {\r\n        this.repeatCount \u003d repeatCount;\r\n        return this;\r\n    }\r\n\r\n    public long getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    public Shimmer setDuration(long duration) {\r\n        this.duration \u003d duration;\r\n        return this;\r\n    }\r\n\r\n    public long getStartDelay() {\r\n        return startDelay;\r\n    }\r\n\r\n    public Shimmer setStartDelay(long startDelay) {\r\n        this.startDelay \u003d startDelay;\r\n        return this;\r\n    }\r\n\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n\r\n    public Shimmer setDirection(int direction) {\r\n\r\n        if (direction !\u003d ANIMATION_DIRECTION_LTR \u0026\u0026 direction !\u003d ANIMATION_DIRECTION_RTL) {\r\n            throw new IllegalArgumentException(\"The animation direction must be either ANIMATION_DIRECTION_LTR or ANIMATION_DIRECTION_RTL\");\r\n        }\r\n\r\n        this.direction \u003d direction;\r\n        return this;\r\n    }\r\n\r\n    public android.animation.Animator.AnimatorListener getAnimatorListener() {\r\n        return animatorListener;\r\n    }\r\n\r\n    public Shimmer setAnimatorListener(android.animation.Animator.AnimatorListener animatorListener) {\r\n        this.animatorListener \u003d animatorListener;\r\n        return this;\r\n    }\r\n\r\n    public \u003cV extends View \u0026 ShimmerViewBase\u003e void start(final V shimmerView) {\r\n\r\n        if (isAnimating()) {\r\n            return;\r\n        }\r\n\r\n        final Runnable animate \u003d new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                shimmerView.setShimmering(true);\r\n\r\n                float fromX \u003d 0;\r\n                float toX \u003d shimmerView.getWidth();\r\n                if (direction \u003d\u003d ANIMATION_DIRECTION_RTL) {\r\n                    fromX \u003d shimmerView.getWidth();\r\n                    toX \u003d 0;\r\n                }\r\n\r\n                animator \u003d android.animation.ObjectAnimator.ofFloat(shimmerView, \"gradientX\", fromX, toX);\r\n                animator.setRepeatCount(repeatCount);\r\n                animator.setDuration(duration);\r\n                animator.setStartDelay(startDelay);\r\n                animator.addListener(new android.animation.Animator.AnimatorListener() {\r\n                    @Override\r\n                    public void onAnimationStart(android.animation.Animator animation) {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onAnimationEnd(android.animation.Animator animation) {\r\n                        shimmerView.setShimmering(false);\r\n\r\n                        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.JELLY_BEAN) {\r\n                            shimmerView.postInvalidate();\r\n                        } else {\r\n                            shimmerView.postInvalidateOnAnimation();\r\n                        }\r\n\r\n                        animator \u003d null;\r\n                    }\r\n\r\n                    @Override\r\n                    public void onAnimationCancel(android.animation.Animator animation) {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onAnimationRepeat(android.animation.Animator animation) {\r\n\r\n                    }\r\n                });\r\n\r\n                if (animatorListener !\u003d null) {\r\n                    animator.addListener(animatorListener);\r\n                }\r\n\r\n                animator.start();\r\n            }\r\n        };\r\n\r\n        if (!shimmerView.isSetUp()) {\r\n            shimmerView.setAnimationSetupCallback(new ShimmerViewHelper.AnimationSetupCallback() {\r\n                @Override\r\n                public void onSetupAnimation(final View target) {\r\n                    animate.run();\r\n                }\r\n            });\r\n        } else {\r\n            animate.run();\r\n        }\r\n    }\r\n\r\n    public void cancel() {\r\n        if (animator !\u003d null) {\r\n            animator.cancel();\r\n        }\r\n    }\r\n\r\n    public boolean isAnimating() {\r\n        return animator !\u003d null \u0026\u0026 animator.isRunning();\r\n    }\r\n}"},{"name":"Drawer Font","code":"_drawer_textview1.setTypeface(Typeface.createFromAsset(getAssets(),\" input Your Font Here \"), 0);"},{"name":"Topjoy Ads","code":"intitialize.tapjoy.(this);"},{"name":"Boardess Code","code":"android.graphics.drawable.GradientDrawable FGCFGJF \u003d new android.graphics.drawable.GradientDrawable();\nint FGCFGJFADD[] \u003d new int[]{ Color.argb(255,255,255,255), Color.argb(255,255,255,255) };\nFGCFGJF.setColors(FGCFGJFADD);\nFGCFGJF.setOrientation(android.graphics.drawable.GradientDrawable.Orientation.BOTTOM_TOP);\nFGCFGJF.setCornerRadii(new float[] { 7, 7, 7, 7, 7, 7, 7, 7 });\nFGCFGJF.setStroke(0, Color.argb(255,0,0,0));\nandroid.graphics.drawable.RippleDrawable FGCFGJF_RE \u003d new android.graphics.drawable.RippleDrawable(new android.content.res.ColorStateList(new int[][]{new int[]{}}, new int[]{ Color.argb(113,23,170,224)}), FGCFGJF, null);\n_drawer_click_tools.setBackground(FGCFGJF_RE);\nif(Build.VERSION.SDK_INT \u003e\u003d 21) { _drawer_click_tools.setElevation(0f); }"},{"name":"Lotti Animation json","code":"LottieAnimationView lv \u003d new LottieAnimationView(this);\n\nlv.setAnimation(\"dev.json\");\n\nlv.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));\n\nlv.setRepeatCount(-1);\n\t\tlv.setRepeatMode(com.airbnb.lottie.LottieDrawable.RESTART);\n\nlinear1.addView(lv);\nlv.playAnimation();"},{"name":"Dialog Icon","code":"NamaDialog.setIcon(R.drawable.NamaGambar);"},{"name":"Get Asset File","code":"}\n\t\n\tpublic static void copyFileOrDir(Context ctx,String srcPath,String dscPath) {\n\t\tandroid.content.res.AssetManager assetManager \u003d ctx.getAssets();\n\t\tString assets[] \u003d null;\n\t\ttry {\n\t\t\tassets \u003d assetManager.list(srcPath);\n\t\t\tif (assets.length \u003d\u003d 0) {\n\t\t\t\tcopyFile(ctx,srcPath,dscPath);\n\t\t\t} else {\n\t\t\t\tjava.io.File dir \u003d new java.io.File(dscPath);\n\t\t\t\tif (!dir.exists())\n\t\t\t\t\tdir.mkdir();\n\t\t\t\tfor (int i \u003d 0; i \u003c assets.length; ++i) {\n\t\t\t\t\tcopyFileOrDir(ctx,srcPath + \"/\" + assets[i],dscPath + \"/\" + assets[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tandroid.util.Log.e(\"tag\", \"I/O Exception\", ex);\n\t\t}\n\t}\n\n\tpublic static void copyFile(Context ctx,String filename,String dscPath) {\n\t\tandroid.content.res.AssetManager assetManager \u003d ctx.getAssets();\n\n\t\tjava.io.InputStream in \u003d null;\n\t\tjava.io.OutputStream out \u003d null;\n\t\ttry {\n\t\t\tin \u003d assetManager.open(filename);\n\t\t\tout \u003d new java.io.FileOutputStream(dscPath);\n\n\t\t\tbyte[] buffer \u003d new byte[2048];\n\t\t\tint read;\n\t\t\twhile ((read \u003d in.read(buffer)) !\u003d -1) {\n\t\t\t\tout.write(buffer, 0, read);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tin \u003d null;\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\tout \u003d null;\n\t\t} catch (Exception e) {\n\t\t\tandroid.util.Log.e(\"tag\", e.getMessage());\n\t\t}"},{"name":"Get Asset File from Asset to Sd card","code":"```public static void copyFile(Context ctx,String filename,String dscPath) {\n\t\tAssetManager assetManager \u003d ctx.getAssets();\n\n\t\tInputStream in \u003d null;\n\t\tOutputStream out \u003d null;\n\t\ttry {\n\t\t\tin \u003d assetManager.open(filename);\n\t\t\tout \u003d new FileOutputStream(dscPath);\n\n\t\t\tbyte[] buffer \u003d new byte[2048];\n\t\t\tint read;\n\t\t\twhile ((read \u003d in.read(buffer)) !\u003d -1) {\n\t\t\t\tout.write(buffer, 0, read);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tin \u003d null;\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\tout \u003d null;\n\t\t} catch (Exception e) {\n\t\t\tLog.e(\"tag\", e.getMessage());\n\t\t}\n\n\t}\n\n\n//this to recurcive Folder and File\n\n```public static void copyFileOrDir(Context ctx,String srcPath,String dscPath) {\n\t\tAssetManager assetManager \u003d ctx.getAssets();\n\t\tString assets[] \u003d null;\n\t\ttry {\n\t\t\tassets \u003d assetManager.list(srcPath);\n\t\t\tif (assets.length \u003d\u003d 0) {\n\t\t\t\tcopyFile(ctx,srcPath,dscPath);\n\t\t\t} else {\n\t\t\t\tFile dir \u003d new File(dscPath);\n\t\t\t\tif (!dir.exists())\n\t\t\t\t\tdir.mkdir();\n\t\t\t\tfor (int i \u003d 0; i \u003c assets.length; ++i) {\n\t\t\t\t\tcopyFileOrDir(ctx,srcPath + \"/\" + assets[i],dscPath + \"/\" + assets[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException ex) {\n\t\t\tLog.e(\"tag\", \"I/O Exception\", ex);\n\t\t}\n\t}\n\n\tpublic static void copyFile(Context ctx,String filename,String dscPath) {\n\t\tAssetManager assetManager \u003d ctx.getAssets();\n\n\t\tInputStream in \u003d null;\n\t\tOutputStream out \u003d null;\n\t\ttry {\n\t\t\tin \u003d assetManager.open(filename);\n\t\t\tout \u003d new FileOutputStream(dscPath);\n\n\t\t\tbyte[] buffer \u003d new byte[2048];\n\t\t\tint read;\n\t\t\twhile ((read \u003d in.read(buffer)) !\u003d -1) {\n\t\t\t\tout.write(buffer, 0, read);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tin \u003d null;\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\tout \u003d null;\n\t\t} catch (Exception e) {\n\t\t\tLog.e(\"tag\", e.getMessage());\n\t\t}\n\n\t}"},{"name":"String to EditText","code":"myedittext.append(\"current_this_edittext_string\"); "},{"name":"Fab Hide","code":"_fab.setVisibility(View.GONE);"},{"name":"Fab Show","code":"_fab.setVisibility(View.VISIBLE);"},{"name":"Battery Level","code":"BatteryManager bm \u003d (BatteryManager)getSystemService(BATTERY_SERVICE);\r\nint batLevel \u003d bm.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);\r\ntextview1.setText(Integer.toString(batLevel));"},{"name":"ListView AutoScroll","code":"namalistview.setSelection(namalistmap.size());"},{"name":"Firebase Upload Asd","code":"NamaFirebaseStorageMu.child(Uri.parse(NamaStringLokasiPathFile)\n                  .getLastPathSegment())\n                  .putFile(Uri.fromFile(new File(NamaStringLokasiPathFile)))\n                  .addOnFailureListener(_NamaFirebaseStorageMu_failure_listener)\n                  .addOnProgressListener(_NamaFirebaseStorageMu_upload_progress_listener)\n                  .continueWithTask(new Continuation\u003cUploadTask.TaskSnapshot, com.google.android.gms.tasks.Task\u003cUri\u003e\u003e() {\n               @Override\n               public com.google.android.gms.tasks.Task\u003cUri\u003e then(com.google.android.gms.tasks.Task\u003cUploadTask.TaskSnapshot\u003e task) throws Exception {\n                  return NamaFirebaseStorageMu.child(Uri.parse(NamaStringLokasiPathFile).getLastPathSegment()).getDownloadUrl();\n               }}).addOnCompleteListener(_Test_upload_success_listener);"},{"name":"Upload File On Server Hosting","code":"public String uploadFile(String imagePath) throws IOException\r\n {\r\nStrictMode.ThreadPolicy policy \u003d new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n        StrictMode.setThreadPolicy(policy);\r\n  BufferedReader br \u003d null;\r\n\r\n  String fileName \u003d imagePath;\r\n  HttpURLConnection conn \u003d null;\r\n  DataOutputStream dos \u003d null;  \r\n  String lineEnd \u003d \"\r\n\";\r\n  String twoHyphens \u003d \"--\";\r\n  String boundary \u003d \"*****\";\r\n  int bytesRead, bytesAvailable, bufferSize;\r\n  byte[] buffer;\r\n  int maxBufferSize \u003d 1 * 1024 * 1024; \r\n  File sourceFile \u003d new File(imagePath); \r\n\r\n  if (!sourceFile.isFile())\r\n  {\r\n\r\n\r\n\r\n            System.out.println(\"uploadFile: Source File not exist :\" + imagePath);\r\n\r\n\r\n  }\r\n  else\r\n  {\r\n            try\r\n   { \r\n\r\n\r\n                FileInputStream fileInputStream \u003d new FileInputStream(sourceFile);\r\n                URL url \u003d new URL(\"http://site.com/upload.php\");\r\n\r\n\r\n                conn \u003d (HttpURLConnection) url.openConnection(); \r\n                conn.setDoInput(true); \r\n                conn.setDoOutput(true); \r\n                conn.setUseCaches(false); \r\n                conn.setRequestMethod(\"POST\");\r\n                conn.setRequestProperty(\"Connection\", \"Keep-Alive\");\r\n                conn.setRequestProperty(\"ENCTYPE\", \"multipart/form-data\");\r\n                conn.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary\u003d\" + boundary);\r\n                conn.setRequestProperty(\"uploaded_file\", fileName); \r\n\r\n                dos \u003d new DataOutputStream(conn.getOutputStream());\r\n\r\n                dos.writeBytes(twoHyphens + boundary + lineEnd); \r\n                dos.writeBytes(\"Content-Disposition: form-data; name\u003d\"uploaded_file\";filename\u003d\"\"\r\n          + fileName + \"\"\" + lineEnd);\r\n\r\n                dos.writeBytes(lineEnd);\r\n\r\n\r\n                bytesAvailable \u003d fileInputStream.available(); \r\n\r\n                bufferSize \u003d Math.min(bytesAvailable, maxBufferSize);\r\n                buffer \u003d new byte[bufferSize];\r\n\r\n\r\n\r\n                bytesRead \u003d fileInputStream.read(buffer, 0, bufferSize);  \r\n\r\n                while (bytesRead \u003e 0)\r\n    {\r\n\r\n     dos.write(buffer, 0, bufferSize);\r\n     bytesAvailable \u003d fileInputStream.available();\r\n     bufferSize \u003d Math.min(bytesAvailable, maxBufferSize);\r\n     bytesRead \u003d fileInputStream.read(buffer, 0, bufferSize);   \r\n\r\n    }\r\n\r\n\r\n                dos.writeBytes(lineEnd);\r\n                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);\r\n\r\n\r\n                int serverResponseCode \u003d conn.getResponseCode();\r\n                String serverResponseMessage \u003d conn.getResponseMessage();\r\n\r\n                System.out.println(\"uploadFile : HTTP Response is : \" \r\n           + serverResponseMessage + \": \" + serverResponseCode);\r\n\r\n    if (200 \u003c\u003d conn.getResponseCode() \u0026\u0026 conn.getResponseCode() \u003c\u003d 299)\r\n    {\r\n     br \u003d new BufferedReader(new InputStreamReader(conn.getInputStream()));\r\n    }\r\n    else\r\n    {\r\n     br \u003d new BufferedReader(new InputStreamReader(conn.getErrorStream()));\r\n    }\r\n\r\n\r\n                \r\n                fileInputStream.close();\r\n                dos.flush();\r\n                dos.close();\r\n\r\n   }\r\n   catch (MalformedURLException ex)\r\n   {\r\n\r\n\r\n    ex.printStackTrace();\r\n\r\n    System.out.println(\"Upload file to server: error: \" + ex.getMessage());  \r\n   }\r\n   catch (Exception e)\r\n   {\r\n\r\n\r\n    e.printStackTrace();\r\n\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n  } \r\n  return br.readLine();\r\n }"},{"name":"Block Screenshort ","code":"getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);"},{"name":"Custome Toast ","code":"Toast toast\u003dToast.makeText(MainActivity.this,\"Ini Toast Custom loh.\",Toast.LENGTH_SHORT); View view \u003dtoast.getView(); \n\nview.setBackgroundColor(Color.GREEN);\n\n//image background\n\n//view.setBackgroundResource(R.drawable.custom_background); \n\nTextView toastMessage \u003d (TextView) toast.getView().findViewById(android.R.id.message); \n\ntoastMessage.setTextColor(Color.RED);\n\n//atau bisa pakai hex color\n\n//toastMessage.setTextColor(Color.parseColor(\"#000000\"));\n\ntoast.show();"},{"name":"ActionBar BackButton","code":"\n//code By Gymkhana Studio\n\n\ngetActionBar().setDisplayHomeAsUpEnabled(true);\n/* */} \n@Override \npublic boolean onMenuItemSelected(int featureId, MenuItem item) {\nint itemId \u003d item.getItemId(); \nswitch (itemId) {\ncase android.R.id.home:\nfinish();\nbreak;\n}\nreturn true;"},{"name":"ActionBar setIcon","code":"getActionBar().setIcon(r.drawable.icon_name);"},{"name":"ActionBar Change Home","code":"getActionBar().setHomeAsUpIndicator(R.drawable.ic_home);"},{"name":"Android Version","code":"release \u003d Build.VERSION.RELEASE;"},{"name":"getFile Length ","code":"long legth \u003d FileUtil.getFileLength(FileUtil.getExternalStorageDir().concat(\"/.sketchware/resources/icons/\").concat(Uri.parse(liststring.get((int)((liststring.size() - _position) - 1))).getLastPathSegment()).concat(\"/icon.png\").toString());\niconLength \u003d (Long.toString(legth));\n\t\t\t}"},{"name":"ImageBitMap","code":"i.setImageBitmap(FileUtil.decodeSampleBitmapFromPath(FileUtil.getExternalStorageDir().concat(\"/.sketchware/resources/icons/\").concat(Uri.parse(liststring.get((int)((liststring.size() - _position) - 1))).getLastPathSegment()).concat(\"/icon.png\"), 1024, 1024));\r"},{"name":"setElevation","code":"_view.setElevation((float)_number);"},{"name":"setDrawerHeight","code":"LinearLayout _nav_view \u003d (LinearLayout) findViewById(R.id._nav_view);\n\nandroidx.drawerlayout.widget.DrawerLayout.LayoutParams params \u003d (androidx.drawerlayout.widget.DrawerLayout.LayoutParams)_nav_view.getLayoutParams();\n\nparams.width \u003d (int)getDip((int)_num);\n\nparams.height \u003d androidx.drawerlayout.widget.DrawerLayout.LayoutParams.MATCH_PARENT;\n\n_nav_view.setLayoutParams(params);"},{"name":"setConer Redius","code":"android.graphics.drawable.GradientDrawable STRING \u003d new android.graphics.drawable.GradientDrawable();\nSTRING.setColor(Color.parseColor(_color));\nSTRING.setCornerRadius((int)_radius);\n_view.setBackground(STRING);\nif(Build.VERSION.SDK_INT \u003e\u003d 21) { \n_view.setElevation((int)_shadow);}"},{"name":"setAllCornerRedius","code":"android.graphics.drawable.GradientDrawable IEHACAI \u003d new android.graphics.drawable.GradientDrawable();\nIEHACAI.setColor(Color.parseColor(\"#FFFFFF\"));\nIEHACAI.setCornerRadii(new float[] { 50, 50, 50, 50, 50, 50, 50, 50 });\nIEHACAI.setStroke(3, Color.parseColor(\"#03A9F4\"));\n_view.setBackground(IEHACAI);"},{"name":"setStatusBar Color","code":"Window w \u003d this.getWindow();\nw.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\nw.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\nw.setStatusBarColor(Color.parseColor(\"#00ACC1\"));"},{"name":"ImageAuto Slider","code":"autoImageAdapter \u003d new ImageSlider(imagelist);\nviewPager \u003d new androidx.viewpager.widget.ViewPager(this);\nviewPager.addOnPageChangeListener(onPageChangeListener);\nhandler.postDelayed(runnable, (long)duration);\nviewPager.setAdapter(autoImageAdapter);\nviewPager.setOffscreenPageLimit(imagelist.size());\nviewPager.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\nlinear56.addView(viewPager);\n}\nprivate Handler handler \u003d new Handler();\nprivate androidx.viewpager.widget.ViewPager.OnPageChangeListener onPageChangeListener \u003d new androidx.viewpager.widget.ViewPager.OnPageChangeListener() {\npublic void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n}\n\npublic void onPageSelected(int position) {\nrunnable \u003d new IncreasePagerPosition(position);\nhandler.postDelayed(runnable, (long)duration);\nisRunning \u003d true;\n}\n\npublic void onPageScrollStateChanged(int state) {\nif (state \u003d\u003d 1) {\nhandler.removeCallbacks(runnable);\nisRunning \u003d false;\n} else if (state \u003d\u003d 0) {\nif (!isRunning) {\nrunnable \u003d new IncreasePagerPosition(viewPager.getCurrentItem());\nhandler.postDelayed(runnable, (long)duration);\nisRunning \u003d true;\n}\n}\n}\n};\n\nprivate ImageSlider autoImageAdapter;\nprivate Runnable runnable \u003d new IncreasePagerPosition(0);\nprivate androidx.viewpager.widget.ViewPager viewPager;\n\nprivate class IncreasePagerPosition implements Runnable {\nprivate int position;\n\npublic IncreasePagerPosition(int position) {\nthis.position \u003d position;\n}\n\npublic void run() {\nint setPosition \u003d this.position + 1;\nif (setPosition \u003d\u003d imagelist.size()) {\nsetPosition \u003d 0;\n}\nisRunning \u003d false;\nviewPager.setCurrentItem(setPosition);\n\n}\n}\n\nprivate class ImageSlider extends androidx.viewpager.widget.PagerAdapter {\nprivate ArrayList\u003cHashMap\u003cString, Object\u003e\u003e lists;\n\npublic ImageSlider(ArrayList\u003cHashMap\u003cString, Object\u003e\u003e lists) {\nthis.lists \u003d lists;\n}\n\npublic int getCount() {\nreturn lists.size();\n}\n\npublic boolean isViewFromObject(View view, Object object) {\nreturn view \u003d\u003d object;\n}\n\npublic Object instantiateItem(ViewGroup container, int position) {\nView viewLayout \u003d ((LayoutInflater) getSystemService(\"layout_inflater\")).inflate(R.layout.item_image_slider, container, false);\n\nImageView img \u003d (ImageView) viewLayout.findViewById(R.id.imageview1);\n\nString rsc \u003d imagelist.get(position).get(\"slider\").toString();\nint id \u003d getResources().getIdentifier(rsc, \"drawable\", getPackageName());\nandroid.graphics.drawable.Drawable drawable \u003d getResources().getDrawable(id); Bitmap bitmap \u003d BitmapFactory.decodeResource(getApplicationContext ().getResources(), id); \nimg.setImageBitmap(bitmap); \ncontainer.addView(viewLayout);\nreturn viewLayout;\n}\n\npublic void destroyItem(ViewGroup container, int position, Object object) {\ncontainer.removeView((LinearLayout) object);\n}\n\n\n//Create a customeView empty and add linear1\n//create a number Veriable name as duration and set duration \n//Create list map as imagelist and add (key as you want and in value add image id)"},{"name":"Round Linear","code":"android.graphics.drawable.GradientDrawable ed \u003d new android.graphics.drawable.GradientDrawable();\ned.setColor(Color.parseColor(\"#00BCD4\"));\ned.setCornerRadius(30);\n_v.setBackground(ed);"},{"name":"EditText Span","code":"final TextView regex1 \u003d new TextView(this);\nfinal TextView regex2 \u003d new TextView(this);\nfinal TextView regex3 \u003d new TextView(this);\nfinal TextView regex4 \u003d new TextView(this);\nfinal TextView regex5 \u003d new TextView(this);\nfinal TextView regex6 \u003d new TextView(this);\nfinal TextView regex7 \u003d new TextView(this);\nfinal TextView regex8 \u003d new TextView(this);\nfinal TextView regex9 \u003d new TextView(this);\nfinal TextView regex10 \u003d new TextView(this);\nregex1.setText(\"(out|print|println|valueOf|toString|concat|equals|for|while|switch|getText\");\nregex2.setText(\"|println|printf|print|out|parseInt|round|sqrt|charAt|compareTo|compareToIgnoreCase|concat|contains|contentEquals|equals|length|toLowerCase|trim|toUpperCase|toString|valueOf|substring|startsWith|split|replace|replaceAll|lastIndexOf|size)\");\nregex3.setText(\"(public|private|protected|void|switch|case|class|import|package|extends|Activity|TextView|EditText|LinearLayout|CharSequence|String|int|onCreate|ArrayList|float|if|else|static|Intent|Button|SharedPreferences\");\nregex4.setText(\"|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|interface|long|native|new|package|private|protected|\");\nregex5.setText(\"public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while|true|false|null)\");\nregex6.setText(\"([0-9]+)\");\nregex7.setText(\"(\\\\w+)(\\\\()+\");\nregex8.setText(\"\\\\@\\\\s*(\\\\w+)\");\nregex9.setText(\"\\\"(.*?)\\\"|\u0027(.*?)\u0027\");\nregex10.setText(\"/\\\\*(?:.|[\\\\n\\\\r])*?\\\\*/|//.*\");\nfinal String secondaryColor \u003d \"#678cb1\";\nfinal String primaryColor \u003d \"#4caf50\";\nfinal String numbersColor \u003d \"#f6c921\";\nfinal String quotesColor \u003d \"#ff1744\";\nfinal String commentsColor \u003d \"#9e9e9e\";\n_spanview.addTextChangedListener(new TextWatcher() {\nColorScheme keywords1 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex1.getText().toString().concat(regex2.getText().toString())), Color.parseColor(secondaryColor));\nColorScheme keywords2 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex3.getText().toString().concat(regex4.getText().toString().concat(regex5.getText().toString()))), Color.parseColor(primaryColor));\nColorScheme keywords3 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex6.getText().toString()), Color.parseColor(numbersColor));\nColorScheme keywords4 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex7.getText().toString()), Color.parseColor(secondaryColor));\nColorScheme keywords5 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex9.getText().toString()), Color.parseColor(quotesColor));\nColorScheme keywords6 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex10.getText().toString()), Color.parseColor(commentsColor));\nColorScheme keywords7 \u003d new ColorScheme(java.util.regex.Pattern.compile(regex8.getText().toString()), Color.parseColor(numbersColor));\nfinal ColorScheme[] schemes \u003d {keywords1, keywords2, keywords3, keywords4, keywords5, keywords6, keywords7};\n@Override\npublic void beforeTextChanged(CharSequence s, int start, int count, int after) {\n}\n@Override\npublic void onTextChanged(CharSequence s, int start, int before, int count) {\n}\n@Override\npublic void afterTextChanged(Editable s) {\nremoveSpans(s, android.text.style.ForegroundColorSpan.class);\nfor(ColorScheme scheme : schemes) {\nfor(java.util.regex.Matcher m \u003d scheme.pattern.matcher(s);\nm.find();) {\nif (scheme \u003d\u003d keywords4) {\ns.setSpan(new android.text.style.ForegroundColorSpan(scheme.color), m.start(), m.end()-1, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n} else {\ns.setSpan(new android.text.style.ForegroundColorSpan(scheme.color), m.start(), m.end(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n}\n}\n}\n}\nvoid removeSpans(Editable e, Class\u003c? extends android.text.style.CharacterStyle\u003e type) {\nandroid.text.style.CharacterStyle[] spans \u003d e.getSpans(0, e.length(), type);\nfor (android.text.style.CharacterStyle span : spans) {\ne.removeSpan(span);\n}\n}\nclass ColorScheme {\nfinal java.util.regex.Pattern pattern;\nfinal int color;\nColorScheme(java.util.regex.Pattern pattern, int color) {\nthis.pattern \u003d pattern;\nthis.color \u003d color;\n}\n}\n});"},{"name":"Custome Spinner","code":"spinner1.setAdapter(new Listview1Adapter(listmap));\n\n//make  listmap and add data\n// add listView and add onBind\n"},{"name":"EditText Line Count ","code":"edittext1.addTextChangedListener(new TextWatcher() {\n\t@Override\n\tpublic void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\n\t\tfinal String _charSeq \u003d _param1.toString();\n\n\n\t\ttextview1.setText(\"1\");\n\t\tif (LineAble) {\n\t\t\tcount \u003d edittext1.getLineCount() - 1;\n\t\t\tline \u003d 1;\n\t\t\tfor(int _repeat32 \u003d 0; _repeat32 \u003c (int)(count); _repeat32++) {\n\t\t\t\t_addLine();\n\t\t\t}\n\t\t}\n\t}\n\t\t\t\n\t@Override\n\tpublic void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\n\t\t\n\t}\n\t\t\t\n\t@Override\n\tpublic void afterTextChanged(Editable _param1) {\n\t\t\n\t}\n});\n}\nprivate boolean LineAble \u003d true;\nprivate double count \u003d 0;\nprivate double line \u003d 0;\nprivate void _addLine () {\n\ttextview1.setText(textview1.getText().toString().concat(\"\\n\".concat(String.valueOf((long)(line + 1)))));\n\tline++;\n}\n{"},{"name":"EditText SetError","code":"try {\nEditText edit \u003d (EditText)_view;\nedit.setError(_txt);\n} catch(Exception e) {\nshowMessage(e.toString());\n}"},{"name":"Custom Toast","code":"LayoutInflater inflater \u003d getLayoutInflater(); View toastLayout \u003d inflater.inflate(R.layout.toast, null);\n\nTextView textview1 \u003d (TextView) toastLayout.findViewById(R.id.textview1);\ntextview1.setText(_show);\nLinearLayout linear1 \u003d (LinearLayout) toastLayout.findViewById(R.id.linear1);\n\nandroid.graphics.drawable.GradientDrawable gd \u003d new android.graphics.drawable.GradientDrawable();\ngd.setColor(Color.parseColor(\"#FFFFFF\"));\ngd.setCornerRadius(50);\ngd.setStroke(2, Color.parseColor(\"#03A9F4\"));\nlinear1.setBackground(gd);\n\nToast toast \u003d new Toast(getApplicationContext()); toast.setDuration(Toast.LENGTH_SHORT);\ntoast.setView(toastLayout);\ntoast.show();"},{"name":"GetAll Contact","code":"\n//code By Gymkhana Studio\n\n\nselectUsers \u003d new ArrayList\u003cSelectUser\u003e();\nresolver \u003d this.getContentResolver();\nphones \u003d getContentResolver().query(android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME + \" ASC\");\ntry {\nLoadContact loadContact \u003d new LoadContact();\nloadContact.execute();\n} catch (Exception e) {\n\tshowMessage(e.toString());\n}\n} \nprivate ArrayList\u003cSelectUser\u003e selectUsers;\nprivate List\u003cSelectUser\u003e temp;\nprivate android.database.Cursor phones, email;\nprivate SearchView search;\nprivate SelectUserAdapter adapter;\nprivate ContentResolver resolver;\nclass LoadContact extends AsyncTask\u003cVoid, Void, Void\u003e {\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n        @Override\n        protected Void doInBackground(Void... voids) {\n            if (phones !\u003d null) {\n                if (phones.getCount() \u003d\u003d 0) {\n                }\n                while (phones.moveToNext()) {\n                    Bitmap bit_thumb \u003d null;\n                    String id \u003d phones.getString(phones.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID));\n                    String name \u003d phones.getString(phones.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n                    String phoneNumber \u003d phones.getString(phones.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER));\n                    String EmailAddr \u003d phones.getString(phones.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Email.DATA2));\n                    String image_thumb \u003d phones.getString(phones.getColumnIndex(android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI));\n                    try {\n                        if (image_thumb !\u003d null) {\n                            bit_thumb \u003d android.provider.MediaStore.Images.Media.getBitmap(resolver, Uri.parse(image_thumb));\n                        } else {\n                        }\n                    } catch (java.io.IOException e) {\n                        e.printStackTrace();\n                    }\n                    SelectUser selectUser \u003d new SelectUser();\n                    selectUser.setThumb(bit_thumb);\n                    selectUser.setName(name);\n                    selectUser.setPhone(phoneNumber);\n                    selectUser.setEmail(id);\n                    selectUsers.add(selectUser);\n                }\n            } else {\n                Log.e(\"Cursor close 1\", \"----------------\");\n            }\n            return null;\n        }\n        @Override\n        protected void onPostExecute(Void aVoid) {\n            super.onPostExecute(aVoid);\n            adapter \u003d new SelectUserAdapter(selectUsers, MainActivity.this);\n            listview1.setAdapter(adapter);\n            listview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n                @Override\n                public void onItemClick(AdapterView\u003c?\u003e adapterView, View view, int i, long l) {\n                    SelectUser data \u003d selectUsers.get(i);\n                }\n            });\n            listview1.setFastScrollEnabled(true);\n        }\n    }\n@Override\nprotected void onStop() {\n        super.onStop();\n        phones.close();\n}  \npublic boolean onCreateOptionsMenu(Menu menu) {\n\tSearchView search \u003d new SearchView(getActionBar().getThemedContext());\n\tsearch.setQueryHint(\"Search Here\");\n\tsearch.setOnQueryTextListener(new SearchView.OnQueryTextListener(){\n\t\t\t@Override\n\t\t\tpublic boolean onQueryTextSubmit(String query) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean onQueryTextChange(String newText) {\n\t\t\t\tadapter.filter(newText);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\tmenu.add(\"Search\").setIcon(R.drawable.ic_search).setActionView(search).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW); \n\tmenu.add(\"Update Code\").setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);\n\treturn true;\n}\n@Override \npublic boolean onOptionsItemSelected(final MenuItem item) {\n\tswitch (item.getTitle().toString()) {\n\t\tcase \"Update Code\":\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn super.onOptionsItemSelected(item);\n\t}\n}\n\npublic static class SelectUserAdapter extends BaseAdapter {\n    public List\u003cSelectUser\u003e _data;\n    private ArrayList\u003cSelectUser\u003e arraylist;\n    Context _c;\n    ViewHolder v;\n    RoundImage roundedImage;\n    public SelectUserAdapter(List\u003cSelectUser\u003e selectUsers, Context context) {\n        _data \u003d selectUsers;\n        _c \u003d context;\n        this.arraylist \u003d new ArrayList\u003cSelectUser\u003e();\n        this.arraylist.addAll(_data);\n    }\n    @Override\n    public int getCount() {\n        return _data.size();\n    }\n    @Override\n    public Object getItem(int i) {\n        return _data.get(i);\n    }\n    @Override\n    public long getItemId(int i) {\n        return i;\n    }\n    @Override\n    public View getView(int i, View convertView, ViewGroup viewGroup) {\n        View view \u003d convertView;\n        if (view \u003d\u003d null) {\n            LayoutInflater li \u003d (LayoutInflater) _c.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n            view \u003d li.inflate(R.layout.view, null);\n            Log.e(\"Inside\", \"here--------------------------- In view1\");\n        } else {\n            view \u003d convertView;\n            Log.e(\"Inside\", \"here--------------------------- In view2\");\n        }\n        v \u003d new ViewHolder();\n        v.title \u003d (TextView) view.findViewById(R.id.name);\n        v.phone \u003d (TextView) view.findViewById(R.id.no);\n        v.imageView \u003d (ImageView) view.findViewById(R.id.pic);\n        final SelectUser data \u003d (SelectUser) _data.get(i);\n        v.title.setText(data.getName());\n        v.phone.setText(data.getPhone());\n        try {\n            if (data.getThumb() !\u003d null) {\n                v.imageView.setImageBitmap(data.getThumb());\n            } else {\n                v.imageView.setImageResource(R.drawable.image);\n            }\n            Bitmap bm \u003d BitmapFactory.decodeResource(view.getResources(), R.drawable.image); // Load default image\n            roundedImage \u003d new RoundImage(bm);\n            v.imageView.setImageDrawable(roundedImage);\n        } catch (OutOfMemoryError e) {\n            v.imageView.setImageDrawable(this._c.getDrawable(R.drawable.image));\n            e.printStackTrace();\n        }\n        Log.e(\"Image Thumb\", \"--------------\" + data.getThumb());\n        view.setTag(data);\n        return view;\n    }\n    public void filter(String charText) {\n        charText \u003d charText.toLowerCase(Locale.getDefault());\n        _data.clear();\n        if (charText.length() \u003d\u003d 0) {\n            _data.addAll(arraylist);\n        } else {\n            for (SelectUser wp : arraylist) {\n                if (wp.getName().toLowerCase(Locale.getDefault())\n                        .contains(charText)) {\n                    _data.add(wp);\n                }\n            }\n        }\n        notifyDataSetChanged();\n    }\n    static class ViewHolder {\n        ImageView imageView;\n        TextView title, phone;\n    }\n}\n\npublic static class SelectUser {\n    String name;\n    public Bitmap getThumb() {\n        return thumb;\n    }\n    public void setThumb(Bitmap thumb) {\n        this.thumb \u003d thumb;\n    }\n    Bitmap thumb;\n    public String getPhone() {\n        return phone;\n    }\n    public void setPhone(String phone) {\n        this.phone \u003d phone;\n    }\n    String phone;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name \u003d name;\n    }\n    String email;\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email \u003d email;\n    }\n}\n\npublic static class RoundImage extends android.graphics.drawable.Drawable {\n\tprivate final Bitmap mBitmap;\n\tprivate final Paint mPaint;\n\tprivate final RectF mRectF;\n\tprivate final int mBitmapWidth;\n\tprivate final int mBitmapHeight;\n\tpublic RoundImage(Bitmap bitmap) {\n\t\tmBitmap \u003d bitmap;\n\t\tmRectF \u003d new RectF();\n\t\tmPaint \u003d new Paint();\n\t\tmPaint.setAntiAlias(true);\n\t\tmPaint.setDither(true);\n\t\tfinal BitmapShader shader \u003d new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);\n\t\tmPaint.setShader(shader);\n\t\tmBitmapWidth \u003d mBitmap.getWidth();\n\t\tmBitmapHeight \u003d mBitmap.getHeight();\n\t}\n\t@Override\n\tpublic void draw(Canvas canvas) {\n\t\tcanvas.drawOval(mRectF, mPaint);\n\t}\n\t@Override\n\tprotected void onBoundsChange(Rect bounds) {\n\t\tsuper.onBoundsChange(bounds);\n\t\tmRectF.set(bounds);\n\t}\n\t@Override\n\tpublic void setAlpha(int alpha) {\n\t\tif (mPaint.getAlpha() !\u003d alpha) {\n\t\t\tmPaint.setAlpha(alpha);\n\t\t\tinvalidateSelf();\n\t\t}\n\t}\n\t@Override\n\tpublic void setColorFilter(ColorFilter cf) {\n\t\tmPaint.setColorFilter(cf);\n\t}\n\t@Override\n\tpublic int getOpacity() {\n\t\treturn PixelFormat.TRANSLUCENT;\n\t}\n\t@Override\n\tpublic int getIntrinsicWidth() {\n\t\treturn mBitmapWidth;\n\t}\n\t@Override\n\tpublic int getIntrinsicHeight() {\n\t\treturn mBitmapHeight;\n\t}\n\tpublic void setAntiAlias(boolean aa) {\n\t\tmPaint.setAntiAlias(aa);\n\t\tinvalidateSelf();\n\t}\n\t@Override\n\tpublic void setFilterBitmap(boolean filter) {\n\t\tmPaint.setFilterBitmap(filter);\n\t\tinvalidateSelf();\n\t}\n\t@Override\n\tpublic void setDither(boolean dither) {\n\t\tmPaint.setDither(dither);\n\t\tinvalidateSelf();\n\t}\n\tpublic Bitmap getBitmap() {\n\t\treturn mBitmap;\n\t}\n}{\n\n\n\n\u003cuses-permission android:name\u003d\"android.permission.READ_CONTACTS\" /\u003e\n"},{"name":"GetAll Video","code":"\n//code By Gymkhana Studio\n\nlistview1.setAdapter(new ArrayAdapter\u003cString\u003e(getBaseContext(), android.R.layout.simple_list_item_1, getAllMedia()));\n}\npublic ArrayList\u003cString\u003e getAllMedia() {\n    HashSet\u003cString\u003e videoItemHashSet \u003d new HashSet\u003c\u003e();\n    String[] projection \u003d { android.provider.MediaStore.Video.VideoColumns.DATA ,android.provider.MediaStore.Video.Media.DISPLAY_NAME};\n    android.database.Cursor cursor \u003d getContentResolver().query(android.provider.MediaStore.Video.Media.EXTERNAL_CONTENT_URI, projection, null, null, null);\n    try {\n        cursor.moveToFirst();\n        do{\n            videoItemHashSet.add((cursor.getString(cursor.getColumnIndexOrThrow(android.provider.MediaStore.Video.Media.DATA))));\n        }while(cursor.moveToNext());\n\n        cursor.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    ArrayList\u003cString\u003e downloadedList \u003d new ArrayList\u003c\u003e(videoItemHashSet);\n    return downloadedList;\n}{\n\n\n/* spesific directory */\nString selection\u003dandroid.provider.MediaStore.Video.Media.DATA +\" like?\";\nString[] selectionArgs\u003dnew String[]{\"%Youtube%\"}; //Path\nString[] parameters \u003d { android.provider.MediaStore.Video.VideoColumns.DATA ,android.provider.MediaStore.Video.Media.DISPLAY_NAME};\nandroid.database.Cursor cursor \u003d getContentResolver().query(android.provider.MediaStore.Video.Media.EXTERNAL_CONTENT_URI, parameters, selection, selectionArgs, android.provider.MediaStore.Video.Media.DATE_TAKEN + \" DESC\");\n\n\n\n\n//Only Directory\nlistview1.setAdapter(new ArrayAdapter\u003cString\u003e(getBaseContext(), android.R.layout.simple_list_item_1, getAllMedia()));\n}\npublic ArrayList\u003cString\u003e getAllMedia() {\n    HashSet\u003cString\u003e videoItemHashSet \u003d new HashSet\u003c\u003e();\n    String[] projection \u003d { android.provider.MediaStore.Video.VideoColumns.DATA ,android.provider.MediaStore.Video.Media.DISPLAY_NAME};\n    android.database.Cursor cursor \u003d getContentResolver().query(android.provider.MediaStore.Video.Media.EXTERNAL_CONTENT_URI, projection, null, null, null);\n    try {\n        cursor.moveToFirst();\n        do{\n        \tString SRC \u003d cursor.getString(cursor.getColumnIndexOrThrow(android.provider.MediaStore.Video.Media.DATA));\n        \tjava.io.File f \u003d new java.io.File(SRC);\n            videoItemHashSet.add(f.getParentFile().getName());\n        }while(cursor.moveToNext());\n\n        cursor.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    ArrayList\u003cString\u003e downloadedList \u003d new ArrayList\u003c\u003e(videoItemHashSet);\n    return downloadedList;\n}{\n"},{"name":"Uninstall App","code":"\n//code By Gymkhana Studio\n\n Uri packageURI \u003d Uri.parse(\"package:\".concat(\"com.package.name\")); Intent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent);\n"},{"name":"Dynamic Layout","code":"\n//code By Gymkhana Studio\n\n\nLinearLayout.setPadding(16, 16, 10, 10);\n\nLinearLayout.setMargin(8, 4, 6, 8);\n\nLinearLayout.setAlpha(0.5d);\n\nLinearLayout.setElevation(10f);\n\nLinearLayout.setGravity(Gravity.CENTER);\n\nLinearLayout.setOrientation(VERTICAL);\n\nLinearLayout1.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n\nLinearLayout2.setLayoutParams(new ViewGroup.LayoutParams(60, 60));\n"},{"name":"Icon And Uninstall","code":"\n//code By Gymkhana Studio\n\nIntent startupIntent \u003d new Intent(Intent.ACTION_MAIN);\nstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);\nfinal android.content.pm.PackageManager pm \u003d getPackageManager();\nList\u003candroid.content.pm.ResolveInfo\u003e activities \u003d pm.queryIntentActivities(startupIntent,0);\nCollections.sort(activities, new Comparator\u003candroid.content.pm.ResolveInfo\u003e() {\n\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {\n\t\tandroid.content.pm.PackageManager pm \u003d getPackageManager();\n\t\treturn String.CASE_INSENSITIVE_ORDER.compare(a.loadLabel(pm).toString(), b.loadLabel(pm).toString());\n\t}\n});\nArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e adapter \u003d new ArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e(this, android.R.layout.simple_list_item_1, activities) {\n\tpublic View getView(int pos, View convertView, ViewGroup parent) {\n\t\tTextView tv \u003d new TextView(MainActivity.this);\n\t\tandroid.content.pm.ResolveInfo ri \u003d getItem(pos);\n\t\ttv.setText(ri.loadLabel(pm));\n\t\tLinearLayout lin \u003d new LinearLayout(MainActivity.this);\n\t\tImageView iv \u003d new ImageView(MainActivity.this);\n\t\tiv.setImageDrawable(ri.loadIcon(pm));\n\t\tlin.addView(iv);\n\t\tlin.addView(tv);\n\t\ttv.setGravity(Gravity.CENTER_VERTICAL);\n\t\ttv.setPadding(16,0,0,0);\n\t\ttv.setTextSize(16);\n\t\ttv.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n\t\tLinearLayout.LayoutParams p \u003d new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);\n\t\tp.width \u003d 70;\n\t\tp.height \u003d 70;\n\t\tp.bottomMargin \u003d 4;\n\t\tp.topMargin \u003d 4;\n\t\tiv.setLayoutParams(p);\n\t\tlin.setPadding(6,6,6,6);\n\t\treturn lin;\n\t}\n};\nlistview1.setAdapter(adapter);\nlistview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n\t@Override\n\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) {\n\t\tandroid.content.pm.ResolveInfo resolveInfo \u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);\n\t\tandroid.content.pm.ActivityInfo activityInfo \u003d resolveInfo.activityInfo;\n\t\tif (activityInfo \u003d\u003d null) return;\n\t\tUri packageURI \u003d Uri.parse(\"package:\".concat(activityInfo.applicationInfo.packageName));\n\t\tIntent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI);\n\t\tstartActivity(uninstallIntent);\n\t}\n});\n\n"},{"name":"Create Path","code":"\n//code By Gymkhana Studio\n\n\n\nprivate static void CreateDir(String path) {\n    java.io.File _pathDir \u003d new java.io.File(path);\n    if (!_pathDir.exists()) {\n        _pathDir.mkdir();\n    }\n}\n"},{"name":"Mp3 Streaming ","code":"\n//code By Gymkhana Studio\n\n\n\nString url \u003d \"https://tektite.streamguys1.com:5025/klcc.mp3\";\n\nm \u003d new MediaPlayer();\n\nm.setAudioStreamType(3);\n\ntry {\nm.setDataSource(url);\n\n}catch (IllegalArgumentException e) {\n\nToast.makeText(getApplicationContext(), \"You might not set the URI correctly!\", 1).show();\n\n} catch (SecurityException e2) { \n\nToast.makeText(getApplicationContext(), \"You might not set the URI, correctly!\", 1).show(); }\n\ncatch (IllegalStateException e3) { \n\nToast.makeText(getApplicationContext(), \"You might not set the URI, correctly!\", 1).show(); }\n\ncatch (java.io.IOException e4)\n{\ne4.printStackTrace();\n}\n\n\ntry\n{\nm.prepare();\n}\ncatch (IllegalStateException e5)\n{\nToast.makeText(getApplicationContext(), \"You might not set the URI correctly!\", 1).show();\n}\ncatch (java.io.IOException e6)\n{ \nToast.makeText(getApplicationContext(), \"You might not set the URI correctly!\", 1).show();\n}\n"},{"name":"Read Resources ","code":"\n//code By Gymkhana Studio\n\n\njava.io.InputStream ins \u003d getResources().openRawResource(R.drawable.file);\nStringBuilder text \u003d new StringBuilder();\ntry {\n    java.io.BufferedReader br \u003d new java.io.BufferedReader(new java.io.InputStreamReader(ins));\n    String line;\n    while ((line \u003d br.readLine()) !\u003d null) {\n        text.append(line);\n        text.append(\u0027n\u0027);\n    }\n    br.close();\n}\ncatch (java.io.IOException e) {\n}\nEditText tv \u003d (EditText)findViewById(R.id.edittext1);\ntv.setText(text.toString());\n"},{"name":"Flag no limit","code":"\n//code By Gymkhana Studio\n\n\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.KITKAT) {\n    w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);\n}\n"},{"name":"RGB Tile","code":"\n//code By Gymkhana Studio\n\n\nString Int_title \u003d String.format(Locale.US, \"#%06X\", (0xFFFFFF \u0026 Color.argb(120,50,90,10)));\n//or\ngetActionBar().setTitle(Html.fromHtml(\"\u003cfont color\u003d\\\\\"\" + Int_title + \"\\\\\"\u003eGabriel\u003c/font\u003e\"));\n"},{"name":"Bitmap Shader","code":"\n//code By Gymkhana Studio\n\n\nBitmap bitmap \u003d BitmapFactory.decodeResource(getResources(),R.drawable.pattern);\nShader shader \u003d new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);\ntextview1.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\ntextview1.getPaint().setShader(shader);\n"}]